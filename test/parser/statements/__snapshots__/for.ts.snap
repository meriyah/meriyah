// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) class C {} 1`] = `
"SyntaxError [1:17-1:22]: Class declaration can't appear in single-statement context
> 1 | for ( ; false; ) class C {}
    |                  ^^^^^ Class declaration can't appear in single-statement context"
`;

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) class C {} 2`] = `
"SyntaxError [1:17-1:22]: Class declaration can't appear in single-statement context
> 1 | for ( ; false; ) class C {}
    |                  ^^^^^ Class declaration can't appear in single-statement context"
`;

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) function f() {} 1`] = `
"SyntaxError [1:17-1:25]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for ( ; false; ) function f() {}
    |                  ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) function f() {} 2`] = `
"SyntaxError [1:17-1:25]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for ( ; false; ) function f() {}
    |                  ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) function* g() {} 1`] = `
"SyntaxError [1:17-1:25]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for ( ; false; ) function* g() {}
    |                  ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) label1: label2: function f() {} 1`] = `
"SyntaxError [1:33-1:41]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for ( ; false; ) label1: label2: function f() {}
    |                                  ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for ( ; false; ) label1: label2: function f() {} 2`] = `
"SyntaxError [1:33-1:41]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for ( ; false; ) label1: label2: function f() {}
    |                                  ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for (((x)=>{}) in y); 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in for-in
> 1 | for (((x)=>{}) in y);
    |                ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > for (((x)=>{}) of y); 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in for-of
> 1 | for (((x)=>{}) of y);
    |                ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for (() => { this in null };;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "left": {
                  "type": "ThisExpression",
                },
                "operator": "in",
                "right": {
                  "type": "Literal",
                  "value": null,
                },
                "type": "BinaryExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ((a * b + c) * d;b;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "left": {
            "left": {
              "name": "a",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "BinaryExpression",
          },
          "operator": "+",
          "right": {
            "name": "c",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "*",
        "right": {
          "name": "d",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ((a * b + c) * d;b;c); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "left": {
            "left": {
              "name": "a",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "BinaryExpression",
          },
          "operator": "+",
          "right": {
            "name": "c",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "*",
        "right": {
          "name": "d",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ((i in {})); 1`] = `
"SyntaxError [1:14-1:15]: Expected ';'
> 1 | for ((i in {}));
    |               ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for ((x)=>{} in y); 1`] = `
"SyntaxError [1:13-1:15]: Unexpected token: 'in'
> 1 | for ((x)=>{} in y);
    |              ^^ Unexpected token: 'in'"
`;

exports[`Statements - For > Statements - For (pass) > for ((x)=>{} of y); 1`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in for-of
> 1 | for ((x)=>{} of y);
    |              ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ((x)=>{}.x in y); 1`] = `
"SyntaxError [1:12-1:13]: Block body arrows can not be immediately accessed without a group
> 1 | for ((x)=>{}.x in y);
    |             ^ Block body arrows can not be immediately accessed without a group"
`;

exports[`Statements - For > Statements - For (pass) > for ((x)=>{}.x of y); 1`] = `
"SyntaxError [1:12-1:13]: Block body arrows can not be immediately accessed without a group
> 1 | for ((x)=>{}.x of y);
    |             ^ Block body arrows can not be immediately accessed without a group"
`;

exports[`Statements - For > Statements - For (pass) > for (;;) let 
 {} 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "let",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
    {
      "body": [],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;;) let 
 x = 1 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "let",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;;c); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;b;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;b;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;b;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (;b;c); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ([...{ get x() {} }] in [[[]]]) ; 1`] = `
"SyntaxError [1:25-1:27]: Invalid left-hand side in for-in
> 1 | for ([...{ get x() {} }] in [[[]]]) ;
    |                          ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > for ([{__proto__: 1, __proto__: 2}];;); 1`] = `
"SyntaxError [1:35-1:36]: Property name __proto__ appears more than once in object literal
> 1 | for ([{__proto__: 1, __proto__: 2}];;);
    |                                    ^ Property name __proto__ appears more than once in object literal"
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b] in c) d 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "d",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "elements": [
          {
            "computed": false,
            "object": {
              "name": "a",
              "type": "Identifier",
            },
            "optional": false,
            "property": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "MemberExpression",
          },
        ],
        "type": "ArrayPattern",
      },
      "right": {
        "name": "c",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b] of c) d 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "expression": {
          "name": "d",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "elements": [
          {
            "computed": false,
            "object": {
              "name": "a",
              "type": "Identifier",
            },
            "optional": false,
            "property": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "MemberExpression",
          },
        ],
        "type": "ArrayPattern",
      },
      "right": {
        "name": "c",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b](foo) of c) d 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in for-of
> 1 | for ([a.b](foo) of c) d
    |                 ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b]++ of c) d 1`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in for-of
> 1 | for ([a.b]++ of c) d
    |              ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b].foo in c) d 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "d",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "computed": false,
        "object": {
          "elements": [
            {
              "computed": false,
              "object": {
                "name": "a",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "name": "b",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
          ],
          "type": "ArrayExpression",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "right": {
        "name": "c",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b].foo of c) d 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "expression": {
          "name": "d",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "computed": false,
        "object": {
          "elements": [
            {
              "computed": false,
              "object": {
                "name": "a",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "name": "b",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
          ],
          "type": "ArrayExpression",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "right": {
        "name": "c",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ([a.b]\`foo\` of c) d 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in for-of
> 1 | for ([a.b]\`foo\` of c) d
    |                 ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ([x + y] = z;;); 1`] = `
"SyntaxError [1:13-1:14]: Invalid left-hand side in assignment
> 1 | for ([x + y] = z;;);
    |              ^ Invalid left-hand side in assignment"
`;

exports[`Statements - For > Statements - For (pass) > for (\`<\${new arguments(++r.function[eval], () => {}, function () {""}, (a)in this, true)}\`; x ^= arguments;) {} 1`] = `
{
  "body": [
    {
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "init": {
        "expressions": [
          {
            "arguments": [
              {
                "argument": {
                  "computed": true,
                  "object": {
                    "computed": false,
                    "object": {
                      "name": "r",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "name": "function",
                      "type": "Identifier",
                    },
                    "type": "MemberExpression",
                  },
                  "optional": false,
                  "property": {
                    "name": "eval",
                    "type": "Identifier",
                  },
                  "type": "MemberExpression",
                },
                "operator": "++",
                "prefix": true,
                "type": "UpdateExpression",
              },
              {
                "async": false,
                "body": {
                  "body": [],
                  "type": "BlockStatement",
                },
                "expression": false,
                "generator": false,
                "params": [],
                "type": "ArrowFunctionExpression",
              },
              {
                "async": false,
                "body": {
                  "body": [
                    {
                      "directive": "",
                      "expression": {
                        "type": "Literal",
                        "value": "",
                      },
                      "type": "ExpressionStatement",
                    },
                  ],
                  "type": "BlockStatement",
                },
                "generator": false,
                "id": null,
                "params": [],
                "type": "FunctionExpression",
              },
              {
                "left": {
                  "name": "a",
                  "type": "Identifier",
                },
                "operator": "in",
                "right": {
                  "type": "ThisExpression",
                },
                "type": "BinaryExpression",
              },
              {
                "type": "Literal",
                "value": true,
              },
            ],
            "callee": {
              "name": "arguments",
              "type": "Identifier",
            },
            "type": "NewExpression",
          },
        ],
        "quasis": [
          {
            "tail": false,
            "type": "TemplateElement",
            "value": {
              "cooked": "<",
              "raw": "<",
            },
          },
          {
            "tail": true,
            "type": "TemplateElement",
            "value": {
              "cooked": "",
              "raw": "",
            },
          },
        ],
        "type": "TemplateLiteral",
      },
      "test": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "^=",
        "right": {
          "name": "arguments",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ({__proto__: 1, __proto__: 2};;); 1`] = `
"SyntaxError [1:33-1:34]: Property name __proto__ appears more than once in object literal
> 1 | for ({__proto__: 1, __proto__: 2};;);
    |                                  ^ Property name __proto__ appears more than once in object literal"
`;

exports[`Statements - For > Statements - For (pass) > for ({}); 1`] = `
"SyntaxError [1:7-1:8]: Expected ';'
> 1 | for ({});
    |        ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for ({}.bar = x in obj); 1`] = `
"SyntaxError [1:16-1:18]: Expected ';'
> 1 | for ({}.bar = x in obj);
    |                 ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c} in d) e 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "e",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "a",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "computed": false,
              "object": {
                "name": "b",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "name": "c",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
          },
        ],
        "type": "ObjectPattern",
      },
      "right": {
        "name": "d",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c} of d) e 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "expression": {
          "name": "e",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "a",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "computed": false,
              "object": {
                "name": "b",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "name": "c",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
          },
        ],
        "type": "ObjectPattern",
      },
      "right": {
        "name": "d",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c}() of d) e 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in for-of
> 1 | for ({a: b.c}() of d) e
    |                 ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c}.foo in d) e 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "e",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "computed": false,
        "object": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": false,
                "object": {
                  "name": "b",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "c",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectExpression",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "right": {
        "name": "d",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c}.foo of d) e 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "expression": {
          "name": "e",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "computed": false,
        "object": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": false,
                "object": {
                  "name": "b",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "c",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectExpression",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "right": {
        "name": "d",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c}\`z\` of d) e 1`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in for-of
> 1 | for ({a: b.c}\`z\` of d) e
    |                  ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ({a: b.c}-- of d) e 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in for-of
> 1 | for ({a: b.c}-- of d) e
    |                 ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for ({a: x + y} = z;;); 1`] = `
"SyntaxError [1:16-1:17]: Invalid left-hand side in assignment
> 1 | for ({a: x + y} = z;;);
    |                 ^ Invalid left-hand side in assignment"
`;

exports[`Statements - For > Statements - For (pass) > for ({x = y} = (z);;) {} 1`] = `
{
  "body": [
    {
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "init": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for ({x=y} ;;) b; 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in for-loop
> 1 | for ({x=y} ;;) b;
    |            ^ Invalid left-hand side in for-loop"
`;

exports[`Statements - For > Statements - For (pass) > for (a * b + c * d;b;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "+",
        "right": {
          "left": {
            "name": "c",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "d",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "type": "BinaryExpression",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a * b + c * d;b;c); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "+",
        "right": {
          "left": {
            "name": "c",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "d",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "type": "BinaryExpression",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a * b + c * d;b;c); 3`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "+",
        "right": {
          "left": {
            "name": "c",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "d",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "type": "BinaryExpression",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a + b * c * d;b;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "+",
        "right": {
          "left": {
            "left": {
              "name": "b",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "name": "c",
              "type": "Identifier",
            },
            "type": "BinaryExpression",
          },
          "operator": "*",
          "right": {
            "name": "d",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "type": "BinaryExpression",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a + b); 1`] = `
"SyntaxError [1:10-1:11]: Expected ';'
> 1 | for (a + b);
    |           ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a += b of x); 1`] = `
"SyntaxError [1:12-1:14]: Expected ';'
> 1 | for (a += b of x);
    |             ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a = b in c) {} 1`] = `
"SyntaxError [1:11-1:13]: Expected ';'
> 1 | for (a = b in c) {}
    |            ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a = b in x); 1`] = `
"SyntaxError [1:11-1:13]: Expected ';'
> 1 | for (a = b in x);
    |            ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a = b of x); 1`] = `
"SyntaxError [1:11-1:13]: Expected ';'
> 1 | for (a = b of x);
    |            ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a ? b : c in x); 1`] = `
"SyntaxError [1:15-1:17]: Expected ';'
> 1 | for (a ? b : c in x);
    |                ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a ? b : c of x); 1`] = `
"SyntaxError [1:15-1:17]: Expected ';'
> 1 | for (a ? b : c of x);
    |                ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a ? b : c of x); 2`] = `
"SyntaxError [1:15-1:17]: Expected ';'
> 1 | for (a ? b : c of x);
    |                ^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a in b); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "name": "a",
        "type": "Identifier",
      },
      "right": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a in b=c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "name": "a",
        "type": "Identifier",
      },
      "right": {
        "left": {
          "name": "b",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "name": "c",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a of b); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "name": "a",
        "type": "Identifier",
      },
      "right": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a of b=c); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "name": "a",
        "type": "Identifier",
      },
      "right": {
        "left": {
          "name": "b",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "name": "c",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a); 1`] = `
"SyntaxError [1:6-1:7]: Expected ';'
> 1 | for (a);
    |       ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a, b); 1`] = `
"SyntaxError [1:9-1:10]: Expected ';'
> 1 | for (a, b);
    |          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (a;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": null,
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;;c); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": null,
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;b;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;b;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;b;c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (a;b;c); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "a",
        "type": "Identifier",
      },
      "test": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": {
        "name": "c",
        "type": "Identifier",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (const
foo();;); 1`] = `
"SyntaxError [2:3-2:4]: Missing initializer in const declaration
  1 | for (const
> 2 | foo();;);
    |    ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const
foo); 1`] = `
"SyntaxError [2:3-2:4]: Missing initializer in const declaration
  1 | for (const
> 2 | foo);
    |    ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [,,] = x); 1`] = `
"SyntaxError [1:19-1:20]: Expected ';'
> 1 | for (const [,,] = x);
    |                    ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [,foo] = arr); 1`] = `
"SyntaxError [1:23-1:24]: Expected ';'
> 1 | for (const [,foo] = arr);
    |                        ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [... ...foo] = obj); 1`] = `
"SyntaxError [1:16-1:19]: Unexpected token: '...'
> 1 | for (const [... ...foo] = obj);
    |                 ^^^ Unexpected token: '...'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [... ...foo] = obj;;); 1`] = `
"SyntaxError [1:16-1:19]: Unexpected token: '...'
> 1 | for (const [... ...foo] = obj;;);
    |                 ^^^ Unexpected token: '...'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...,] = obj); 1`] = `
"SyntaxError [1:15-1:16]: Unexpected token: ','
> 1 | for (const [...,] = obj);
    |                ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...,] = obj;;); 1`] = `
"SyntaxError [1:15-1:16]: Unexpected token: ','
> 1 | for (const [...,] = obj;;);
    |                ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...,] = obj;;); 2`] = `
"SyntaxError [1:15-1:16]: Unexpected token: ','
> 1 | for (const [...,] = obj;;);
    |                ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...,] in obj); 1`] = `
"SyntaxError [1:15-1:16]: Unexpected token: ','
> 1 | for (const [...,] in obj);
    |                ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...[foo, bar],,] = obj); 1`] = `
"SyntaxError [1:29-1:30]: The binding declaration is not destructible
> 1 | for (const [...[foo, bar],,] = obj);
    |                              ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...[foo, bar],,] = obj;;); 1`] = `
"SyntaxError [1:29-1:30]: The binding declaration is not destructible
> 1 | for (const [...[foo, bar],,] = obj;;);
    |                              ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...[foo, bar],,] in obj); 1`] = `
"SyntaxError [1:29-1:31]: The binding declaration is not destructible
> 1 | for (const [...[foo, bar],,] in obj);
    |                              ^^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...[foo, bar],] = obj;;); 1`] = `
"SyntaxError [1:28-1:29]: The binding declaration is not destructible
> 1 | for (const [...[foo, bar],] = obj;;);
    |                             ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...[foo, bar],] in obj); 1`] = `
"SyntaxError [1:28-1:30]: The binding declaration is not destructible
> 1 | for (const [...[foo, bar],] in obj);
    |                             ^^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...] = obj); 1`] = `
"SyntaxError [1:15-1:16]: The rest operator is missing an argument
> 1 | for (const [...] = obj);
    |                ^ The rest operator is missing an argument"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...] = obj;;); 1`] = `
"SyntaxError [1:15-1:16]: The rest operator is missing an argument
> 1 | for (const [...] = obj;;);
    |                ^ The rest operator is missing an argument"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...] in obj); 1`] = `
"SyntaxError [1:15-1:16]: The rest operator is missing an argument
> 1 | for (const [...] in obj);
    |                ^ The rest operator is missing an argument"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...{ x }, y] = [1, 2, 3]; a < 1; ) {} 1`] = `
"SyntaxError [1:25-1:26]: The binding declaration is not destructible
> 1 | for (const [...{ x }, y] = [1, 2, 3]; a < 1; ) {}
    |                          ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...bar = foo] = obj;;); 1`] = `
"SyntaxError [1:26-1:27]: The binding declaration is not destructible
> 1 | for (const [...bar = foo] = obj;;);
    |                           ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo, bar] = obj); 1`] = `
"SyntaxError [1:25-1:26]: The binding declaration is not destructible
> 1 | for (const [...foo, bar] = obj);
    |                          ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo, bar] = obj;;); 1`] = `
"SyntaxError [1:25-1:26]: The binding declaration is not destructible
> 1 | for (const [...foo, bar] = obj;;);
    |                          ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo, bar] in obj); 1`] = `
"SyntaxError [1:25-1:27]: The binding declaration is not destructible
> 1 | for (const [...foo, bar] in obj);
    |                          ^^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo,,] = obj); 1`] = `
"SyntaxError [1:22-1:23]: The binding declaration is not destructible
> 1 | for (const [...foo,,] = obj);
    |                       ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo,,] in obj); 1`] = `
"SyntaxError [1:22-1:24]: The binding declaration is not destructible
> 1 | for (const [...foo,,] in obj);
    |                       ^^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo,] = obj;;); 1`] = `
"SyntaxError [1:21-1:22]: The binding declaration is not destructible
> 1 | for (const [...foo,] = obj;;);
    |                      ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo,] in obj); 1`] = `
"SyntaxError [1:21-1:23]: The binding declaration is not destructible
> 1 | for (const [...foo,] in obj);
    |                      ^^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...foo] = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (const [...foo] = obj);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [...x] in y){} 1`] = `
{
  "body": [
    {
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "argument": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "const",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "y",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (const [...x] in y){} 2`] = `
{
  "body": [
    {
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "argument": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "const",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "y",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (const [...x] in y){} 3`] = `
{
  "body": [
    {
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "argument": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "const",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "y",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (const [..x] = obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [..x] = obj);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [..x] = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [..x] = obj;;);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [..x] in obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [..x] in obj);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [..x] of obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [..x] of obj);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [.x] = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [.x] = obj;;);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [.x] in obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [.x] in obj);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [.x] of obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '.'
> 1 | for (const [.x] of obj);
    |             ^ Unexpected token: '.'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [a=[...b], ...c] = obj); 1`] = `
"SyntaxError [1:33-1:34]: Expected ';'
> 1 | for (const [a=[...b], ...c] = obj);
    |                                  ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo = x]); 1`] = `
"SyntaxError [1:20-1:21]: Missing initializer in const declaration
> 1 | for (const [foo = x]);
    |                     ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo = x]); 2`] = `
"SyntaxError [1:20-1:21]: Missing initializer in const declaration
> 1 | for (const [foo = x]);
    |                     ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo = x]); 3`] = `
"SyntaxError [1:20-1:21]: Missing initializer in const declaration
> 1 | for (const [foo = x]);
    |                     ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo = x];;); 1`] = `
"SyntaxError [1:20-1:21]: Missing initializer in const declaration
> 1 | for (const [foo = x];;);
    |                     ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo, ...bar] = obj); 1`] = `
"SyntaxError [1:30-1:31]: Expected ';'
> 1 | for (const [foo, ...bar] = obj);
    |                               ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo,,] = arr); 1`] = `
"SyntaxError [1:24-1:25]: Expected ';'
> 1 | for (const [foo,,] = arr);
    |                         ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo,bar] = arr); 1`] = `
"SyntaxError [1:26-1:27]: Expected ';'
> 1 | for (const [foo,bar] = arr);
    |                           ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo=a, bar] = arr); 1`] = `
"SyntaxError [1:29-1:30]: Expected ';'
> 1 | for (const [foo=a, bar] = arr);
    |                              ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo] = arr, bar); 1`] = `
"SyntaxError [1:27-1:28]: Missing initializer in const declaration
> 1 | for (const [foo] = arr, bar);
    |                            ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo]); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const [foo]);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo]); 2`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const [foo]);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo], bar in arr); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const [foo], bar in arr);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo], bar); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const [foo], bar);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo], bar;;); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const [foo], bar;;);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [foo];;); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const [foo];;);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [z, z]; ; ) ; 1`] = `
"SyntaxError [1:17-1:18]: Missing initializer in const declaration
> 1 | for (const [z, z]; ; ) ;
    |                  ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const [z]; ; ) ; 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const [z]; ; ) ;
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,,} = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,,} = obj;;);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,,} in obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,,} in obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,,} of obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,,} of obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,,x} = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,,x} = obj;;);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,,x} of obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,,x} of obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,} = obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,} = obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,} = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,} = obj;;);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,} in obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,} in obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,} of obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,} of obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,x} = obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,x} = obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,x} = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,x} = obj;;);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {,x} in obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (const {,x} in obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {...x} in y){} 1`] = `
{
  "body": [
    {
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "argument": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "const",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "y",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x] = y} = z); 1`] = `
"SyntaxError [1:16-1:17]: A computed property name must be followed by a colon or paren
> 1 | for (const {[x] = y} = z);
    |                 ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x] = y} = z;;); 1`] = `
"SyntaxError [1:16-1:17]: A computed property name must be followed by a colon or paren
> 1 | for (const {[x] = y} = z;;);
    |                 ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x] = y} in obj); 1`] = `
"SyntaxError [1:16-1:17]: A computed property name must be followed by a colon or paren
> 1 | for (const {[x] = y} in obj);
    |                 ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]: y = z}); 1`] = `
"SyntaxError [1:23-1:24]: Missing initializer in const declaration
> 1 | for (const {[x]: y = z});
    |                        ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]: y = z};;); 1`] = `
"SyntaxError [1:23-1:24]: Missing initializer in const declaration
> 1 | for (const {[x]: y = z};;);
    |                        ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]: y} = z); 1`] = `
"SyntaxError [1:23-1:24]: Expected ';'
> 1 | for (const {[x]: y} = z);
    |                        ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]: y};;); 1`] = `
"SyntaxError [1:19-1:20]: Missing initializer in const declaration
> 1 | for (const {[x]: y};;);
    |                    ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]} = z); 1`] = `
"SyntaxError [1:15-1:16]: A computed property name must be followed by a colon or paren
> 1 | for (const {[x]} = z);
    |                ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]} = z;;); 1`] = `
"SyntaxError [1:15-1:16]: A computed property name must be followed by a colon or paren
> 1 | for (const {[x]} = z;;);
    |                ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (const {[x]};;); 1`] = `
"SyntaxError [1:15-1:16]: A computed property name must be followed by a colon or paren
> 1 | for (const {[x]};;);
    |                ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (const {a:=c} = z); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: '='
> 1 | for (const {a:=c} = z);
    |               ^ Unexpected token: '='"
`;

exports[`Statements - For > Statements - For (pass) > for (const {a:=c} = z;;); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: '='
> 1 | for (const {a:=c} = z;;);
    |               ^ Unexpected token: '='"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x : y = z} = obj); 1`] = `
"SyntaxError [1:28-1:29]: Expected ';'
> 1 | for (const {x : y = z} = obj);
    |                             ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x : y, z : a} = obj); 1`] = `
"SyntaxError [1:31-1:32]: Expected ';'
> 1 | for (const {x : y, z : a} = obj);
    |                                ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x : y, z, a : b = c} = obj); 1`] = `
"SyntaxError [1:38-1:39]: Expected ';'
> 1 | for (const {x : y, z, a : b = c} = obj);
    |                                       ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x : y} = obj); 1`] = `
"SyntaxError [1:24-1:25]: Expected ';'
> 1 | for (const {x : y} = obj);
    |                         ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x = y, z = a} = obj); 1`] = `
"SyntaxError [1:31-1:32]: Expected ';'
> 1 | for (const {x = y, z = a} = obj);
    |                                ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x = y} = obj); 1`] = `
"SyntaxError [1:24-1:25]: Expected ';'
> 1 | for (const {x = y} = obj);
    |                         ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x, y} = obj); 1`] = `
"SyntaxError [1:23-1:24]: Expected ';'
> 1 | for (const {x, y} = obj);
    |                        ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x,, y} = obj); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ','
> 1 | for (const {x,, y} = obj);
    |               ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x,, y} = obj;;); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ','
> 1 | for (const {x,, y} = obj;;);
    |               ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x,, y} in obj); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ','
> 1 | for (const {x,, y} in obj);
    |               ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x,, y} of obj); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ','
> 1 | for (const {x,, y} of obj);
    |               ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x,,} = obj;;); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ','
> 1 | for (const {x,,} = obj;;);
    |               ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x,,} in obj); 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ','
> 1 | for (const {x,,} in obj);
    |               ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z} = obj, {a:b=c}); 1`] = `
"SyntaxError [1:33-1:34]: Missing initializer in const declaration
> 1 | for (const {x:y=z} = obj, {a:b=c});
    |                                  ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z} = obj, {a:b=c}); 2`] = `
"SyntaxError [1:33-1:34]: Missing initializer in const declaration
> 1 | for (const {x:y=z} = obj, {a:b=c});
    |                                  ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z} = obj, {a:b=c};;); 1`] = `
"SyntaxError [1:33-1:34]: Missing initializer in const declaration
> 1 | for (const {x:y=z} = obj, {a:b=c};;);
    |                                  ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z}); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in const declaration
> 1 | for (const {x:y=z});
    |                   ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z}, {a:b=c} = obj); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in const declaration
> 1 | for (const {x:y=z}, {a:b=c} = obj);
    |                   ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z}, {a:b=c} = obj;;); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in const declaration
> 1 | for (const {x:y=z}, {a:b=c} = obj;;);
    |                   ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z}, {a:b=c} in obj); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in const declaration
> 1 | for (const {x:y=z}, {a:b=c} in obj);
    |                   ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y=z};;); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in const declaration
> 1 | for (const {x:y=z};;);
    |                   ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y}); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const {x:y});
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x:y};;); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const {x:y};;);
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x=y}); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in const declaration
> 1 | for (const {x=y});
    |                 ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x} = a, obj); 1`] = `
"SyntaxError [1:23-1:24]: Missing initializer in const declaration
> 1 | for (const {x} = a, obj);
    |                        ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x} = a, obj;;); 1`] = `
"SyntaxError [1:23-1:24]: Missing initializer in const declaration
> 1 | for (const {x} = a, obj;;);
    |                        ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x} = a, y = obj); 1`] = `
"SyntaxError [1:27-1:28]: Expected ';'
> 1 | for (const {x} = a, y = obj);
    |                            ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x} = obj); 1`] = `
"SyntaxError [1:20-1:21]: Expected ';'
> 1 | for (const {x} = obj);
    |                     ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x});
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}, {y} = z); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x}, {y} = z);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}, {y} = z;;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x}, {y} = z;;);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}, y); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x}, y);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}, y); 2`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x}, y);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}, y); 3`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x}, y);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const {x}, y;;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const {x}, y;;);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const a in b); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "const",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (const a,b,c;;); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const a,b,c;;);
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const a;;); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const a;;);
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo = arr, [bar] = arr2); 1`] = `
"SyntaxError [1:34-1:35]: Expected ';'
> 1 | for (const foo = arr, [bar] = arr2);
    |                                   ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo = bar in x); 1`] = `
"SyntaxError [1:11-1:23]: 'for-in' loop head declarations can not have an initializer
> 1 | for (const foo = bar in x);
    |            ^^^^^^^^^^^^ 'for-in' loop head declarations can not have an initializer"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo = bar of x); 1`] = `
"SyntaxError [1:11-1:23]: 'for-of' loop head declarations can not have an initializer
> 1 | for (const foo = bar of x);
    |            ^^^^^^^^^^^^ 'for-of' loop head declarations can not have an initializer"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo = bar, zoo = boo in x); 1`] = `
"SyntaxError [1:22-1:34]: 'for-in' loop head declarations can not have an initializer
> 1 | for (const foo = bar, zoo = boo in x);
    |                       ^^^^^^^^^^^^ 'for-in' loop head declarations can not have an initializer"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo = bar, zoo = boo of x); 1`] = `
"SyntaxError [1:22-1:34]: 'for-of' loop head declarations can not have an initializer
> 1 | for (const foo = bar, zoo = boo of x);
    |                       ^^^^^^^^^^^^ 'for-of' loop head declarations can not have an initializer"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo = bar, zoo = boo); 1`] = `
"SyntaxError [1:31-1:32]: Expected ';'
> 1 | for (const foo = bar, zoo = boo);
    |                                ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, [bar] = arr2); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, [bar] = arr2);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, [bar] = arr2;;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, [bar] = arr2;;);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, [bar] in arr); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, [bar] in arr);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, [bar] of arr); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, [bar] of arr);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, [bar]); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, [bar]);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, [bar];;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, [bar];;);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, bar of x); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, bar of x);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, bar); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, bar);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo, zoo of x); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo, zoo of x);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const foo;;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in const declaration
> 1 | for (const foo;;);
    |               ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x = 5, y; ; ) ; 1`] = `
"SyntaxError [1:19-1:20]: Missing initializer in const declaration
> 1 | for (const x = 5, y; ; ) ;
    |                    ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x = y, {z}); 1`] = `
"SyntaxError [1:21-1:22]: Missing initializer in const declaration
> 1 | for (const x = y, {z});
    |                      ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x = y, {z};;); 1`] = `
"SyntaxError [1:21-1:22]: Missing initializer in const declaration
> 1 | for (const x = y, {z};;);
    |                      ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x, {y} = obj); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const x, {y} = obj);
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x, {y} = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const x, {y} = obj;;);
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x, {y} in obj); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const x, {y} in obj);
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x, {y};;); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const x, {y};;);
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (const x; ; ) ; 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in const declaration
> 1 | for (const x; ; ) ;
    |             ^ Missing initializer in const declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (foo=10;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "name": "foo",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 10,
        },
        "type": "AssignmentExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let
foo;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "foo",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [,,] = x;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                null,
                null,
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [,] = x;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                null,
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [...{ x } = []] = []; a < 1; ) {} 1`] = `
"SyntaxError [1:25-1:26]: The binding declaration is not destructible
> 1 | for (let [...{ x } = []] = []; a < 1; ) {}
    |                          ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (let [...foo] = obj;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "argument": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "obj",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [...x = []] = []; a < 1; ) {} 1`] = `
"SyntaxError [1:21-1:22]: The binding declaration is not destructible
> 1 | for (let [...x = []] = []; a < 1; ) {}
    |                      ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (let [...x = []] = []; a < 1; ) {} 2`] = `
"SyntaxError [1:21-1:22]: The binding declaration is not destructible
> 1 | for (let [...x = []] = []; a < 1; ) {}
    |                      ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (let [] = 0, [];;); 1`] = `
"SyntaxError [1:19-1:20]: Missing initializer in destructuring declaration
> 1 | for (let [] = 0, [];;);
    |                    ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let [] = 0, {};;); 1`] = `
"SyntaxError [1:19-1:20]: Missing initializer in destructuring declaration
> 1 | for (let [] = 0, {};;);
    |                    ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let [] = x;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [];;); 1`] = `
"SyntaxError [1:11-1:12]: Missing initializer in destructuring declaration
> 1 | for (let [];;);
    |            ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let [a = 0];;); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in destructuring declaration
> 1 | for (let [a = 0];;);
    |                 ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo, ...bar] = obj;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
                {
                  "argument": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "obj",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo, bar=b] = arr;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
                {
                  "left": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo, bar=b] in arr); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
                {
                  "left": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo,] = arr;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo=a, bar=b] = arr;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
                {
                  "left": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo=a, bar=b] in arr); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
                {
                  "left": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo=a] = arr;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo] = arr, [bar] = arr2;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "elements": [
                {
                  "name": "bar",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr2",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo] = arr, bar;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "bar",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [foo] = arr;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let [z, z]; ; ) ; 1`] = `
"SyntaxError [1:15-1:16]: Missing initializer in destructuring declaration
> 1 | for (let [z, z]; ; ) ;
    |                ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let {};;); 1`] = `
"SyntaxError [1:11-1:12]: Missing initializer in destructuring declaration
> 1 | for (let {};;);
    |            ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let {a = 0};;); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in destructuring declaration
> 1 | for (let {a = 0};;);
    |                 ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let {x} = obj;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "x",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": {
              "name": "obj",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a = 0, [];;); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in destructuring declaration
> 1 | for (let a = 0, [];;);
    |                   ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let a = 0, {};;); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in destructuring declaration
> 1 | for (let a = 0, {};;);
    |                   ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (let a = b in c) {} 1`] = `
"SyntaxError [1:9-1:17]: 'for-in' loop head declarations can not have an initializer
> 1 | for (let a = b in c) {}
    |          ^^^^^^^^ 'for-in' loop head declarations can not have an initializer"
`;

exports[`Statements - For > Statements - For (pass) > for (let a of b); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a of b); 2`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "b",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a, { b } = {};;) { let a, { b } = {}; { let a, { b } = {}; }} 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "a",
                  "type": "Identifier",
                },
                "init": null,
                "type": "VariableDeclarator",
              },
              {
                "id": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "b",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": true,
                      "type": "Property",
                      "value": {
                        "name": "b",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectPattern",
                },
                "init": {
                  "properties": [],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "let",
            "type": "VariableDeclaration",
          },
          {
            "body": [
              {
                "declarations": [
                  {
                    "id": {
                      "name": "a",
                      "type": "Identifier",
                    },
                    "init": null,
                    "type": "VariableDeclarator",
                  },
                  {
                    "id": {
                      "properties": [
                        {
                          "computed": false,
                          "key": {
                            "name": "b",
                            "type": "Identifier",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true,
                          "type": "Property",
                          "value": {
                            "name": "b",
                            "type": "Identifier",
                          },
                        },
                      ],
                      "type": "ObjectPattern",
                    },
                    "init": {
                      "properties": [],
                      "type": "ObjectExpression",
                    },
                    "type": "VariableDeclarator",
                  },
                ],
                "kind": "let",
                "type": "VariableDeclaration",
              },
            ],
            "type": "BlockStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "b",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": {
              "properties": [],
              "type": "ObjectExpression",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a,b,c;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "c",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a,b,c;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "c",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let a;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let foo = arr, [bar] = arr2;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "foo",
              "type": "Identifier",
            },
            "init": {
              "name": "arr",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "elements": [
                {
                  "name": "bar",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": {
              "name": "arr2",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let foo in x); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "foo",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let foo;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "foo",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let in x) y 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "left": {
        "name": "let",
        "type": "Identifier",
      },
      "right": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (let x of a,b) c 1`] = `
"SyntaxError [1:15-1:16]: Expected ')'
> 1 | for (let x of a,b) c
    |                ^ Expected ')'"
`;

exports[`Statements - For > Statements - For (pass) > for (let x of y, z) {} 1`] = `
"SyntaxError [1:15-1:16]: Expected ')'
> 1 | for (let x of y, z) {}
    |                ^ Expected ')'"
`;

exports[`Statements - For > Statements - For (pass) > for (let=10;;); 1`] = `
"SyntaxError [1:8-1:9]: Identifier "let" disallowed as left-hand side expression in strict mode
> 1 | for (let=10;;);
    |         ^ Identifier "let" disallowed as left-hand side expression in strict mode"
`;

exports[`Statements - For > Statements - For (pass) > for (let=10;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "left": {
          "name": "let",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 10,
        },
        "type": "AssignmentExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (true ? a in b : {}; false; ) ; 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "alternate": {
          "properties": [],
          "type": "ObjectExpression",
        },
        "consequent": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "in",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "test": {
          "type": "Literal",
          "value": true,
        },
        "type": "ConditionalExpression",
      },
      "test": {
        "type": "Literal",
        "value": false,
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var [,,] = x); 1`] = `
"SyntaxError [1:17-1:18]: Expected ';'
> 1 | for (var [,,] = x);
    |                  ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [,,foo] = arr); 1`] = `
"SyntaxError [1:22-1:23]: Expected ';'
> 1 | for (var [,,foo] = arr);
    |                       ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [,] = x); 1`] = `
"SyntaxError [1:16-1:17]: Expected ';'
> 1 | for (var [,] = x);
    |                 ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [,foo] = arr); 1`] = `
"SyntaxError [1:21-1:22]: Expected ';'
> 1 | for (var [,foo] = arr);
    |                      ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...[ x ] = []] = []; a < 1; ) {} 1`] = `
"SyntaxError [1:25-1:26]: The binding declaration is not destructible
> 1 | for (var [...[ x ] = []] = []; a < 1; ) {}
    |                          ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...[foo, bar],,] = obj); 1`] = `
"SyntaxError [1:27-1:28]: The binding declaration is not destructible
> 1 | for (var [...[foo, bar],,] = obj);
    |                            ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...[foo, bar],] = obj); 1`] = `
"SyntaxError [1:26-1:27]: The binding declaration is not destructible
> 1 | for (var [...[foo, bar],] = obj);
    |                           ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...[foo, bar]] = obj); 1`] = `
"SyntaxError [1:30-1:31]: Expected ';'
> 1 | for (var [...[foo, bar]] = obj);
    |                               ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...] = obj); 1`] = `
"SyntaxError [1:13-1:14]: The rest operator is missing an argument
> 1 | for (var [...] = obj);
    |              ^ The rest operator is missing an argument"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...bar = foo] = obj); 1`] = `
"SyntaxError [1:24-1:25]: The binding declaration is not destructible
> 1 | for (var [...bar = foo] = obj);
    |                         ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...foo, bar] = obj); 1`] = `
"SyntaxError [1:23-1:24]: The binding declaration is not destructible
> 1 | for (var [...foo, bar] = obj);
    |                        ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...foo,,] = obj); 1`] = `
"SyntaxError [1:20-1:21]: The binding declaration is not destructible
> 1 | for (var [...foo,,] = obj);
    |                     ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...foo,] = obj); 1`] = `
"SyntaxError [1:19-1:20]: The binding declaration is not destructible
> 1 | for (var [...foo,] = obj);
    |                    ^ The binding declaration is not destructible"
`;

exports[`Statements - For > Statements - For (pass) > for (var [...foo] = obj); 1`] = `
"SyntaxError [1:23-1:24]: Expected ';'
> 1 | for (var [...foo] = obj);
    |                        ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [] = x); 1`] = `
"SyntaxError [1:15-1:16]: Expected ';'
> 1 | for (var [] = x);
    |                ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo = x]); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in destructuring declaration
> 1 | for (var [foo = x]);
    |                   ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo, ...bar] = obj); 1`] = `
"SyntaxError [1:28-1:29]: Expected ';'
> 1 | for (var [foo, ...bar] = obj);
    |                             ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo, bar=b] = arr); 1`] = `
"SyntaxError [1:27-1:28]: Expected ';'
> 1 | for (var [foo, bar=b] = arr);
    |                            ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo,,] = arr); 1`] = `
"SyntaxError [1:22-1:23]: Expected ';'
> 1 | for (var [foo,,] = arr);
    |                       ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo,,bar] = arr); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var [foo,,bar] = arr);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo,] = arr); 1`] = `
"SyntaxError [1:21-1:22]: Expected ';'
> 1 | for (var [foo,] = arr);
    |                      ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo,bar] = arr); 1`] = `
"SyntaxError [1:24-1:25]: Expected ';'
> 1 | for (var [foo,bar] = arr);
    |                         ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo=a, bar=b] = arr); 1`] = `
"SyntaxError [1:29-1:30]: Expected ';'
> 1 | for (var [foo=a, bar=b] = arr);
    |                              ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo=a, bar] = arr); 1`] = `
"SyntaxError [1:27-1:28]: Expected ';'
> 1 | for (var [foo=a, bar] = arr);
    |                            ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo=a] = arr); 1`] = `
"SyntaxError [1:22-1:23]: Expected ';'
> 1 | for (var [foo=a] = arr);
    |                       ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo] = arr); 1`] = `
"SyntaxError [1:20-1:21]: Expected ';'
> 1 | for (var [foo] = arr);
    |                     ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo] = arr, [bar] = arr2); 1`] = `
"SyntaxError [1:34-1:35]: Expected ';'
> 1 | for (var [foo] = arr, [bar] = arr2);
    |                                   ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo] = arr, [bar] = arr2); 2`] = `
"SyntaxError [1:34-1:35]: Expected ';'
> 1 | for (var [foo] = arr, [bar] = arr2);
    |                                   ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo] = arr, bar = arr2); 1`] = `
"SyntaxError [1:32-1:33]: Expected ';'
> 1 | for (var [foo] = arr, bar = arr2);
    |                                 ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo] = arr, bar); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var [foo] = arr, bar);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo]); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | for (var [foo]);
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var [foo], bar); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | for (var [foo], bar);
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var [x, ...[foo, bar]] = obj); 1`] = `
"SyntaxError [1:33-1:34]: Expected ';'
> 1 | for (var [x, ...[foo, bar]] = obj);
    |                                  ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,,} = obj); 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,,} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,,x} = obj); 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,,x} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,,x} = obj); 2`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,,x} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,,x} = obj); 3`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,,x} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,,x} = obj); 4`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,,x} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,} = obj); 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {,x} = obj); 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (var {,x} = obj);
    |           ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {[x]: y = z} = a); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var {[x]: y = z} = a);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {[x]: y = z}); 1`] = `
"SyntaxError [1:21-1:22]: Missing initializer in destructuring declaration
> 1 | for (var {[x]: y = z});
    |                      ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {[x]: y} = z); 1`] = `
"SyntaxError [1:21-1:22]: Expected ';'
> 1 | for (var {[x]: y} = z);
    |                      ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {[x]: y}); 1`] = `
"SyntaxError [1:17-1:18]: Missing initializer in destructuring declaration
> 1 | for (var {[x]: y});
    |                  ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {[x]} = z); 1`] = `
"SyntaxError [1:13-1:14]: A computed property name must be followed by a colon or paren
> 1 | for (var {[x]} = z);
    |              ^ A computed property name must be followed by a colon or paren"
`;

exports[`Statements - For > Statements - For (pass) > for (var {} = obj); 1`] = `
"SyntaxError [1:17-1:18]: Expected ';'
> 1 | for (var {} = obj);
    |                  ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {a, [x]: y} = a); 1`] = `
"SyntaxError [1:24-1:25]: Expected ';'
> 1 | for (var {a, [x]: y} = a);
    |                         ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {a:=c} = z); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '='
> 1 | for (var {a:=c} = z);
    |             ^ Unexpected token: '='"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x = y, z = a} = obj); 1`] = `
"SyntaxError [1:29-1:30]: Expected ';'
> 1 | for (var {x = y, z = a} = obj);
    |                              ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x = y, z} = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var {x = y, z} = obj);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x = y} = obj); 1`] = `
"SyntaxError [1:22-1:23]: Expected ';'
> 1 | for (var {x = y} = obj);
    |                       ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x, y = z} = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var {x, y = z} = obj);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x, y} = obj); 1`] = `
"SyntaxError [1:21-1:22]: Expected ';'
> 1 | for (var {x, y} = obj);
    |                      ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x,, y} = obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (var {x,, y} = obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x,,} = obj); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (var {x,,} = obj);
    |             ^ Unexpected token: ','"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x,} = obj); 1`] = `
"SyntaxError [1:19-1:20]: Expected ';'
> 1 | for (var {x,} = obj);
    |                    ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x:y=z} = obj, {a:b=c}); 1`] = `
"SyntaxError [1:31-1:32]: Missing initializer in destructuring declaration
> 1 | for (var {x:y=z} = obj, {a:b=c});
    |                                ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x:y=z}); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in destructuring declaration
> 1 | for (var {x:y=z});
    |                 ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x:y=z}, {a:b=c} = obj); 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in destructuring declaration
> 1 | for (var {x:y=z}, {a:b=c} = obj);
    |                 ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x=y}); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | for (var {x=y});
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x} = a, {y} = obj); 1`] = `
"SyntaxError [1:27-1:28]: Expected ';'
> 1 | for (var {x} = a, {y} = obj);
    |                            ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x} = a, obj); 1`] = `
"SyntaxError [1:21-1:22]: Expected ';'
> 1 | for (var {x} = a, obj);
    |                      ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x} = a, y = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var {x} = a, y = obj);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x} = obj); 1`] = `
"SyntaxError [1:18-1:19]: Expected ';'
> 1 | for (var {x} = obj);
    |                   ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x}, {y} = z); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | for (var {x}, {y} = z);
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x}, y); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | for (var {x}, y);
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var {x}, y); 2`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | for (var {x}, y);
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var a = (++effects, -1) in stored = a, {a: 0, b: 1, c: 2}); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "expressions": [
                {
                  "argument": {
                    "name": "effects",
                    "type": "Identifier",
                  },
                  "operator": "++",
                  "prefix": true,
                  "type": "UpdateExpression",
                },
                {
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                  },
                  "operator": "-",
                  "prefix": true,
                  "type": "UnaryExpression",
                },
              ],
              "type": "SequenceExpression",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "right": {
        "expressions": [
          {
            "left": {
              "name": "stored",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "a",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "type": "Literal",
                  "value": 0,
                },
              },
              {
                "computed": false,
                "key": {
                  "name": "b",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "type": "Literal",
                  "value": 1,
                },
              },
              {
                "computed": false,
                "key": {
                  "name": "c",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "type": "Literal",
                  "value": 2,
                },
              },
            ],
            "type": "ObjectExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a = (++effects, -1) in x); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "expressions": [
                {
                  "argument": {
                    "name": "effects",
                    "type": "Identifier",
                  },
                  "operator": "++",
                  "prefix": true,
                  "type": "UpdateExpression",
                },
                {
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                  },
                  "operator": "-",
                  "prefix": true,
                  "type": "UnaryExpression",
                },
              ],
              "type": "SequenceExpression",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a = ++b in c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "argument": {
                "name": "b",
                "type": "Identifier",
              },
              "operator": "++",
              "prefix": true,
              "type": "UpdateExpression",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "c",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a = 0 in stored = a, {}); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 0,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "right": {
        "expressions": [
          {
            "left": {
              "name": "stored",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
          {
            "properties": [],
            "type": "ObjectExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a = b in c); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "c",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a in arr;1;){ break; } 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | for (var a in arr;1;){ break; }
    |                  ^ Expected ')'"
`;

exports[`Statements - For > Statements - For (pass) > for (var a in arr;1;){ break; } 2`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | for (var a in arr;1;){ break; }
    |                  ^ Expected ')'"
`;

exports[`Statements - For > Statements - For (pass) > for (var a in stored = a, {a: 0, b: 1, c: 2}); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "right": {
        "expressions": [
          {
            "left": {
              "name": "stored",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "a",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "type": "Literal",
                  "value": 0,
                },
              },
              {
                "computed": false,
                "key": {
                  "name": "b",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "type": "Literal",
                  "value": 1,
                },
              },
              {
                "computed": false,
                "key": {
                  "name": "c",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "type": "Literal",
                  "value": 2,
                },
              },
            ],
            "type": "ObjectExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a, b=1;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a, b=1;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a,b,c;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "c",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a,b,c;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "c",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a;;) { let a; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "a",
                  "type": "Identifier",
                },
                "init": null,
                "type": "VariableDeclarator",
              },
            ],
            "kind": "let",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a=1, b;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a=1, b;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a=1, b=2;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 2,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a=1, b=2;;); 2`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
          {
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 2,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var a=1;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 1,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var foo = arr, [bar] = arr2); 1`] = `
"SyntaxError [1:32-1:33]: Expected ';'
> 1 | for (var foo = arr, [bar] = arr2);
    |                                 ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var foo, [bar]); 1`] = `
"SyntaxError [1:19-1:20]: Missing initializer in destructuring declaration
> 1 | for (var foo, [bar]);
    |                    ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var x = 0; x < 1000000; x++); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "declarations": [
          {
            "id": {
              "name": "x",
              "type": "Identifier",
            },
            "init": {
              "type": "Literal",
              "value": 0,
            },
            "type": "VariableDeclarator",
          },
        ],
        "kind": "var",
        "type": "VariableDeclaration",
      },
      "test": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "<",
        "right": {
          "type": "Literal",
          "value": 1000000,
        },
        "type": "BinaryExpression",
      },
      "type": "ForStatement",
      "update": {
        "argument": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "++",
        "prefix": false,
        "type": "UpdateExpression",
      },
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for (var x = a, {y} = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (var x = a, {y} = obj);
    |                          ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (var x = y, {z}); 1`] = `
"SyntaxError [1:19-1:20]: Missing initializer in destructuring declaration
> 1 | for (var x = y, {z});
    |                    ^ Missing initializer in destructuring declaration"
`;

exports[`Statements - For > Statements - For (pass) > for (var x, {y} = obj); 1`] = `
"SyntaxError [1:21-1:22]: Expected ';'
> 1 | for (var x, {y} = obj);
    |                      ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > for (x of y) foo: bar: function f(){} 1`] = `
"SyntaxError [1:23-1:31]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for (x of y) foo: bar: function f(){}
    |                        ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for (x of y) foo: function f(){} 1`] = `
"SyntaxError [1:18-1:26]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | for (x of y) foo: function f(){}
    |                   ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - For > Statements - For (pass) > for (x=>{} of y); 1`] = `
"SyntaxError [1:11-1:13]: Invalid left-hand side in for-of
> 1 | for (x=>{} of y);
    |            ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > for (x=>{}.x in y); 1`] = `
"SyntaxError [1:10-1:11]: Block body arrows can not be immediately accessed without a group
> 1 | for (x=>{}.x in y);
    |           ^ Block body arrows can not be immediately accessed without a group"
`;

exports[`Statements - For > Statements - For (pass) > for (x=>{}.x of y); 1`] = `
"SyntaxError [1:10-1:11]: Block body arrows can not be immediately accessed without a group
> 1 | for (x=>{}.x of y);
    |           ^ Block body arrows can not be immediately accessed without a group"
`;

exports[`Statements - For > Statements - For (pass) > for (x=>x in y;;); 1`] = `
"SyntaxError [1:10-1:12]: Invalid left-hand side in for-in
> 1 | for (x=>x in y;;);
    |           ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > for (yield;;); 1`] = `
"SyntaxError [1:5-1:10]: 'yield' may not be used as an identifier in this context
> 1 | for (yield;;);
    |      ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Statements - For > Statements - For (pass) > for(
a=1,
b=2;;); 1`] = `
{
  "body": [
    {
      "body": {
        "end": 17,
        "loc": {
          "end": {
            "column": 7,
            "line": 3,
          },
          "start": {
            "column": 6,
            "line": 3,
          },
        },
        "range": [
          16,
          17,
        ],
        "start": 16,
        "type": "EmptyStatement",
      },
      "end": 17,
      "init": {
        "end": 13,
        "expressions": [
          {
            "end": 8,
            "left": {
              "end": 6,
              "loc": {
                "end": {
                  "column": 1,
                  "line": 2,
                },
                "start": {
                  "column": 0,
                  "line": 2,
                },
              },
              "name": "a",
              "range": [
                5,
                6,
              ],
              "start": 5,
              "type": "Identifier",
            },
            "loc": {
              "end": {
                "column": 3,
                "line": 2,
              },
              "start": {
                "column": 0,
                "line": 2,
              },
            },
            "operator": "=",
            "range": [
              5,
              8,
            ],
            "right": {
              "end": 8,
              "loc": {
                "end": {
                  "column": 3,
                  "line": 2,
                },
                "start": {
                  "column": 2,
                  "line": 2,
                },
              },
              "range": [
                7,
                8,
              ],
              "start": 7,
              "type": "Literal",
              "value": 1,
            },
            "start": 5,
            "type": "AssignmentExpression",
          },
          {
            "end": 13,
            "left": {
              "end": 11,
              "loc": {
                "end": {
                  "column": 1,
                  "line": 3,
                },
                "start": {
                  "column": 0,
                  "line": 3,
                },
              },
              "name": "b",
              "range": [
                10,
                11,
              ],
              "start": 10,
              "type": "Identifier",
            },
            "loc": {
              "end": {
                "column": 3,
                "line": 3,
              },
              "start": {
                "column": 0,
                "line": 3,
              },
            },
            "operator": "=",
            "range": [
              10,
              13,
            ],
            "right": {
              "end": 13,
              "loc": {
                "end": {
                  "column": 3,
                  "line": 3,
                },
                "start": {
                  "column": 2,
                  "line": 3,
                },
              },
              "range": [
                12,
                13,
              ],
              "start": 12,
              "type": "Literal",
              "value": 2,
            },
            "start": 10,
            "type": "AssignmentExpression",
          },
        ],
        "loc": {
          "end": {
            "column": 3,
            "line": 3,
          },
          "start": {
            "column": 0,
            "line": 2,
          },
        },
        "range": [
          5,
          13,
        ],
        "start": 5,
        "type": "SequenceExpression",
      },
      "loc": {
        "end": {
          "column": 7,
          "line": 3,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        17,
      ],
      "start": 0,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "end": 17,
  "loc": {
    "end": {
      "column": 7,
      "line": 3,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for(()=>{a in b};;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "left": {
                  "name": "a",
                  "type": "Identifier",
                },
                "operator": "in",
                "right": {
                  "name": "b",
                  "type": "Identifier",
                },
                "type": "BinaryExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > for({a=0};;); 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in for-loop
> 1 | for({a=0};;);
    |          ^ Invalid left-hand side in for-loop"
`;

exports[`Statements - For > Statements - For (pass) > for({var index=0; index+=1;} index++<=10; index*2;) {	[].add(""+index);}; 1`] = `
"SyntaxError [1:9-1:14]: Unexpected token
> 1 | for({var index=0; index+=1;} index++<=10; index*2;) {	[].add(""+index);};
    |          ^^^^^ Unexpected token"
`;

exports[`Statements - For > Statements - For (pass) > for(delete((1)?y:x in y) in z)x 1`] = `
"SyntaxError [1:25-1:27]: Invalid left-hand side in for-in
> 1 | for(delete((1)?y:x in y) in z)x
    |                          ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > for(delete(x in y) in z)x 1`] = `
"SyntaxError [1:19-1:21]: Invalid left-hand side in for-in
> 1 | for(delete(x in y) in z)x
    |                    ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > for(index=0; index<10; index+=4; index++; index--) ; 1`] = `
"SyntaxError [1:31-1:32]: Expected ')'
> 1 | for(index=0; index<10; index+=4; index++; index--) ;
    |                                ^ Expected ')'"
`;

exports[`Statements - For > Statements - For (pass) > for(x of 3)break/ 1`] = `
"SyntaxError [1:16-1:17]: Unexpected token: '/'
> 1 | for(x of 3)break/
    |                 ^ Unexpected token: '/'"
`;

exports[`Statements - For > Statements - For (pass) > for(x of 3)continue/ 1`] = `
"SyntaxError [1:19-1:20]: Unexpected token: '/'
> 1 | for(x of 3)continue/
    |                    ^ Unexpected token: '/'"
`;

exports[`Statements - For > Statements - For (pass) > for(x of 3)p/ 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: 'end of source'
> 1 | for(x of 3)p/
    |             ^ Unexpected token: 'end of source'"
`;

exports[`Statements - For > Statements - For (pass) > function *f(){   for (yield of y);   } 1`] = `
"SyntaxError [1:31-1:32]: Expected ';'
> 1 | function *f(){   for (yield of y);   }
    |                                ^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > function *f(){   for (yield x in y in z);   } 1`] = `
"SyntaxError [1:30-1:32]: Invalid left-hand side in for-in
> 1 | function *f(){   for (yield x in y in z);   }
    |                               ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > function *f(){   for (yield x in y of z);   } 1`] = `
"SyntaxError [1:30-1:32]: Invalid left-hand side in for-in
> 1 | function *f(){   for (yield x in y of z);   }
    |                               ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > function *f(){   for (yield x in y;;); 1`] = `
"SyntaxError [1:30-1:32]: Invalid left-hand side in for-in
> 1 | function *f(){   for (yield x in y;;);
    |                               ^^ Invalid left-hand side in for-in"
`;

exports[`Statements - For > Statements - For (pass) > function *f(){   for (yield x of y);   } 1`] = `
"SyntaxError [1:30-1:32]: Invalid left-hand side in for-of
> 1 | function *f(){   for (yield x of y);   }
    |                               ^^ Invalid left-hand side in for-of"
`;

exports[`Statements - For > Statements - For (pass) > function *f(){ for (yield of obj); } 1`] = `
"SyntaxError [1:29-1:32]: Expected ';'
> 1 | function *f(){ for (yield of obj); }
    |                              ^^^ Expected ';'"
`;

exports[`Statements - For > Statements - For (pass) > let = 4;
for ( [let][0]; ; )
  break; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "let",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 4,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
    {
      "body": {
        "label": null,
        "type": "BreakStatement",
      },
      "init": {
        "computed": true,
        "object": {
          "elements": [
            {
              "name": "let",
              "type": "Identifier",
            },
          ],
          "type": "ArrayExpression",
        },
        "optional": false,
        "property": {
          "type": "Literal",
          "value": 0,
        },
        "type": "MemberExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - For > Statements - For (pass) > let {...{a,b}} = foo 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...{a,b}} = foo
    |                ^ The binding declaration is not destructible"
`;
