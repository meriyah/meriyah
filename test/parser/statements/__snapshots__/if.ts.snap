// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Statements - None > Statements - If (fail) > "use strict"; if (true) function f() {  } else function _f() {} 1`] = `
"SyntaxError [1:24-1:32]: In strict mode code, functions can only be declared at top level or inside a block
> 1 | "use strict"; if (true) function f() {  } else function _f() {}
    |                         ^^^^^^^^ In strict mode code, functions can only be declared at top level or inside a block"
`;

exports[`Statements - None > Statements - If (fail) > "use strict"; if (true) function f() {  } else function _f() {} 2`] = `
"SyntaxError [1:24-1:32]: In strict mode code, functions can only be declared at top level or inside a block
> 1 | "use strict"; if (true) function f() {  } else function _f() {}
    |                         ^^^^^^^^ In strict mode code, functions can only be declared at top level or inside a block"
`;

exports[`Statements - None > Statements - If (fail) > if (1) let x = 10; 1`] = `
"SyntaxError [1:11-1:12]: Unexpected token: 'identifier'
> 1 | if (1) let x = 10;
    |            ^ Unexpected token: 'identifier'"
`;

exports[`Statements - None > Statements - If (fail) > if (a) class A {} 1`] = `
"SyntaxError [1:7-1:12]: Class declaration can't appear in single-statement context
> 1 | if (a) class A {}
    |        ^^^^^ Class declaration can't appear in single-statement context"
`;

exports[`Statements - None > Statements - If (fail) > if (a) function(){} 1`] = `
"SyntaxError [1:7-1:15]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (a) function(){}
    |        ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if (false) ; else class C {} 1`] = `
"SyntaxError [1:18-1:23]: Class declaration can't appear in single-statement context
> 1 | if (false) ; else class C {}
    |                   ^^^^^ Class declaration can't appear in single-statement context"
`;

exports[`Statements - None > Statements - If (fail) > if (false) ; else function* g() {  } 1`] = `
"SyntaxError [1:18-1:26]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (false) ; else function* g() {  }
    |                   ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if (false) ; else function* g() {  } 2`] = `
"SyntaxError [1:18-1:26]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (false) ; else function* g() {  }
    |                   ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if (true) class C {} else class D {} 1`] = `
"SyntaxError [1:10-1:15]: Class declaration can't appear in single-statement context
> 1 | if (true) class C {} else class D {}
    |           ^^^^^ Class declaration can't appear in single-statement context"
`;

exports[`Statements - None > Statements - If (fail) > if (true) const x = null; 1`] = `
"SyntaxError [1:10-1:15]: Unexpected token: 'const'
> 1 | if (true) const x = null;
    |           ^^^^^ Unexpected token: 'const'"
`;

exports[`Statements - None > Statements - If (fail) > if (true) function* g() {  } 1`] = `
"SyntaxError [1:10-1:18]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (true) function* g() {  }
    |           ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if (true) function* g() {  } else ; 1`] = `
"SyntaxError [1:10-1:18]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (true) function* g() {  } else ;
    |           ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if (true) function* g() {  } else function* _g() {} 1`] = `
"SyntaxError [1:10-1:18]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (true) function* g() {  } else function* _g() {}
    |           ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if (true) let x; else let y; 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: 'identifier'
> 1 | if (true) let x; else let y;
    |               ^ Unexpected token: 'identifier'"
`;

exports[`Statements - None > Statements - If (fail) > if (x); else foo: bar: function f(){} 1`] = `
"SyntaxError [1:23-1:31]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | if (x); else foo: bar: function f(){}
    |                        ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - None > Statements - If (fail) > if true; 1`] = `
"SyntaxError [1:3-1:7]: Expected '('
> 1 | if true;
    |    ^^^^ Expected '('"
`;

exports[`Statements - None > Statements - If (fail) > if(!("A")) 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: 'end of source'
> 1 | if(!("A"))
    |          ^ Unexpected token: 'end of source'"
`;

exports[`Statements - None > Statements - If (fail) > if(!(1)) 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: 'end of source'
> 1 | if(!(1))
    |        ^ Unexpected token: 'end of source'"
`;

exports[`Statements - None > Statements - If (fail) > if(!(true)) 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: 'end of source'
> 1 | if(!(true))
    |           ^ Unexpected token: 'end of source'"
`;

exports[`Statements - None > Statements - If (fail) > if(); 1`] = `
"SyntaxError [1:3-1:4]: Unexpected token: ')'
> 1 | if();
    |    ^ Unexpected token: ')'"
`;

exports[`Statements - None > Statements - If (fail) > if({1})
{
  ;
}else
{
  ;
} 1`] = `
"SyntaxError [1:5-1:6]: Object literal keys that are strings or numbers must be a method or have a colon
> 1 | if({1})
    |      ^ Object literal keys that are strings or numbers must be a method or have a colon
  2 | {
  3 |   ;
  4 | }else"
`;

exports[`Statements - None > Statements - If (pass) > function f() { if (1) { return () => { while (true) hi(); } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "alternate": null,
            "consequent": {
              "body": [
                {
                  "argument": {
                    "async": false,
                    "body": {
                      "body": [
                        {
                          "body": {
                            "expression": {
                              "arguments": [],
                              "callee": {
                                "name": "hi",
                                "type": "Identifier",
                              },
                              "optional": false,
                              "type": "CallExpression",
                            },
                            "type": "ExpressionStatement",
                          },
                          "test": {
                            "type": "Literal",
                            "value": true,
                          },
                          "type": "WhileStatement",
                        },
                      ],
                      "type": "BlockStatement",
                    },
                    "expression": false,
                    "generator": false,
                    "params": [],
                    "type": "ArrowFunctionExpression",
                  },
                  "type": "ReturnStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "test": {
              "type": "Literal",
              "value": 1,
            },
            "type": "IfStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (1) { eval(42) } 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "type": "Literal",
                  "value": 42,
                },
              ],
              "callee": {
                "name": "eval",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "type": "Literal",
        "value": 1,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (a > 2) {b = c } 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "b",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "c",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": ">",
        "right": {
          "type": "Literal",
          "value": 2,
        },
        "type": "BinaryExpression",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (a) b() 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "arguments": [],
          "callee": {
            "name": "b",
            "type": "Identifier",
          },
          "optional": false,
          "type": "CallExpression",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (a) function a(){} 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "generator": false,
        "id": {
          "name": "a",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionDeclaration",
      },
      "test": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (async === void 0) { async = false; } 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "async",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": false,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "left": {
          "name": "async",
          "type": "Identifier",
        },
        "operator": "===",
        "right": {
          "argument": {
            "type": "Literal",
            "value": 0,
          },
          "operator": "void",
          "prefix": true,
          "type": "UnaryExpression",
        },
        "type": "BinaryExpression",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (await === void 0) { async = false; } 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "async",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": false,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "left": {
          "name": "await",
          "type": "Identifier",
        },
        "operator": "===",
        "right": {
          "argument": {
            "type": "Literal",
            "value": 0,
          },
          "operator": "void",
          "prefix": true,
          "type": "UnaryExpression",
        },
        "type": "BinaryExpression",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (foo) a; if (bar) b; else c; 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
    {
      "alternate": {
        "expression": {
          "name": "c",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "consequent": {
        "expression": {
          "name": "b",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "bar",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (foo) bar; 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (foo) bar; 2`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (foo) bar; else doo; 1`] = `
{
  "body": [
    {
      "alternate": {
        "expression": {
          "name": "doo",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "consequent": {
        "expression": {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (true) if (false) {} else ; else {} 1`] = `
{
  "body": [
    {
      "alternate": {
        "body": [],
        "type": "BlockStatement",
      },
      "consequent": {
        "alternate": {
          "type": "EmptyStatement",
        },
        "consequent": {
          "body": [],
          "type": "BlockStatement",
        },
        "test": {
          "type": "Literal",
          "value": false,
        },
        "type": "IfStatement",
      },
      "test": {
        "type": "Literal",
        "value": true,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (true) try {} finally {} else {} 1`] = `
{
  "body": [
    {
      "alternate": {
        "body": [],
        "type": "BlockStatement",
      },
      "consequent": {
        "block": {
          "body": [],
          "type": "BlockStatement",
        },
        "finalizer": {
          "body": [],
          "type": "BlockStatement",
        },
        "handler": null,
        "type": "TryStatement",
      },
      "test": {
        "type": "Literal",
        "value": true,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if (yield === void 0) { async = false; } 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "async",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": false,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "left": {
          "name": "yield",
          "type": "Identifier",
        },
        "operator": "===",
        "right": {
          "argument": {
            "type": "Literal",
            "value": 0,
          },
          "operator": "void",
          "prefix": true,
          "type": "UnaryExpression",
        },
        "type": "BinaryExpression",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if(1)/  foo/ 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "regex": {
            "flags": "",
            "pattern": "  foo",
          },
          "type": "Literal",
          "value": /  foo/,
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "type": "Literal",
        "value": 1,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if(1)/  foo/ 2`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "regex": {
            "flags": "",
            "pattern": "  foo",
          },
          "type": "Literal",
          "value": /  foo/,
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "type": "Literal",
        "value": 1,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if(a)b 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "name": "b",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if(a)b;else c; 1`] = `
{
  "body": [
    {
      "alternate": {
        "expression": {
          "name": "c",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "consequent": {
        "expression": {
          "name": "b",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - None > Statements - If (pass) > if(foo) a = b; 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "AssignmentExpression",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
