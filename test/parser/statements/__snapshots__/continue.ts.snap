// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Statements - Continue > Declarations - Continue > () =>     continue 1`] = `
"SyntaxError [1:10-1:18]: Unexpected token: 'continue'
> 1 | () =>     continue
    |           ^^^^^^^^ Unexpected token: 'continue'"
`;

exports[`Statements - Continue > Declarations - Continue > () => {    continue    } 1`] = `
"SyntaxError [1:11-1:19]: Illegal continue statement
> 1 | () => {    continue    }
    |            ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > () => {    continue y   } 1`] = `
"SyntaxError [1:11-1:19]: Illegal continue statement
> 1 | () => {    continue y   }
    |            ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > () => {    if (x) continue y   } 1`] = `
"SyntaxError [1:18-1:26]: Illegal continue statement
> 1 | () => {    if (x) continue y   }
    |                   ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > () => {   { continue }   } 1`] = `
"SyntaxError [1:12-1:20]: Illegal continue statement
> 1 | () => {   { continue }   }
    |             ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > { continue } 1`] = `
"SyntaxError [1:2-1:10]: Illegal continue statement
> 1 | { continue }
    |   ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > LABEL1 : do {
x++;
(function(){continue LABEL1;})();
y++;
} while(0); 1`] = `
"SyntaxError [3:12-3:20]: Illegal continue statement
  1 | LABEL1 : do {
  2 | x++;
> 3 | (function(){continue LABEL1;})();
    |             ^^^^^^^^ Illegal continue statement
  4 | y++;
  5 | } while(0);"
`;

exports[`Statements - Continue > Declarations - Continue > ce: while(true) { continue fapper; } 1`] = `
"SyntaxError [1:33-1:34]: Undefined label 'fapper'
> 1 | ce: while(true) { continue fapper; }
    |                                  ^ Undefined label 'fapper'"
`;

exports[`Statements - Continue > Declarations - Continue > continue
continue; 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue
    | ^^^^^^^^ Illegal continue statement
  2 | continue;"
`;

exports[`Statements - Continue > Declarations - Continue > continue 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue
    | ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > continue foo
continue; 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue foo
    | ^^^^^^^^ Illegal continue statement
  2 | continue;"
`;

exports[`Statements - Continue > Declarations - Continue > continue foo 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue foo
    | ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > continue foo;continue; 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue foo;continue;
    | ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > continue y 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue y
    | ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > continue; 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue;
    | ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > continue; continue; 1`] = `
"SyntaxError [1:0-1:8]: Illegal continue statement
> 1 | continue; continue;
    | ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > do     continue y   ; while(true); 1`] = `
"SyntaxError [1:20-1:21]: Undefined label 'y'
> 1 | do     continue y   ; while(true);
    |                     ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > do     if (x) continue y   ; while(true); 1`] = `
"SyntaxError [1:27-1:28]: Undefined label 'y'
> 1 | do     if (x) continue y   ; while(true);
    |                            ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > do     if (x) continue y   ; while(true); 2`] = `
"SyntaxError [1:27-1:28]: Undefined label 'y'
> 1 | do     if (x) continue y   ; while(true);
    |                            ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > do {  test262: {  continue test262; } } while (a) 1`] = `
"SyntaxError [1:34-1:35]: continue statement must be nested within an iteration statement
> 1 | do {  test262: {  continue test262; } } while (a)
    |                                   ^ continue statement must be nested within an iteration statement"
`;

exports[`Statements - Continue > Declarations - Continue > for (;;)    continue y  1`] = `
"SyntaxError [1:22-1:23]: Undefined label 'y'
> 1 | for (;;)    continue y 
    |                       ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    continue    } 1`] = `
"SyntaxError [1:17-1:25]: Illegal continue statement
> 1 | function f(){    continue    }
    |                  ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    continue y   } 1`] = `
"SyntaxError [1:17-1:25]: Illegal continue statement
> 1 | function f(){    continue y   }
    |                  ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    continue y   } 2`] = `
"SyntaxError [1:17-1:25]: Illegal continue statement
> 1 | function f(){    continue y   }
    |                  ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    if (x) continue   } 1`] = `
"SyntaxError [1:24-1:32]: Illegal continue statement
> 1 | function f(){    if (x) continue   }
    |                         ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    if (x) continue   } 2`] = `
"SyntaxError [1:24-1:32]: Illegal continue statement
> 1 | function f(){    if (x) continue   }
    |                         ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    if (x) continue y   } 1`] = `
"SyntaxError [1:24-1:32]: Illegal continue statement
> 1 | function f(){    if (x) continue y   }
    |                         ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){    if (x) continue y   } 2`] = `
"SyntaxError [1:24-1:32]: Illegal continue statement
> 1 | function f(){    if (x) continue y   }
    |                         ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){   { continue }   } 1`] = `
"SyntaxError [1:18-1:26]: Illegal continue statement
> 1 | function f(){   { continue }   }
    |                   ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){ do        if (x) continue y   ; while(true);} 1`] = `
"SyntaxError [1:44-1:45]: Undefined label 'y'
> 1 | function f(){ do        if (x) continue y   ; while(true);}
    |                                             ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){ do        if (x) continue y   ; while(true);} 2`] = `
"SyntaxError [1:44-1:45]: Undefined label 'y'
> 1 | function f(){ do        if (x) continue y   ; while(true);}
    |                                             ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){ for (;;)       if (x) continue y   } 1`] = `
"SyntaxError [1:49-1:50]: Undefined label 'y'
> 1 | function f(){ for (;;)       if (x) continue y   }
    |                                                  ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){ for (;;)       if (x) continue y   }} 1`] = `
"SyntaxError [1:49-1:50]: Undefined label 'y'
> 1 | function f(){ for (;;)       if (x) continue y   }}
    |                                                  ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){ while (true)       if (x) continue y   } 1`] = `
"SyntaxError [1:53-1:54]: Undefined label 'y'
> 1 | function f(){ while (true)       if (x) continue y   }
    |                                                      ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > function f(){ while (true)       if (x) continue y   }} 1`] = `
"SyntaxError [1:53-1:54]: Undefined label 'y'
> 1 | function f(){ while (true)       if (x) continue y   }}
    |                                                      ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > if (x) continue y 1`] = `
"SyntaxError [1:7-1:15]: Illegal continue statement
> 1 | if (x) continue y
    |        ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > if (x) continue; 1`] = `
"SyntaxError [1:7-1:15]: Illegal continue statement
> 1 | if (x) continue;
    |        ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > loop1: while (true) { loop1: function a() { continue loop1; } } 1`] = `
"SyntaxError [1:27-1:28]: Label 'loop1' has already been declared
> 1 | loop1: while (true) { loop1: function a() { continue loop1; } }
    |                            ^ Label 'loop1' has already been declared"
`;

exports[`Statements - Continue > Declarations - Continue > loop1: while (true) { loop2: function a() { continue loop1; } } 1`] = `
"SyntaxError [1:29-1:37]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | loop1: while (true) { loop2: function a() { continue loop1; } }
    |                              ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - Continue > Declarations - Continue > oop1: while (true) { loop2: function a() { continue loop2; } } 1`] = `
"SyntaxError [1:28-1:36]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | oop1: while (true) { loop2: function a() { continue loop2; } }
    |                             ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - Continue > Declarations - Continue > oop1: while (true) { loop2: function a() { continue loop2; } } 2`] = `
"SyntaxError [1:28-1:36]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | oop1: while (true) { loop2: function a() { continue loop2; } }
    |                             ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - Continue > Declarations - Continue > oop1: while (true) { loop2: function a() { continue loop2; } } 3`] = `
"SyntaxError [1:28-1:36]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | oop1: while (true) { loop2: function a() { continue loop2; } }
    |                             ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - Continue > Declarations - Continue > oop1: while (true) { loop2: function a() { continue loop2; } } 4`] = `
"SyntaxError [1:28-1:36]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | oop1: while (true) { loop2: function a() { continue loop2; } }
    |                             ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x) { case x: continue foo; } 1`] = `
"SyntaxError [1:21-1:29]: Illegal continue statement
> 1 | switch (x) { case x: continue foo; }
    |                      ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x) { case x: if (foo) {continue foo;} } 1`] = `
"SyntaxError [1:31-1:39]: Illegal continue statement
> 1 | switch (x) { case x: if (foo) {continue foo;} }
    |                                ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x) { default: continue foo; } 1`] = `
"SyntaxError [1:22-1:30]: Illegal continue statement
> 1 | switch (x) { default: continue foo; }
    |                       ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x){ case z:    { continue }  } 1`] = `
"SyntaxError [1:25-1:33]: Illegal continue statement
> 1 | switch (x){ case z:    { continue }  }
    |                          ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x){ case z:    continue   } 1`] = `
"SyntaxError [1:23-1:31]: Illegal continue statement
> 1 | switch (x){ case z:    continue   }
    |                        ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x){ case z:    continue y   } 1`] = `
"SyntaxError [1:23-1:31]: Illegal continue statement
> 1 | switch (x){ case z:    continue y   }
    |                        ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x){ case z:    if (x) continue   } 1`] = `
"SyntaxError [1:30-1:38]: Illegal continue statement
> 1 | switch (x){ case z:    if (x) continue   }
    |                               ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > switch (x){ case z:    if (x) continue y   } 1`] = `
"SyntaxError [1:30-1:38]: Illegal continue statement
> 1 | switch (x){ case z:    if (x) continue y   }
    |                               ^^^^^^^^ Illegal continue statement"
`;

exports[`Statements - Continue > Declarations - Continue > try{
LABEL1 : do {
  x++;
  throw "gonna leave it";
  y++;
} while(0);
$ERROR('#1: throw "gonna leave it" lead to throwing exception');
} catch(e){
continue LABEL2;
LABEL2 : do {
  x++;
  y++;
} while(0);
}; 1`] = `
"SyntaxError [9:0-9:8]: Illegal continue statement
   7 | $ERROR('#1: throw "gonna leave it" lead to throwing exception');
   8 | } catch(e){
>  9 | continue LABEL2;
     | ^^^^^^^^ Illegal continue statement
  10 | LABEL2 : do {
  11 |   x++;
  12 |   y++;"
`;

exports[`Statements - Continue > Declarations - Continue > try{
LABEL1 : do {
  x++;
  throw "gonna leave it";
  y++;
} while(0);
$ERROR('#1: throw "gonna leave it" lead to throwing exception');
} catch(e){
continue;
LABEL2 : do {
  x++;
  y++;
} while(0);
}; 1`] = `
"SyntaxError [9:0-9:8]: Illegal continue statement
   7 | $ERROR('#1: throw "gonna leave it" lead to throwing exception');
   8 | } catch(e){
>  9 | continue;
     | ^^^^^^^^ Illegal continue statement
  10 | LABEL2 : do {
  11 |   x++;
  12 |   y++;"
`;

exports[`Statements - Continue > Declarations - Continue > while (true)    if (x) continue y   } 1`] = `
"SyntaxError [1:36-1:37]: Undefined label 'y'
> 1 | while (true)    if (x) continue y   }
    |                                     ^ Undefined label 'y'"
`;

exports[`Statements - Continue > Declarations - Continue > while (true) continue x; 1`] = `
"SyntaxError [1:23-1:24]: Undefined label 'x'
> 1 | while (true) continue x;
    |                        ^ Undefined label 'x'"
`;

exports[`Statements - Continue > Statements - Continue > () => { do        if (x) continue   ; while(true);} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "body": {
                "alternate": null,
                "consequent": {
                  "label": null,
                  "type": "ContinueStatement",
                },
                "test": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "IfStatement",
              },
              "test": {
                "type": "Literal",
                "value": true,
              },
              "type": "DoWhileStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > __proto__: while (true) { continue __proto__; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "label": {
                "name": "__proto__",
                "type": "Identifier",
              },
              "type": "ContinueStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "test": {
          "type": "Literal",
          "value": true,
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "__proto__",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > a: do continue a; while(1); 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "label": {
            "name": "a",
            "type": "Identifier",
          },
          "type": "ContinueStatement",
        },
        "test": {
          "type": "Literal",
          "value": 1,
        },
        "type": "DoWhileStatement",
      },
      "label": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > a: while (0) { continue /*
*/ b; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "label": null,
              "type": "ContinueStatement",
            },
            {
              "expression": {
                "name": "b",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "test": {
          "type": "Literal",
          "value": 0,
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > a: while (0) { continue /* */ b; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "label": null,
              "type": "ContinueStatement",
            },
            {
              "expression": {
                "name": "b",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "test": {
          "type": "Literal",
          "value": 0,
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > a: while (0) { continue ␍␊ b; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "label": null,
              "type": "ContinueStatement",
            },
            {
              "expression": {
                "name": "b",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "test": {
          "type": "Literal",
          "value": 0,
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > do continue; while(foo); 1`] = `
{
  "body": [
    {
      "body": {
        "label": null,
        "type": "ContinueStatement",
      },
      "test": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "DoWhileStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > foo: do continue foo; while(foo); 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "label": {
            "name": "foo",
            "type": "Identifier",
          },
          "type": "ContinueStatement",
        },
        "test": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "DoWhileStatement",
      },
      "label": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > foo: while (true) { if (x) continue foo; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "alternate": null,
              "consequent": {
                "label": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "type": "ContinueStatement",
              },
              "test": {
                "name": "x",
                "type": "Identifier",
              },
              "type": "IfStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "test": {
          "type": "Literal",
          "value": true,
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > foo: while(true)continue foo; 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "label": {
            "name": "foo",
            "type": "Identifier",
          },
          "type": "ContinueStatement",
        },
        "test": {
          "type": "Literal",
          "value": true,
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > for (;;)  {  continue   } 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "label": null,
            "type": "ContinueStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > for (;;)  { if (x) continue   } 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "alternate": null,
            "consequent": {
              "label": null,
              "type": "ContinueStatement",
            },
            "test": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "IfStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "init": null,
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > function f(){ for (;;)  {     continue    }} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "label": null,
                  "type": "ContinueStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "init": null,
            "test": null,
            "type": "ForStatement",
            "update": null,
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > while (true) {  continue   } 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "label": null,
            "type": "ContinueStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "type": "Literal",
        "value": true,
      },
      "type": "WhileStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Continue > Statements - Continue > while (x) continue 1`] = `
{
  "body": [
    {
      "body": {
        "label": null,
        "type": "ContinueStatement",
      },
      "test": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "WhileStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
