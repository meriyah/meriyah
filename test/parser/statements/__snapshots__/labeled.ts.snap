// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Statements - Labeled > Statements - Labeled (pass) > __proto__: test 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "test",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "__proto__",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > __proto__: while (true) { break __proto__; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "end": 42,
              "label": {
                "end": 41,
                "name": "__proto__",
                "range": [
                  32,
                  41,
                ],
                "start": 32,
                "type": "Identifier",
              },
              "range": [
                26,
                42,
              ],
              "start": 26,
              "type": "BreakStatement",
            },
          ],
          "end": 44,
          "range": [
            24,
            44,
          ],
          "start": 24,
          "type": "BlockStatement",
        },
        "end": 44,
        "range": [
          11,
          44,
        ],
        "start": 11,
        "test": {
          "end": 22,
          "range": [
            18,
            22,
          ],
          "start": 18,
          "type": "Literal",
          "value": true,
        },
        "type": "WhileStatement",
      },
      "end": 44,
      "label": {
        "end": 9,
        "name": "__proto__",
        "range": [
          0,
          9,
        ],
        "start": 0,
        "type": "Identifier",
      },
      "range": [
        0,
        44,
      ],
      "start": 0,
      "type": "LabeledStatement",
    },
  ],
  "end": 44,
  "range": [
    0,
    44,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > L: let
x 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "let",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "L",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
    {
      "expression": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > a:{break a;} 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "end": 11,
            "label": {
              "end": 10,
              "name": "a",
              "range": [
                9,
                10,
              ],
              "start": 9,
              "type": "Identifier",
            },
            "range": [
              3,
              11,
            ],
            "start": 3,
            "type": "BreakStatement",
          },
        ],
        "end": 12,
        "range": [
          2,
          12,
        ],
        "start": 2,
        "type": "BlockStatement",
      },
      "end": 12,
      "label": {
        "end": 1,
        "name": "a",
        "range": [
          0,
          1,
        ],
        "start": 0,
        "type": "Identifier",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "LabeledStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > a:{break a;} 2`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "label": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "BreakStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "label": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > a:package 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "package",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > async: await 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "await",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "async",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > async: while (async) { continue async; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "label": {
                "name": "async",
                "type": "Identifier",
              },
              "type": "ContinueStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "test": {
          "name": "async",
          "type": "Identifier",
        },
        "type": "WhileStatement",
      },
      "label": {
        "name": "async",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > await: while (await) { continue await; } 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": [
            {
              "end": 38,
              "label": {
                "end": 37,
                "name": "await",
                "range": [
                  32,
                  37,
                ],
                "start": 32,
                "type": "Identifier",
              },
              "range": [
                23,
                38,
              ],
              "start": 23,
              "type": "ContinueStatement",
            },
          ],
          "end": 40,
          "range": [
            21,
            40,
          ],
          "start": 21,
          "type": "BlockStatement",
        },
        "end": 40,
        "range": [
          7,
          40,
        ],
        "start": 7,
        "test": {
          "end": 19,
          "name": "await",
          "range": [
            14,
            19,
          ],
          "start": 14,
          "type": "Identifier",
        },
        "type": "WhileStatement",
      },
      "end": 40,
      "label": {
        "end": 5,
        "name": "await",
        "range": [
          0,
          5,
        ],
        "start": 0,
        "type": "Identifier",
      },
      "range": [
        0,
        40,
      ],
      "start": 0,
      "type": "LabeledStatement",
    },
  ],
  "end": 40,
  "range": [
    0,
    40,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > foo: bar: function f(){} 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "generator": false,
          "id": {
            "name": "f",
            "type": "Identifier",
          },
          "params": [],
          "type": "FunctionDeclaration",
        },
        "label": {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "LabeledStatement",
      },
      "label": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > foo: bar: third: function f(){} 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "body": {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
          "label": {
            "name": "third",
            "type": "Identifier",
          },
          "type": "LabeledStatement",
        },
        "label": {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "LabeledStatement",
      },
      "label": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > foo: function bar() {} 1`] = `
{
  "body": [
    {
      "body": {
        "async": false,
        "body": {
          "body": [],
          "end": 22,
          "range": [
            20,
            22,
          ],
          "start": 20,
          "type": "BlockStatement",
        },
        "end": 22,
        "generator": false,
        "id": {
          "end": 17,
          "name": "bar",
          "range": [
            14,
            17,
          ],
          "start": 14,
          "type": "Identifier",
        },
        "params": [],
        "range": [
          5,
          22,
        ],
        "start": 5,
        "type": "FunctionDeclaration",
      },
      "end": 22,
      "label": {
        "end": 3,
        "name": "foo",
        "range": [
          0,
          3,
        ],
        "start": 0,
        "type": "Identifier",
      },
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "LabeledStatement",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > function *f(){ await: x; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "end": 24,
              "expression": {
                "end": 23,
                "name": "x",
                "range": [
                  22,
                  23,
                ],
                "start": 22,
                "type": "Identifier",
              },
              "range": [
                22,
                24,
              ],
              "start": 22,
              "type": "ExpressionStatement",
            },
            "end": 24,
            "label": {
              "end": 20,
              "name": "await",
              "range": [
                15,
                20,
              ],
              "start": 15,
              "type": "Identifier",
            },
            "range": [
              15,
              24,
            ],
            "start": 15,
            "type": "LabeledStatement",
          },
        ],
        "end": 26,
        "range": [
          13,
          26,
        ],
        "start": 13,
        "type": "BlockStatement",
      },
      "end": 26,
      "generator": true,
      "id": {
        "end": 11,
        "name": "f",
        "range": [
          10,
          11,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > if (false) {
 L: let
x = 1; 
 } 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "body": {
              "expression": {
                "name": "let",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
            "label": {
              "name": "L",
              "type": "Identifier",
            },
            "type": "LabeledStatement",
          },
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 1,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "type": "Literal",
        "value": false,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > let, let, let, let 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "end": 18,
        "expressions": [
          {
            "end": 3,
            "name": "let",
            "range": [
              0,
              3,
            ],
            "start": 0,
            "type": "Identifier",
          },
          {
            "end": 8,
            "name": "let",
            "range": [
              5,
              8,
            ],
            "start": 5,
            "type": "Identifier",
          },
          {
            "end": 13,
            "name": "let",
            "range": [
              10,
              13,
            ],
            "start": 10,
            "type": "Identifier",
          },
          {
            "end": 18,
            "name": "let",
            "range": [
              15,
              18,
            ],
            "start": 15,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          18,
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > let: foo 1`] = `
{
  "body": [
    {
      "body": {
        "end": 8,
        "expression": {
          "end": 8,
          "name": "foo",
          "range": [
            5,
            8,
          ],
          "start": 5,
          "type": "Identifier",
        },
        "range": [
          5,
          8,
        ],
        "start": 5,
        "type": "ExpressionStatement",
      },
      "end": 8,
      "label": {
        "end": 3,
        "name": "let",
        "range": [
          0,
          3,
        ],
        "start": 0,
        "type": "Identifier",
      },
      "range": [
        0,
        8,
      ],
      "start": 0,
      "type": "LabeledStatement",
    },
  ],
  "end": 8,
  "range": [
    0,
    8,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > start: while (true) break start 1`] = `
{
  "body": [
    {
      "body": {
        "body": {
          "end": 31,
          "label": {
            "end": 31,
            "name": "start",
            "range": [
              26,
              31,
            ],
            "start": 26,
            "type": "Identifier",
          },
          "range": [
            20,
            31,
          ],
          "start": 20,
          "type": "BreakStatement",
        },
        "end": 31,
        "range": [
          7,
          31,
        ],
        "start": 7,
        "test": {
          "end": 18,
          "range": [
            14,
            18,
          ],
          "start": 14,
          "type": "Literal",
          "value": true,
        },
        "type": "WhileStatement",
      },
      "end": 31,
      "label": {
        "end": 5,
        "name": "start",
        "range": [
          0,
          5,
        ],
        "start": 0,
        "type": "Identifier",
      },
      "range": [
        0,
        31,
      ],
      "start": 0,
      "type": "LabeledStatement",
    },
  ],
  "end": 31,
  "range": [
    0,
    31,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Statements - Labeled > Statements - Labeled (pass) > yield: await 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "await",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "yield",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
