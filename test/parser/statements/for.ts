import * as t from 'node:assert/strict';
import { outdent } from 'outdent';
import { describe, it } from 'vitest';
import { parseSource } from '../../../src/parser';
import { fail, pass } from '../../test-utils';

describe('Statements - For', () => {
  for (const arg of [
    'for (a,b;;);',
    'for (const [,foo] = arr;;);',
    'for (let [[x] = [1]] = []; i < 1; i++) {}',
    'for (var {j}=x; j<10; ++j) { const foo = j }',
    outdent`
      for ("boolean" == typeof a && (l = a, a = arguments[s] ||
              {}, s++), "object" == typeof a ||
              g(a) || (a = {}), s === u && (a = this, s--); s < u; s++)
      if (null != (e = arguments[s]))
          for (t in e) n = a[t], a !== (r = e[t]) && (l && r && (w.isPlainObject(r) ||
          (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n)
          ? n : [])
          : o = n && w.isPlainObject(n)
          ? n : {}, a[t] = w.extend(l, o, r))
          : void 0 !== r && (a[t] = r));
    `,
    'for (let m in ((yield))) foo; (r = a) => {}',
    'for(x, y;;);',
    'for (const { x, } = { x: 23 }; a < 1; ) {}; for (const { x, } = { x: 23 }; a < 1; ) {};',
    outdent`
      for (let [a]=x;;);
      for (let [a]=x;;);
    `,
    'for (let { x, } = { x: 23 }; a < 1; ) {}; for (let { x, } = { x: 23 }; a < 1; ) {};',
    'for ([] in (class {})) for (;;) continue',
    'for (var o in ((false)) ^ 2.7262799875259632e293) do ; while ((((eval))))',
    'for(x = 0;;);',
    'for(x; x < 0;);',
    'for(x; x < 0; x++);',
    'for ({x = y} = (z);;) {}',
    'for(var x = 0;;);',
    'for(let x = 0;;);',
    'for(delete(x in y);;)x',
    'for(var a = 0;;) { let a; }',
    'for (var { w: { x, y, z } = { x: 4, y: 5, z: 6 } } = { w: undefined }; a < 1; ) {}',
    'for (var [[] = function() { a += 1; }()] = [[23]]; b < 1; ) {}',
    "for (let { w = a(), x = b(), y = c(), z = d() } = { w: null, x: 0, y: false, z: '' }; e < 1; ) {}",
    'for (let [,] = a(); b < 1; ) {}',
    outdent`
      for (const [ x, ] = y; a < 1; ) {};
      for (const [ x, ] =  z; a < 1; ) {};
    `,
    outdent`
      for (let i = 0; i < 10; ++i) {
          console.log(i);
      }
      for (let i = 0; i < 10; ++i) {
          console.log(i);
      }
    `,
    'for (x(x in t);;) x',
    'for (((x)=>{}).x of y);',
    'for (const {} = obj; a < 1; ) {}',
    'for (j=x; j<10; ++j) { [foo] = [j] }',
    'for (j=x; j<10; ++j) { let foo = j }',
    'for (j=x; j<10; ++j) { function foo() {return j} }',
    'for ({j}=x; j<10; ++j) { var [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { let foo = j }',
    'for ({j}=x; j<10; ++j) { const [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { function foo() {return j} }',
    'for (var j=x; j<10; ++j) { foo = j }',
    'for (var {j}=x; j<10; ++j) { var [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { function foo(){return j} }',
    'for (let j=x; j<10; ++j) { const foo = j }',
    'for (let j=x; j<10; ++j) { let [foo] = [j] }',
    'for (j=x; j<10; ++j) { foo = j }',
    'for (const {x,} of obj);',
    'for (const [a=[...b], ...c] of obj);',
    'for (const [x, ...[foo, bar]] of obj);',
    'for (const [...[foo, bar]] of obj);',
    'for (const [foo, ...bar] of obj);',
    'for (const [...foo] of obj);',
    'for (const {[x]: y = z} in obj);',
    'for (const [foo,bar] of arr);',
    'for (const [,,foo] of arr);',
    'for (const [,foo] of arr);',
    'for (const [foo,,] of arr);',
    'for (const [foo] of arr);',
    'for (const {x = y, z = a} = obj;;);',
    'for (const {x, y = z} = obj;;);',
    'for (const {x = y, z} = obj;;);',
    'for (const {x} = a, {y} = obj;;);',
    'for (const {x, y} = obj;;);',
    'for (const {} of obj);',
    'for (const [,,] of x);',
    'for (const [foo=a, bar=b] of arr);',
    'for (const [foo, bar=b] of arr);',
    'for (const [foo=a, bar] of arr);',
    'for (const [foo=a] of arr);',
    'for (const [foo,,bar] of arr);',
    'for (C = class { get ["x" in empty]() { return "via get"; } }; ; ) { break; }',
    'for (;;);',
    'for (a+b;;) c;',
    'for (var x of y);',
    'for (var x;;);',
    'for (;;);',
    'for (x in y);',
    'for (x of y);',
    'for (var x of y);',
    'for (var x;;);',
    'for (let x of y);',
    'for (let x;;);',
    'for (let x of y);',
    'for ([] + x;;);',
    'for (let x of y);',
    'for (let [x] in y);',
    'for (let {x} of y);',
    'for (let x of y);',
    'for (let {x} = x;;);',
    'for (let [x] = x;;);',
    'for (let x;;);',
    'for (let {x} of y);',
    'for (let [x] in y);',
    'for (let in x);',
    'for (let in x) {}',
    'for (let x of y);',
    'for (let[x] in y);',
    'for (let[x] of y);',
    'for (let , x;;);',
    'for (let + x;;);',
    'for (let.x;;);',
    'for (let.foo in x);',
    'for (let();;);',
    'for (let().foo in x);',
    'for (let=10;;);',
    'for (let.foo;;);',
    'for (let;;);',
    'for (const x of y);',
    'for (let.x in y);',
    'for (const [,] of x);',
    'for (const {a, [x]: y} in obj);',
    'for (const {[x]: y} in obj);',
    'for (const {x : y, z, a : b = c} in obj);',
    'for (const {x} of obj);',
    'for (const [foo,] in arr);',
    'for (const [] in x);',
    'for (const {a, [x]: y} = a;;);',
    'for (const {[x]: y = z} = a;;);',
    'for (const {[x]: y} = z;;);',
    'for (const {x : y, z, a : b = c} = obj;;);',
    'for (const {x : y = z} = obj;;);',
    'for (const {x, y : z} = obj;;);',
    'for (const {x : y, z} = obj;;);',
    'for (const {x : y} = obj;;);',
    'for (const {x : y = z} in obj);',
    'for (const {x : y, z : a} in obj);',
    'for (const {x, y : z} in obj);',
    'for (const {x : y, z} in obj);',
    'for (const {x : y} in obj);',
    'for (const {x = y, z = a} in obj);',
    'for (const {x, y = z} in obj);',
    'for (const {x = y, z} in obj);',
    'for (const {x = y} in obj);',
    'for (const [a=[...b], ...c] in obj);',
    'for (const [...[foo, bar]] in obj);',
    'for (const [foo, ...bar] in obj);',
    'for (const [...foo] in obj);',
    'for (const [foo=a, bar=b] in arr);',
    'for (const [foo, bar=b] in arr);',
    'for (const [foo=a, bar] in arr);',
    'for (const [foo=a] in arr);',
    'for (const [foo,,bar] in arr);',
    'for (const [,,foo] in arr);',
    'for (const [,foo] in arr);',
    'for (const [foo,,] in arr);',
    'for (const {x,} in obj);',
    'for (const {x, y} in obj);',
    'for (const {} in obj);',
    'for (const {x,} = obj;;);',
    'for (const {x} = obj;;);',
    'for (const [foo, ...bar] = obj;;);',
    'for (const [foo=a, bar=b] = arr;;);',
    'for (const [foo=a, bar] = arr;;);',
    'for (const [foo=a] = arr;;);',
    'for (const foo = arr, [bar] = arr2;;);',
    'for (const [foo] = arr, bar = arr2;;);',
    'for (const [foo,bar] = arr;;);',
    'for (j=x; j<10; ++j) { [foo] = [j] }',
    'for (j=x; j<10; ++j) { [[foo]=[42]] = [] }',
    'for (j=x; j<10; ++j) { var foo = j }',
    'for (j=x; j<10; ++j) { var [foo] = [j] }',
    'for (j=x; j<10; ++j) { var [[foo]=[42]] = [] }',
    'for (j=x; j<10; ++j) { var foo; foo = j }',
    'for (j=x; j<10; ++j) { var foo; [foo] = [j] }',
    'for (j=x; j<10; ++j) { var foo; [[foo]=[42]] = [] }',
    'for (j=x; j<10; ++j) { let foo; foo = j }',
    'for (j=x; j<10; ++j) { let foo; [foo] = [j] }',
    'for (j=x; j<10; ++j) { let foo; [[foo]=[42]] = [] }',
    'for (j=x; j<10; ++j) { let foo = j }',
    'for (j=x; j<10; ++j) { let [foo] = [j] }',
    'for (j=x; j<10; ++j) { const foo = j }',
    'for (j=x; j<10; ++j) { const [foo] = [j] }',
    'for (j=x; j<10; ++j) { function foo() {return j} }',
    'for ([...x] in {ab: 1}) {}',
    'for (j=x; j<10; ++j) { foo = j }',
    'for (j=x; j<10; ++j) { [foo] = [j] }',
    'for (j=x; j<10; ++j) { let foo = j }',
    'for (j=x; j<10; ++j) { function foo() {return j} }',
    'for ({j}=x; j<10; ++j) { var [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { const [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { function foo() {return j} }',
    'for (var j=x; j<10; ++j) { foo = j }',
    'for (var {j}=x; j<10; ++j) { var [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { function foo(){return j} }',
    'for (let j=x; j<10; ++j) { const foo = j }',
    'for (let j=x; j<10; ++j) { let [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { foo = j }',
    'for ({j}=x; j<10; ++j) { [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { [[foo]=[42]] = [] }',
    'for ({j}=x; j<10; ++j) { var foo = j }',
    'for ({j}=x; j<10; ++j) { var [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { var [[foo]=[42]] = [] }',
    'for ({j}=x; j<10; ++j) { var foo; foo = j }',
    'for ({j}=x; j<10; ++j) { var foo; [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { var foo; [[foo]=[42]] = [] }',
    'for ({j}=x; j<10; ++j) { let foo; foo = j }',
    'for ({j}=x; j<10; ++j) { let foo; [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { let foo; [[foo]=[42]] = [] }',
    'for ({j}=x; j<10; ++j) { let foo = j }',
    'for ({j}=x; j<10; ++j) { let [foo] = [j] }',
    'for ({j}=x; j<10; ++j) { const foo = j }',
    'for ({j}=x; j<10; ++j) { const [foo] = [j] }',
    'for (var j=x; j<10; ++j) { foo = j }',
    'for (var j=x; j<10; ++j) { [foo] = [j] }',
    'for (var j=x; j<10; ++j) { [[foo]=[42]] = [] }',
    'for (var j=x; j<10; ++j) { var foo = j }',
    'for (var j=x; j<10; ++j) { var [foo] = [j] }',
    'for (var j=x; j<10; ++j) { var [[foo]=[42]] = [] }',
    'for (var j=x; j<10; ++j) { var foo; foo = j }',
    'for (var j=x; j<10; ++j) { var foo; [foo] = [j] }',
    'for (var j=x; j<10; ++j) { var foo; [[foo]=[42]] = [] }',
    'for (var j=x; j<10; ++j) { let foo; foo = j }',
    'for (var j=x; j<10; ++j) { let foo; [foo] = [j] }',
    'for (var j=x; j<10; ++j) { let foo; [[foo]=[42]] = [] }',
    'for (var j=x; j<10; ++j) { let foo = j }',
    'for (var j=x; j<10; ++j) { let [foo] = [j] }',
    'for (var j=x; j<10; ++j) { const foo = j }',
    'for (var j=x; j<10; ++j) { const [foo] = [j] }',
    'for (var j=x; j<10; ++j) { function foo() {return j} }',
    'for (var {j}=x; j<10; ++j) { foo = j }',
    'for (var {j}=x; j<10; ++j) { [foo] = [j] }',
    'for (var {j}=x; j<10; ++j) { [[foo]=[42]] = [] }',
    'for (var {j}=x; j<10; ++j) { var foo = j }',
    'for (var {j}=x; j<10; ++j) { var [foo] = [j] }',
    'for (var {j}=x; j<10; ++j) { var [[foo]=[42]] = [] }',
    'for (var {j}=x; j<10; ++j) { var foo; foo = j }',
    'for (var {j}=x; j<10; ++j) { var foo; [foo] = [j] }',
    'for (var {j}=x; j<10; ++j) { var foo; [[foo]=[42]] = [] }',
    'for (var {j}=x; j<10; ++j) { let foo; foo = j }',
    'for (var {j}=x; j<10; ++j) { let foo; [foo] = [j] }',
    'for (var {j}=x; j<10; ++j) { let foo; [[foo]=[42]] = [] }',
    'for (var {j}=x; j<10; ++j) { let foo = j }',
    'for (var {j}=x; j<10; ++j) { let [foo] = [j] }',
    'for (var {j}=x; j<10; ++j) { const foo = j }',
    'for (var {j}=x; j<10; ++j) { const [foo] = [j] }',
    'for (var {j}=x; j<10; ++j) { function foo() {return j} }',
    'for (let j=x; j<10; ++j) { foo = j }',
    'for (let j=x; j<10; ++j) { [foo] = [j] }',
    'for (let j=x; j<10; ++j) { [[foo]=[42]] = [] }',
    'for (let j=x; j<10; ++j) { var foo = j }',
    'for (let j=x; j<10; ++j) { var [foo] = [j] }',
    'for (let j=x; j<10; ++j) { var [[foo]=[42]] = [] }',
    'for (let j=x; j<10; ++j) { var foo; foo = j }',
    'for (let j=x; j<10; ++j) { var foo; [foo] = [j] }',
    'for (let j=x; j<10; ++j) { var foo; [[foo]=[42]] = [] }',
    'for (let j=x; j<10; ++j) { let foo; foo = j }',
    'for (let j=x; j<10; ++j) { let foo; [foo] = [j] }',
    'for (let j=x; j<10; ++j) { let foo; [[foo]=[42]] = [] }',
    'for (let j=x; j<10; ++j) { let foo = j }',
    'for (let j=x; j<10; ++j) { let [foo] = [j] }',
    'for (let j=x; j<10; ++j) { const foo = j }',
    'for (let j=x; j<10; ++j) { const [foo] = [j] }',
    'for (let j=x; j<10; ++j) { function foo() {return j} }',
    'for (let {j}=x; j<10; ++j) { foo = j }',
    'for (let {j}=x; j<10; ++j) { [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { [[foo]=[42]] = [] }',
    'for (let {j}=x; j<10; ++j) { var foo = j }',
    'for (let {j}=x; j<10; ++j) { var [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { var [[foo]=[42]] = [] }',
    'for (let {j}=x; j<10; ++j) { var foo; foo = j }',
    'for (let {j}=x; j<10; ++j) { var foo; [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { var foo; [[foo]=[42]] = [] }',
    'for (let {j}=x; j<10; ++j) { let foo; foo = j }',
    'for (let {j}=x; j<10; ++j) { let foo; [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { let foo; [[foo]=[42]] = [] }',
    'for (let {j}=x; j<10; ++j) { let foo = j }',
    'for (let {j}=x; j<10; ++j) { let [foo] = [j] }',
    'for (let {j}=x; j<10; ++j) { const foo = j }',
    'for (let {j}=x; j<10; ++j) { const [foo] = [j] }',
    'for ({a: b.c}[x] of d) e',
    'for ([a.b][foo] of c) d',
    'for (let {j}=x; j<10; ++j) { function foo(){return j} }',
    'for ({}.bar ;;);',
    'for ({}.bar = x ;;);',
    'for ({a: b.c}.foo in d) e',
    'for ({}.bar in obj);',
    'for ({a: b.c}.foo of d) e',
    'while (j) { foo = j }',
    'while (j) { [foo] = [j] }',
    'while (j) { [[foo]=[42]] = [] }',
    'while (j) { var foo = j }',
    'while (j) { var [foo] = [j] }',
    'while (j) { var [[foo]=[42]] = [] }',
    'while (j) { var foo; foo = j }',
    'while (j) { var foo; [foo] = [j] }',
    'while (j) { var foo; [[foo]=[42]] = [] }',
    'while (j) { let foo; foo = j }',
    'while (j) { let foo; [foo] = [j] }',
    'while (j) { let foo; [[foo]=[42]] = [] }',
    'while (j) { let foo = j }',
    'while (j) { let [foo] = [j] }',
    'while (j) { const foo = j }',
    'while (j) { const [foo] = [j] }',
    'while (j) { function foo() {return j} }',
    'do { foo = j } while (j)',
    'do { [foo] = [j] } while (j)',
    'do { [[foo]=[42]] = [] } while (j)',
    'do { var foo = j } while (j)',
    'do { var [foo] = [j] } while (j)',
    'do { var [[foo]=[42]] = [] } while (j)',
    'do { var foo; foo = j } while (j)',
    'do { var foo; [foo] = [j] } while (j)',
    'do { var foo; [[foo]=[42]] = [] } while (j)',
    'do { let foo; foo = j } while (j)',
    'do { let foo; [foo] = [j] } while (j)',
    'do { let foo; [[foo]=[42]] = [] } while (j)',
    'do { let foo = j } while (j)',
    'do { let [foo] = [j] } while (j)',
    'do { const foo = j } while (j)',
    'do { const [foo] = [j] } while (j)',
    'do { function foo() {return j} } while (j)',
    'for (const [[...x] = [2, 1, 3]] = []; a < 1; ) {}',
    'for (const [cover = (function () {}), xCover = (0, function() {})] = []; a < 1; ) {}',
    'for (const [x = 23] = [undefined]; a < 1; ) {}',
    'for (const [{ x, y, z } = { x: 44, y: 55, z: 66 }] = [{ x: 11, y: 22, z: 33 }]; a < 1; ) {}',
    'for (const [...[,]] = g(); a < 1; ) {}',
    outdent`
      var __str, index, index_n;
      __str="";
      outer : for(index=0; index<4; index+=1) {
          nested : for(index_n=0; index_n<=index; index_n++) {
        if (index*index_n >= 4)break nested;
        __str+=""+index+index_n;
          }
      }
    `,
    outdent`
      __str="";
      outer : for(index=0; index<4; index+=1) {
          nested : for(index_n=0; index_n<=index; index_n++) {
        if (index*index_n >= 4)break outer;
        __str+=""+index+index_n;
          }
      }
    `,
    outdent`
      __str="";
      outer : for(index=0; index<4; index+=1) {
          nested : for(index_n=0; index_n<=index; index_n++) {
        if (index*index_n >= 4)break ;
        __str+=""+index+index_n;
          }
      }
    `,
    outdent`
      let z = 1;
      let s = 0;
      for (const x = 1; z < 2; z++) {
        s += x + z;
      }
    `,
    outdent`
      var probeBefore = function() { return x; };
      var probeTest, probeIncr, probeBody;
      var run = true;
      for (
          var _ = eval('var x = 1;');
          run && (probeTest = function() { return x; });
          probeIncr = function() { return x; }
        )
        probeBody = function() { return x; }, run = false;
      var x = 2;
    `,
    outdent`
      let x = 'outside';
      var probeBefore = function() { return x; };
      var probeDecl, probeTest, probeIncr, probeBody;
      var run = true;
      for (
          let x = 'inside', _ = probeDecl = function() { return x; };
          run && (probeTest = function() { return x; });
          probeIncr = function() { return x; }
        )
        probeBody = function() { return x; }, run = false;
    `,
    outdent`
      var probeFirst;
      var probeSecond = null;
      for (let x = 'first'; probeSecond === null; x = 'second')
        if (!probeFirst)
          probeFirst = function() { return x; };
        else
          probeSecond = function() { return x; };
    `,
    'for (var {j}=x; j<10; ++j) { const foo = j }',
    outdent`
      for ("boolean" == typeof a && (l = a, a = arguments[s] ||
              {}, s++), "object" == typeof a ||
              g(a) || (a = {}), s === u && (a = this, s--); s < u; s++)
      if (null != (e = arguments[s]))
          for (t in e) n = a[t], a !== (r = e[t]) && (l && r && (w.isPlainObject(r) ||
          (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n)
          ? n : [])
          : o = n && w.isPlainObject(n)
          ? n : {}, a[t] = w.extend(l, o, r))
          : void 0 !== r && (a[t] = r));
    `,
    'for ({j}=x; j<10; ++j) { function foo() {return j} }',
    outdent`
      let = 1;
      for ( let; ; )
        break;
    `,
    'for (x of [1,2,3]) {}',
    'for(var a;b;c);',
    'for(var a = 0;;) { let a; }',
    'for(;b;c);',
    'for(let of;;);',
    'for(let a;;); let a;',
    'for(x; x < 0; x++) process(x);',
    'for(x; x < 0; x++) process(x);',
    'for(delete((1)?y:x in y);;)x',
    'for ([x];;);',
    'for ([x.y];;);',
    'for ([x] = z;;);',
    'for ([x.y] = z;;);',
    'for ({x};;);',
    'for ({x: a.b};;);',
    'for ({a: x + y};;);',
    'for ({x} = z;;);',
    'for ({a: x.y} = z;;);',
    'for ("foo".bar;;);',
    'for ("foo".bar = x ;;);',
    'for ({}.bar ;;);',
    'for ({}.bar = x ;;);',
    'for ([].bar ;;);',
    'for ([].bar = x ;;);',
    'for (const [[x]] = [null]; ; ) {}',
    'for (const [[x]] = [null]; ; ) {}',
    'for (const [{ x }] = [null]; ; ) {}',
    'for (const [...[]] = iter; a < 1; ) {}',
    'for (const [...x] = values; a < 1; ) {}',
    'for (let [x] = iter; a < 1; ) {}',
    'for (let [arrow = () => {}] = []; a < 1; ) {}',
    'for (let [{ u: v, w: x, y: z } = { u: 444, w: 555, y: 666 }] = [{ u: 777, w: 888, y: 999 }]; a < 1; ) {}',
    'for (let [,] = g(); a < 1; ) {}',
    'for (let [ , , ...x] = values; a < 1; ) {}',
    'for (let { cover = (function () {}), xCover = (0, function() {})  } = {}; a < 1; ) {}',
    'for (let { gen = function* () {}, xGen = function* x() {} } = {}; a < 1; ) {}',
    'for (let { w: [x, y, z] = [4, 5, 6] } = { w: [7, undefined, ] }; a < 1; ) {}',
    'for (let {...x} = { get v() { count++; return 2; } }; a < 1; ) {}',
    'for (var [x, y, z] = [1, 2, 3]; a < 1; ) {}',
    'for (var [[x]] = [null]; a < 1; ) {}',
    'for (var [,] = g(); a < 1; ) {}',
    'for (var [...x] = values; a < 1; ) {}',
    'for (var { x, } = { x: 23 }; a < 1; ) {}',
    'for (var { x: y } = { x: 23 }; a < 1; ) {}',
    'for (var {...x} = { get v() { count++; return 2; } }; a < 1; ) {}',
    'for (x=>{};;);',
    'for ((x)=>{};;);',
    'for (((x)=>{}) ;;);',
    'for (((x)=>{}).x ;;);',
    'function *f(){ for (yield;;); }',
    'for (x=>{x in y};;);',
    'function *f(){   for (yield;;);   }',
    'function *f(){   for (yield x;;);   }',
    'for (;; (g &= {})) do switch ((/z+/)) {} while (((class {})))',
    'for (;;) debugger;',
    'function z() { for (let c in new.target) for (let o in (--((b)).debugger)) debugger; }',
    'for (a ? b : c;;);',
    'for (a = b;;);',
    'for (a += b;;);',
    'for (((x)=>{}).x in y);',
    'for (((x)=>{}).x of y);',
    outdent`
      var let;

      let = 1;
      for ( let; ; )
        break;

      let = 2;
      for ( let = 3; ; )
        break;

        let = 4;
      for ( [let][0]; ; )
        break;
    `,
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { lexical: true });
      });
    });
  }

  fail('Statements - For (pass)', [
    'for ([{__proto__: 1, __proto__: 2}];;);',
    'for ({__proto__: 1, __proto__: 2};;);',
    { code: 'for ({x=y} ;;) b;', options: { impliedStrict: true } },
    'for({a=0};;);',
    { code: 'for (let=10;;);', options: { impliedStrict: true } },
    'for (const a;;);',
    'for (const a,b,c;;);',
    'for (var [foo] = arr, [bar] = arr2);',
    'for (var [foo,,bar] = arr);',
    'for (var [foo,bar] = arr);',
    'for (var [,,foo] = arr);',
    'for (var [,foo] = arr);',
    'for (var [foo,,] = arr);',
    'for (var [foo,] = arr);',
    'for (var [foo] = arr);',
    'for ([a.b](foo) of c) d',
    'for ([a.b]`foo` of c) d',
    'for ([a.b]++ of c) d',
    'for ({a: b.c}() of d) e',
    'for ({a: b.c}`z` of d) e',
    'for ({a: b.c}-- of d) e',
    'for (let x of a,b) c',
    'for (var [,,] = x);',
    'for (let x of y, z) {}',
    'for (var [,] = x);',
    'for (var [] = x);',
    'for (x=>x in y;;);',
    'for ({}.bar = x in obj);',
    { code: 'for (yield;;);', options: { impliedStrict: true } },
    { code: 'function *f(){   for (yield x in y;;);', options: { impliedStrict: true } },
    'for ([...{ get x() {} }] in [[[]]]) ;',
    'for (var [foo] = arr, [bar] = arr2);',
    'for (var [foo] = arr, bar);',
    'for (var [foo] = arr, bar = arr2);',
    'for (var foo = arr, [bar] = arr2);',
    'for (var [foo=a] = arr);',
    'for (var [foo=a, bar] = arr);',
    'for (var [foo, bar=b] = arr);',
    'for (var [foo=a, bar=b] = arr);',
    'for (var [foo]);',
    'for (x of y) foo: bar: function f(){}',
    'for (x of y) foo: function f(){}',
    'for (var [foo = x]);',
    'for (var [foo], bar);',
    'for (var foo, [bar]);',
    'for (var [...foo] = obj);',
    'for (var [foo, ...bar] = obj);',
    'for (var [...foo, bar] = obj);',
    'for (var [...foo,] = obj);',
    'for (var [...foo,,] = obj);',
    'for (var [...[foo, bar]] = obj);',
    'for (var [...[foo, bar],] = obj);',
    'for (var [...[foo, bar],,] = obj);',
    'for (var [x, ...[foo, bar]] = obj);',
    'for (var [...bar = foo] = obj);',
    'for (var [...] = obj);',
    'for (var {} = obj);',
    'for (var {,} = obj);',
    'for (var {,,} = obj);',
    'for (var {x} = obj);',
    'for (var {x,} = obj);',
    'for (var {x,,} = obj);',
    'for (var {,x} = obj);',
    'for (var {,,x} = obj);',
    'for (a, b);',
    'for (var {,,x} = obj);',
    'for(delete(x in y) in z)x',
    'for(delete((1)?y:x in y) in z)x',
    'for (a + b);',
    'for (a);',
    'for ({});',
    'for (const [z, z]; ; ) ;',
    'for (const [z]; ; ) ;',
    'for (const x = 5, y; ; ) ;',
    'for (const x; ; ) ;',
    'for (let [z, z]; ; ) ;',
    'for (var {,,x} = obj);',
    'for (var {,,x} = obj);',
    'for (var {x, y} = obj);',
    'for (var {x,, y} = obj);',
    'for (var {x} = a, {y} = obj);',
    'for (var {x} = a, y = obj);',
    'for (var {x} = a, obj);',
    'for (var x = a, {y} = obj);',
    'for (var x, {y} = obj);',
    'for (var {x = y} = obj);',
    'for (var {x = y, z} = obj);',
    'for (var {x, y = z} = obj);',
    'for (var {x = y, z = a} = obj);',
    'for (var {x}, {y} = z);',
    'for (var {x}, y);',
    'for (var x = y, {z});',
    'for (var {x}, y);',
    'for (var {x=y});',
    'for (var {x:y=z});',
    'for (var {x:y=z} = obj, {a:b=c});',
    'for (var {x:y=z}, {a:b=c} = obj);',
    'for (var {a:=c} = z);',
    'for (var {[x]: y} = z);',
    'for (var {[x]} = z);',
    'for(x of 3)break/',
    'for(x of 3)continue/',
    'for(x of 3)p/',
    'for (var {[x]: y});',
    'for (var {[x]: y = z});',
    'for (var {[x]: y = z} = a);',
    'for (var {a, [x]: y} = a);',
    'for ({a: x + y} = z;;);',
    'for ([x + y] = z;;);',
    'for(index=0; index<10; index+=4; index++; index--) ;',
    'for({var index=0; index+=1;} index++<=10; index*2;) {	[].add(""+index);};',
    'for ( ; false; ) class C {}',
    'for ( ; false; ) function f() {}',
    'for ( ; false; ) label1: label2: function f() {}',
    'for ( ; false; ) label1: label2: function f() {}',
    'for ((i in {}));',
    'for (let [];;);',
    'for (let [a = 0];;);',
    'for (let a = 0, [];;);',
    'for (let [] = 0, [];;);',
    'for (let {};;);',
    'for (let {a = 0};;);',
    'for (let a = 0, {};;);',
    'for (let [] = 0, {};;);',
    'for (let [...x = []] = []; a < 1; ) {}',
    'for (let [...{ x } = []] = []; a < 1; ) {}',
    'for (var a in arr;1;){ break; }',
    'for ( ; false; ) class C {}',
    'for ( ; false; ) function f() {}',
    'for ( ; false; ) function* g() {}',
    'for (const [...{ x }, y] = [1, 2, 3]; a < 1; ) {}',
    'for (var [...[ x ] = []] = []; a < 1; ) {}',
    'for (var a in arr;1;){ break; }',
    'for (let [...x = []] = []; a < 1; ) {}',
    'for (a = b of x);',
    'for (a += b of x);',
    'for (a ? b : c of x);',
    'for (a ? b : c of x);',
    'function *f(){   for (yield x in y of z);   }',
    'function *f(){   for (yield x of y);   }',
    'function *f(){   for (yield of y);   }',
    'function *f(){ for (yield of obj); }',
    'for ((x)=>{}.x of y);',
    'for (((x)=>{}) of y);',
    'for ((x)=>{} of y);',
    'for (x=>{}.x of y);',
    'for (x=>{} of y);',
    'for (const [...[foo, bar],,] = obj);',
    { code: 'for (const [... ...foo] = obj);', options: { sourceType: 'module' } },
    'for (const [...] = obj);',
    'for (const [...,] = obj);',
    'for (const [..x] = obj);',
    'for (const [a=[...b], ...c] = obj);',
    'for (const {,} = obj);',
    'for (const {x} = obj);',
    'for (const {,x} = obj);',
    'for (const {x,, y} = obj);',
    'for (const {x, y} = obj);',
    'for (const {x} = a, y = obj);',
    'for (const {x} = a, obj);',
    'for (const {x = y} = obj);',
    'for (const x, {y} = obj);',
    'for (const {x = y, z = a} = obj);',
    'for (const foo;;);',
    'for (const\nfoo();;);',
    'for (const foo);',
    'for (const [...,] = obj;;);',
    'for (const foo, bar);',
    'for (const foo = bar, zoo = boo);',
    'for (const\nfoo);',
    'for (const foo = bar in x);',
    'for (const foo = bar, zoo = boo in x);',
    'for (const foo, bar of x);',
    'for (let a = b in c) {}',
    'for (a = b in c) {}',
    'for (const foo = bar of x);',
    'for (const foo = bar, zoo = boo of x);',
    'for (const foo, zoo of x);',
    'for (const foo, [bar] = arr2;;);',
    'for (const [foo];;);',
    'for (const [foo = x];;);',
    'for (const [foo], bar;;);',
    'for (const foo, [bar];;);',
    'for (const [...foo, bar] = obj;;);',
    'for (const [...foo,] = obj;;);',
    'for (const [...[foo, bar],,] = obj;;);',
    'for (const [...[foo, bar],] = obj;;);',
    'for (const [...bar = foo] = obj;;);',
    'for (const [... ...foo] = obj;;);',
    'for (const [...] = obj;;);',
    'for (const [...,] = obj;;);',
    'for (const {x : y} = obj);',
    'for (const {x : y, z : a} = obj);',
    'for (const {x : y = z} = obj);',
    'for (const {x : y, z, a : b = c} = obj);',
    'for (const {x});',
    'for (const {x}, {y} = z);',
    'for (const {x}, y);',
    'for (const {x}, y);',
    'for (const {x=y});',
    'for (const {x:y=z} = obj, {a:b=c});',
    'for (const {x:y=z}, {a:b=c} = obj);',
    'for (const {a:=c} = z);',
    'for (const {[x]: y} = z);',
    'for (const {[x]} = z);',
    'let {...{a,b}} = foo',
    'for (const [.x] = obj;;);',
    'for (const [..x] = obj;;);',
    'for (const {,} = obj;;);',
    'for (const {,,} = obj;;);',
    'for (const {x,,} = obj;;);',
    'for (const {,x} = obj;;);',
    'for (const {,,x} = obj;;);',
    'for (const {x,, y} = obj;;);',
    'for (const {x} = a, obj;;);',
    'for (const x, {y} = obj;;);',
    'for (const {x}, {y} = z;;);',
    'for (const x, {y};;);',
    'for (const {x}, y;;);',
    'for (const x = y, {z};;);',
    'for (const {x:y};;);',
    'for (const {x:y=z};;);',
    'for (const {x:y=z} = obj, {a:b=c};;);',
    'for (const {x:y=z}, {a:b=c} = obj;;);',
    'for (const {a:=c} = z;;);',
    'for (const {[x]} = z;;);',
    'for (const {[x]};;);',
    'for (const {[x]: y};;);',
    'for (const {[x] = y} = z;;);',
    'for (const {[x]: y = z};;);',
    'for (const [,,] = x);',
    'for (const [foo,,] = arr);',
    'for (const [,foo] = arr);',
    'for (const [foo,bar] = arr);',
    'for (const [foo] = arr, bar);',
    'for (const foo, [bar] = arr2);',
    'for (const foo = arr, [bar] = arr2);',
    'for (const [foo=a, bar] = arr);',
    'for (const [foo = x]);',
    'for (const [foo]);',
    'for (const {[x] = y} = z);',
    'for (const {[x]: y = z});',
    'for (const [foo], bar in arr);',
    'for (const foo, [bar] in arr);',
    'for (const [foo]);',
    'for (const [foo = x]);',
    'for (const [foo], bar);',
    'for (const foo, [bar]);',
    'for (const [...foo, bar] in obj);',
    'for (const [...foo,] in obj);',
    'for (const [...foo,,] in obj);',
    'for (const [...[foo, bar],] in obj);',
    'for (const [...[foo, bar],,] in obj);',
    'for (const [...] in obj);',
    'for (const [...,] in obj);',
    'for (const [.x] in obj);',
    'for (const [..x] in obj);',
    'for (const {,} in obj);',
    'for (const {,,} in obj);',
    'for (const {x,,} in obj);',
    'for (const {,x} in obj);',
    'for (const {x,, y} in obj);',
    'for (const x, {y} in obj);',
    'for (const {x}, y);',
    'for (const x = y, {z});',
    'for (const {x:y});',
    'for (const {x:y=z});',
    'for (const {x:y=z} = obj, {a:b=c});',
    'for (const {x:y=z}, {a:b=c} in obj);',
    'for (const {[x] = y} in obj);',
    'for (const foo, [bar] of arr);',
    'for (const [foo = x]);',
    'for (const [...foo] = obj);',
    'for (const [foo, ...bar] = obj);',
    'for (const [...foo, bar] = obj);',
    'for (const [...foo,,] = obj);',
    'for (const [..x] of obj);',
    'for (const [.x] of obj);',
    'for (const {,,} of obj);',
    'for (const {,} of obj);',
    'for (const {,,x} of obj);',
    'for (const {x,, y} of obj);',
    'for (a = b in x);',
    'for (a ? b : c in x);',
    'function *f(){   for (yield x in y in z);   }',
    'for ((x)=>{}.x in y);',
    'for (((x)=>{}) in y);',
    'for ((x)=>{} in y);',
    'for (x=>{}.x in y);',
  ]);

  pass('Statements - For (pass)', [
    'for (let [,] = x;;);',
    'for(()=>{a in b};;);',
    outdent`
      let = 4;
      for ( [let][0]; ; )
        break;
    `,
    'for (let\nfoo;;);',
    'for (let [] = x;;);',
    'for (let [foo] = arr, bar;;);',
    'for (() => { this in null };;);',
    'for (`<${new arguments(++r.function[eval], () => {}, function () {""}, (a)in this, true)}`; x ^= arguments;) {}',
    'for (let [foo, ...bar] = obj;;);',
    'for (let {x} = obj;;);',
    'for ({x = y} = (z);;) {}',
    'for (let [foo, bar=b] in arr);',
    'for (var a;;);',
    'for (var a,b,c;;);',
    'for (var x = 0; x < 1000000; x++);',
    'for (let a;;);',
    'for (let a,b,c;;);',
    'for (var a;;) { let a; }',
    'for (let foo in x);',
    'for (let foo;;);',
    'for (;;);',
    'for (a;;);',
    'for (;b;);',
    'for (;;c);',
    'for (a;b;);',
    'for (a;;c);',
    'for (;b;c);',
    'for (let [foo=a, bar=b] in arr);',
    'for (let [...foo] = obj;;);',
    'for (let [foo=a, bar=b] = arr;;);',
    'for (let [foo, bar=b] = arr;;);',
    'for (let [foo=a] = arr;;);',
    'for (let foo = arr, [bar] = arr2;;);',
    'for (a * b + c * d;b;c);',
    'for ((a * b + c) * d;b;c);',
    'for (const [...x] in y){}',
    'for (const [...x] in y){}',
    'for (const {...x} in y){}',
    'for (var a=1;;);',
    'for (var a=1, b;;);',
    'for (var a, b=1;;);',
    'for (var a=1, b=2;;);',
    'for (const a in b);',
    { code: 'for (var a = b in c);', options: { webcompat: true } },
    { code: 'for (var a = ++b in c);', options: { webcompat: true } },
    { code: 'for (var a = 0 in stored = a, {});', options: { webcompat: true } },
    { code: 'for (var a = (++effects, -1) in x);', options: { webcompat: true } },
    'for (var a in stored = a, {a: 0, b: 1, c: 2});',
    { code: 'for (var a = (++effects, -1) in stored = a, {a: 0, b: 1, c: 2});', options: { webcompat: true } },
    'for ([a.b] in c) d',
    'for ([a.b].foo in c) d',
    'for ({a: b.c} in d) e',
    'for ({a: b.c}.foo in d) e',
    'for (let a of b);',
    'for (a of b=c);',
    'for ([a.b] of c) d',
    'for ([a.b].foo of c) d',
    'for ({a: b.c} of d) e',
    'for ({a: b.c}.foo of d) e',
    'for (let [,,] = x;;);',
    'for (let [foo] = arr;;);',
    'for (let [foo,] = arr;;);',
    'for (let [foo] = arr, [bar] = arr2;;);',

    'for (a + b * c * d;b;c);',
    'for (;;);',
    'for (a;;);',
    'for (;b;);',
    'for (foo=10;;);',
    'for (let=10;;);',
    'for (;;) let \n {}',
    'for (;;) let \n x = 1',
    'for (let a, { b } = {};;) { let a, { b } = {}; { let a, { b } = {}; }}',
    'for (true ? a in b : {}; false; ) ;',
    'for (a;b;c);',
    'for (a * b + c * d;b;c);',
    'for (var a;;);',
    'for (let a;;);',
    'for (a in b=c);',
    'for (a of b);',
    'for (let a of b);',
    'for (let in x) y',
    'for (;;c);',
    'for (a;b;);',
    'for (a;;c);',
    'for (;b;c);',
    'for (a;b;c);',
    'for (a * b + c * d;b;c);',
    'for ((a * b + c) * d;b;c);',
    'for (var a,b,c;;);',
    'for (let a,b,c;;);',
    'for (const [...x] in y){}',
    'for (var a=1, b;;);',
    'for (var a, b=1;;);',
    'for (var a=1, b=2;;);',
    /*  [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],
    [ 'for (a in b);', Context.None, {}],*/

    'for (a in b);',
    { code: 'for(\na=1,\nb=2;;);', options: { loc: true, ranges: true } },
  ]);
});
