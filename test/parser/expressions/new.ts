import { Context } from '../../../src/common';
import { pass, fail } from '../../test-utils';
import * as t from 'node:assert/strict';
import { describe, it } from 'vitest';
import { parseSource } from '../../../src/parser';

describe('Expressions - New', () => {
  for (const arg of [
    'new x(1);',
    'new x;',
    'new new x;',
    'new new x.y;',
    'new (function(foo){this.foo=foo;})(1);',
    'new (function(foo){this.foo=foo;})();',
    'new (function test(foo){this.foo=foo;})(1);',
    'new (function test(foo){this.foo=foo;})();',
    'new true;',
    'new (0);',
    'new (!0);',
    'new (bar = function(foo) {this.foo=foo;})(123);',
    'new (bar = function(foo) {this.foo=foo;})();',
    'new x(1);',
    'new x();',
    'new x();',
    'new x()()()()()()();',
    'new (x()()()()()()());',
    'new new x()();',
    'new function(foo) {\n    this.foo = foo;\n}(1);',
    'new function(foo) {\n    this.foo = foo;\n}();',
    'new function test(foo) {\n    this.foo = foo;\n}(1);',
    'new function test(foo) {\n    this.foo = foo;\n}();',
    'new true();',
    'new async()()',
    'new a()().b.c[d];',
    'new async()().b.c[d];',
    'new (a()().b.c[d]);',
    'new (b());',
    'new (async(await));',
    'new async / b',
    'new async / await',
    'new async / await()',
    'new async / await(async = foo)',
    'new async / await(async,)',
    'new async / await(foo, async)',
    'new async / await("foo", async)',
    'new async / await(123, async)',
    'new async / await(foo, async)',
    'new 0();',
    'new (!0)();',
    'new (bar = function(foo) {\n    this.foo = foo;\n})(123);',
    'new (bar = function(foo) {\n    this.foo = foo;\n})();',
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, undefined, Context.OptionsWebCompat);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, undefined, Context.None);
      });
    });
  }
  fail('Expressions - New (fail)', [
    ['function f(){ new.foo }', Context.None],
    ['new.target', Context.None],
    ['_ => new.target', Context.None],
    ['function f(){ ++new.target }', Context.None],
    ['function f(){ new.target-- }', Context.None],
    ['(f=new.target) => {}', Context.None],
    ['new x() = y', Context.None],
    ['new a.b.c.(d).e.f.g[(b)]();', Context.None],
    ['new a.async.c.(d).e.f.g[(async)]();', Context.None],
    ['new async = async.await', Context.None],
    ['++new x()', Context.None],
    ['new x()++', Context.None],
    ['new new .target', Context.None],
    ['new typeof x', Context.None],
    ['new typeof x.y', Context.None],
    ['new typeof x().y', Context.None],
    ['new ++x', Context.None],
    ['new ++x.y', Context.None],
    ['new ++x().y', Context.None],
    ['new ()=>{}', Context.None],
    ['new x=>{}', Context.None],
    ['new (x)=>{}', Context.None],
    ['new a = b', Context.None],
    ['function *f(){ new yield }', Context.None],
    ['"use strict"; new yield()', Context.None],
    ['function *f(){ new yield }', Context.None],
    ['function *f(){ new yield x }', Context.None],
    ['function *f(){ new yield x(); }', Context.None],
    ['new x++', Context.None],
    ['new x.y++', Context.None],
    [
      `function f() {
      new.target++;
      new.target = b;
      for (new.target in b);
      for (new.target of b);
    }`,
      Context.None,
    ],
    ['new async x => x', Context.None],
    ['new async => x', Context.None],
    ['let x = typeof async (x) => x', Context.None],
    ['let x = [typeof async \n (x) => x]', Context.None],
    ['let x = [typeof async (x) \n => x]', Context.None],
    ['let x = [delete async \n (x) => x]', Context.None],
    ['let x = [delete async (x) \n => x]', Context.None],
    ['new x\n/y/', Context.None],
    ['let x = new async \n (x) => x', Context.None],
    ['let x = new async (x) \n => x', Context.None],
    ['typeof async () => x', Context.None],
    ['typeof async \n () => x', Context.None],
    ['typeof async () \n => x', Context.None],
    ['let x = typeof async \n (x) => x', Context.None],
    ['let x = typeof async (x) \n => x', Context.None],
    ['delete async () => x', Context.None],
    ['delete async \n () => x', Context.None],
    ['delete async () \n => x', Context.None],
    ['new ++x.y', Context.None],
    ['let x = delete async \n (x) => x', Context.None],
    ['let x = delete async (x) \n => x', Context.None],
    ['async () => new await x', Context.None],
    ['async () => new await x()', Context.None],
    ['async () => new await x()()', Context.None],
    ['async function f(){ new await foo }', Context.None],
    ['new class', Context.None],
    ['new class extends{}', Context.None],
    ['new delete', Context.None],
    ['new function', Context.None],
    ['new function()', Context.None],
    ['new new', Context.None],
    ['new super', Context.None],
    ['class x { constructor() { new super }}', Context.None],
    ['class x extends y { constructor() { new super }}', Context.None],
    ['new typeof', Context.None],
    ['new typeof x', Context.None],
    ['new typeof x()', Context.None],
    ['new void', Context.None],
    ['new void x', Context.None],
    ['delete () => foo', Context.None],
    ['delete async() => foo', Context.None],
    ['function f(){ new.foo }', Context.None],
    ['new.target', Context.None],
    ['_ => _ => _ => _ => new.target', Context.None],
    ['function f(){ ++new.target }', Context.None],
    ['function f(){ new.target-- }', Context.None],
    ['new x(await foo);', Context.None],
    ['new (await foo);', Context.None],
    ['new await foo;', Context.None],
    ['new x(await foo);', Context.None],
    ['new x(await foo);', Context.None],
    ['new x(await foo);', Context.None],
    ['new.target[await x]', Context.None],
    ['new await x()()', Context.None],
    ['new await x()', Context.None],
    ['new await x', Context.None],
  ]);

  pass('Expressions - New (pass)', [
    'new await()()',
    'new foo()();',
    'new (foo)();',
    'new (foo);',
    'new a ? b : c',
    'new Foo',
    'new Foo.Bar',
    'new a.b.c.d',
    'new async(x)(y)',
    'new Foo["bar"]',
    'new Foo()',
    'new Foo.Bar()',
    'new Foo["bar"]()',
    'new Foo(X)',
    'new Foo.Bar(X)',
    'new Foo["bar"](X)',
    'new Foo(X, Y, Z)',
    'new Foo.Bar(X, Y, Z)',
    'new Foo["bar"](X, Y, Z)',
    'new x().y',
    'new x()[y]',
    'new x()();',
    //['new x()`y`', Context.None,  {}],
    'new a.b.c.d()',
    'new Foo["bar"]()',
    'new Foo(X)',
    'new Foo.Bar(X)',
    'new Foo["bar"](X)',
    'new Foo(X, Y, Z)',
    'new Foo.Bar(X, Y, Z)',
    'new Foo["bar"](X, Y, Z)',
    'new x().y',
    'new x()[y]',
    'new x()();',
    'new x().y = z',
    'new x().y + z',
    'new x()[y] = z',
    'new x()[y] + z',
    '++new x().y',

    'new x().y++',
    'delete new x()',
    'delete new x().y',
    'typeof new x()',
    'new new A().foo',
    'new new A.foo()',
    'new "foo".__proto__.constructor',
    'new 1..__proto__.constructor',
    'new 0x2.__proto__.constructor',
    'new true.__proto__.constructor',
    'typeof new x().y',
    'new new x',

    '[...new A()]',
    'class x extends new A() {}',
    'x({[new A()]:y})',
    'f(new /z/())',
    'f(new /z/)',
    'f(new /z/.foo)',
    'new arguments',
    'new async',
    'new async (x, y)',
    'new async (...x)',
    'new async function(){}',
    'typeof async',
    'typeof async ()',
    'typeof async function(){}',
    'new await',
    'new class{}',
    'new class extends x{}',
    'class x extends (x) {}',
    'new eval()',
    'new false.__proto__.constructor',
    'new function(){}',
    'new function(){}(x)',
    'class x extends y { constructor() { new super.foo }}',
    'class x extends y { constructor() { new super() }}',
    'new this',
    'new let',
  ]);
});
