import * as t from 'node:assert/strict';
import { describe, it } from 'vitest';
import { Context } from '../../../src/common';
import { parseSource } from '../../../src/parser';
import { fail, pass } from '../../test-utils';

describe('Expressions - Array', () => {
  for (const arg of [
    '[1 <= 0]',
    '[a, ...b=c]',
    '[a, ...b=c]',
    '[a, ...b=c]',
    '[a, ...(b=c)]',
    '[a, ...b=c.d = 2]',
    '[a, ...b=c]',
    '([a, ...b=c])',
    '[a] = x',
    '[[a] = x]',
    '[[a] = x]',
    '[[a] = [[a] = x]]',
    '[[a] = [[a] = [[a] = [[a] = x]]]]',
    '[a = b] = x',
    '[[a] = b] = x',
    '[,,,] = x',
    '[...a] = x',
    '[...async] = x',
    'v = [...a, b]',
    '[a,] = x',
    '0, [{ x }] = [null]',
    '[a, b] = f();',
    '[...a.b] = x',
    '[[a]] = x',
    '[{x = y}] = z',
    '[...[a]] = x',
    '[(x)] = 1',
    '[,,1,,,2,3,,]',
    '[ 1, 2,, 3, ]',
    '[ 0 ]',
    '[ ,, 0 ]',
    '[,,3,,,]',
    '[x()]',
    '[...a]',
    '[a, ...b]',
    '[...a,]',
    '[, ...a]',
    '[x().foo] = x',
    '[(x().foo)] = x',
    '[...a, ...b]',
    '[...a, , ...b]',
    '[...x, y];',
    'async(...x/y);',
    'var array = [,,,,,];',
    'var a = [,];',
    'let a = [];',
    'let b = [42];',
    'let c = [42, 7];',
    'let [d, ...e] = [1, 2, 3, 4, 5];',
    'let [async, ...e] = [1, 2, 3, 4, 5];',
    'let [d, ...async] = [1, 2, 3, 4, 5];',
    'let [async, ...await] = [1, 2, 3, 4, 5];',
    '[...x];',
    '[...x] = y;',
    '[...[x].foo] = x',
    '[...[x]/y]',
    '(...[x]) => x',
    '(...{x}) => x',
    '[...{x}]',
    '[...{x}] = y',
    '([...{x}]) => x',
    '[...{x}/y]',
    '[...{x} ? y : z]',
    '[...{x}.foo] = x',
    '([...[x]]) => x',
    '[...[x]] = y',
    '[...[x]]',
    '[...[...a]]',
    '[a, ...b]',
    '[function* f() {}]',
    '[a, ...{0: b}] = (1);',
    '[...{a}] = b;',
    '[...{a}] = b;',
    '[a, ...{0: b}] = 1',
    '[1, "z", "a", "Symbol(foo)"]',
    '[1, 2, 3, ...[]]',
    ' [...{}];',
    '[1,2,,4,5];',
    '[a,]',
    '[a,,]',
    '[a,a,]',
    '[a,,,]',
    '([...x]) => y',
    '([...async]) => y',
    '[...(x,y)]',
    '[...(x,y)]',
    '[a,a,,]',
    '[,a]',
    '[,a,]',
    '[,a,,]',
    '[,a,a,]',
    '[,a,]',
    '[,a,,]',
    '[,a,a,]',
    '[,,a]',
    '[,a,a]',
    '[,,a,]',
    '[,,a,]',
    '[,,,a]',
    '[,,a,a]',
    'a = [,]',
    'a = [,]',
    '[[1,2], [3], []]',
    '[1,2,,4,5]',
    '[0, ...a];',
    '[...iter];',
    'a = [,] = b = [] = c[9]',
    'a = [(b), (c), (d)]',
    'a = [(b) => {}, (c) => {}, (d) => { [b]}]',
    'a = [(b) => {}, [(b) => {}, (c) => {}, (d) => { [b]}]]',
    'a = [,]',
    'a = [,]',
    'a = [a = [,],a = [a = [,],a = [,]]]',
    'async = [,]',
    'async ([[[]]]) => [[,,a,a=> {}]]',
    '[[,,a,a=> {}]]',
    '[[,,a=> {},a]]',
    '[[a=> {},,a,]]',
    '[[] = [9], {} = [], c = d, [,,a,a=> {}]]',
    '[[,,a,a=> {}]]',
    '([].x);',
    '[...this, y];',
    '[...x, y];',
    '[...x];',
    '[...x] = y;',
    '[...async] = y;',
    '[...this];',
    '[...new x];',
    '[...x/y];',
    '[...x = x];',
    '([...x=y])',
    'async([].x);',
    '[...[a]=1]',
    '[...[1]]',
    '[...[1], ..."foo" ]',
    '[...[1], ...2 ]',
    '[...[1], ..."foo", ]',
    '[...[1], ...2 ,]',
    '[...[1], ..."a".b]',
    '[...[1], ..."a"[b]]',
    '[...[1], ..."a"(b)]',
    '[...[1], ["a"](b)]',
    '[...[1], "a"(b)]',
    '[...a]',
    '[a, ...b]',
    '[...a,]',
    '[...a, ,]',
    '[, ...a]',
    '[...a, ...b]',
    '[...a, , ...b]',
    '[...[...a]]',
    '[...[...async]]',
    '[, ...a]',
    '[, , ...a]',
    '[,]',
    '[...50..bar]',
    '[...50]',
    '[...a=b]',
    '[{}.foo] = x',
    '[{}[foo]] = x',
    '[[]]',
    '([...x]) => x',
    '([...x]);',
    '([...x=y]);',
    '([...x, ...y]);',
    '([...x.y] = z)',
    '([...x, ...y]);',
    '[{}.foo]=x',
    '[5[foo]]=x',
    '["x".foo]=x',
    '[`x`.foo]=x',
    '[x]=y',
    '[x=y]=z',
    '({"a b c": bar});',
    '({"a b c"(){}});',
    '({"a b c": bar}) => x',
    '({15: bar});',
    '({15(){}});',
    '({15: bar}) => x',
    '({25: true})',
    '({"x": true})',
    '[a.b=[c.d]=e] = f;',
    '([a=[b.c]=d]) => e;',
    '[{x: y.z}]',
    '[{x: y.z}] = a',
    '([a] = b) => c;',
    '([a]) => b;',
    'const [a] = b;',
    'function foo([a]){};',
    'function foo([a] = b){};',
    '({"foo": [x].foo}=y);',
    '[...foo] = bar',
    'for ([...a.b] in c) d',
    '[...a.b]=c',
    '[...a.b]=c',
    '[...a.b] = c',
    '([...a.b] = c)',
    '([...[x]]) => x',
    '[(a)] = x',
    '(z = [...x.y] = z) => z',
    '(z = [...x.y]) => z',
    '[...[x]=y];',
    '[...[{a: b}.c]] = [];',
    '[...[{prop: 1}.prop]] = []',
    '({ a: {prop: 1}.prop } = {})',
    '[{a: 1}.c] = [];',
    '[({a: 1}.c)] = [];',
    '[[1].c] = [];',
    '[foo.foo, foo.bar] = [1, 2];',
    '[([1].c)] = [];',
    '({ a: {prop: 1}.prop } = {})',
    'var [, a, , b] = x',
    'var [] = x',
    'var [...a] = x;',
    'var [a] = x;',
    '[foo, bar] = [0,1];',
    '[a,a,,...a]=0',
    '[,,]=0',
    '[...a[0]] = 0',
    '[...{ a }] = b',
    '[[[[[[[[[[[[[[[[[[[[{a=b[0]}]]]]]]]]]]]]]]]]]]]]=0;',
    '[(a) = 0] = 1',
    '[(a.b)] = 0',
    '[a = (b = c)] = 0',
    '[(a = 0)]',
    '({a:(b)} = 0)',
    '({a:(b) = 0} = 1)',
    '({a:(b.c)} = 0)',
    '({a:(b = 0)})',
    '[a] = 0;',
    '[...a = b] ',
    'result = [ x = yield ] = [[22]];',
    'result = [[x[yield]]] = [[22]];',
    '[{...o, ...o2}]',
    '([...x=y])',
    '[...this, y];',
    '({...this, y})',
    '[1, "z", "a", "Symbol(foo)"]',
    '(null, [...[]])',
    'apply(null, [...[]])',
    '[...target = source]',
    '[{a: 1, b: 2, ...null}]',
    '[{a: 1, b: 2, ...o}]',
    '[5, ...[6, 7, 8], 9]',
    '[,,,1,2]',
    '[,,,,,,,,,,,,,,,,,,,,,,,,,]',
    '[,,,,a,,,,,,b,,,,,,,,,1,,,,,,]',
    '[,,,,,,,,[5, ...[6, 7, 8], 9],,,,,,,,,,,,,,,,,]',
    '[,,,,,,,,,,,,,,,,,,,,,,,,,]',
    '[,,,,,,,,,,,,,,,,,,,,,,,,,]',
    '[,,3,,,];',
    '[[1,2], [3], []];',
    '[101];',
    '[...a[0]] = 0;',
    '[a,b=0,[c,...a[0]]={}]=0;',
    'result = [ xFn = function x() {}, fn = function() {} ] = vals;',
    '[ arrow = () => {} ]',
    '[ xCls = class x {}, cls = class {}, xCls2 = class { static name() {} } ]',
    '[ xCover = (0, function() {}), cover = (function() {}) ]',
    'result = [ x = "x" in {} ] = vals;;',
    '0, [ x = y ] = [];',
    '[ a = x += 1, b = x *= 2 ]',
    '[arguments = 4, eval = 5]',
    '[ x = yield ] ',
    '0, [[ _ ]] = [null];',
    '[[1]];',
    '0, [ x ] = [];',
    '[ x[yield] ] = [33];',
    '[,] = [];',
    '["x".foo] = x',
    '[5[foo]] = x',
    '[,] = [];',
    '[] = null',
    '[] = true',
    '[, , x, , ...y] = [1, 2, 3, 4, 5, 6];',
    '[...[x]]  = [ , ];',
    '[...[x[yield]]] =[101];',
    '[...[async[yield]]] = [await];',
    '[...x[yield]] =[101];',
    '0, { yield } = {};',
    '[[[[[[[101]]]]]]];',
    '[[[[[[[a]]]]]]] = b;',
    '[[[[[[[a=b]]]] = c] = c] = c] = c;',
    '[[[[[[[a=b] = c] = c] = c] = c] = c] = c] = c;',
    '[[[[[[[a=b]] = c]] = c] = c] = c] = c;',
    '[[[[[[[a=b] = c]]] = c] = c] = c] = c;',
    '[[[[[[[a=b]]]] = c] = c] = c] = c;',
    '[[[[[[[a=b] = c] = c] = c] = c] = c] = c] = [[[[[[[a=b] = c]]] = c] = c] = c] = c;',
    '[[[[[[[a=b]] = c]] = c] = c[[[[[[[a=b] = c]]] = c] = c] = c] = c] = c] = c;',
    '[1, ...rest]',
    '[...rest, 1]',
    '[...rest, ,1]',
    '[{a: 0}.x] = [];',
    '[[0].x] = [];',
    '[...{a: 0}.x] = [];',
    '[...[0].x] = [];',
    '({a: {b: 0}.x} = {});',
    '({a: [0].x} = {});',
    '({...{b: 0}.x} = {});',
    '({...[0].x} = {});',
    '({...{eval}.x} = {});',
    '[{eval}.x] = [];',
    '[...{eval}.x] = [];',
    '[...{eval}.x] = [[...{arguments}.x] = []];',
    '({a: {eval}.x} = {});',
    '[...{arguments}.x] = [];',
    '[a]',
    '[[a] ? x : bcd]',
    '[[a] / bcd]',
    '([a] / bcd)',
    '[({a})]',
    '[({a}), ({b})]',
    '[(({a}), ({b}))]',
    '([(({a}), ({b}))])',
    '[a]',
    '[a]',
    '[a]',
    '[a, b] = [10, 20];',
    '[a, b.c.d = (a) / 2 ] = [10, 20];',
    '({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});',
    '[a=5, b=7] = [1];',
    '[a=5, b=(7)] = ([1]);',
    '[a=5, b=(async)] = ([1]);',
    '[a=5, b=("foo")] = ([async]);',
    '[a=5, b=(7).c.d] = ([1]);',
    '[a, b] = [b, a];',
    '[a, b.c] = [d.e, f.g];',
    '[a, b.c] = [d.e, (f.g) = h];',
    '[a, b] = f(() => {  }); ',
    '[a, b] = f(() => { [a, b.c] = [d.e, (f.g) = h]; }); ',
    '([a, b] = f(() => { [a, b.c] = [d.e, (f.g) = h]; }));',
    '[a, b] = f(); ',
    'var [a, , b] = f();',
    '[a, ...b] = [1, 2, 3];',
    '[a, ...b] = [1, 2, ...c];',
    '[a, ...b] = [1, 2, ...(c / 2)];',
    '[a, ...b] = [1, 2, ...c / 2];',
    '[a, ...b] = ([1, 2, ...c / 2]);',
    '[async, ...b] = ([1, 2, ...c / 2]);',
    '[a, ...b] = ([1, 2, ...async / 2]);',
    'o = {p: 42, q: true};',
    'await = {p: 42, q: true};',
    '[o = {p: 42, q: true}];',
    '([o = {p: 42, q: true}]);',
    '[a, b, ...rest] = [10, 20, 30, 40, 50];',
    '[[[a.b =[]]]]',
    '[[[a.b =[{ x: x.b }]]]]',
    '[[[a.b =[{ x: x.b }]]]]',
    '[[[a.b =[{ x: x.b }]]] = abc]',
    '[(a) = (b)]',
    '[(x) = y = (z)]',
    '[(x) = y = (z) => (a)]',
    '[(x) => y = (z)]',
    '[(x), y = x] = x;',
    '[(x), y] = x;',
    '[(async), y] = x;',
    '[(x), async] = x;',
    '[(x), await] = x;',
    '[(x), async] = await;',
    '[(x), y] = x;',
    '[a, b, c];',
    '[x.y = 42]',
    '[{}[x ? y : z] += a]',
    '[ c.d === e ? f : g ]',
    '["b" === e ? f : g ]',
    '[ [b].c.d === e ? f : g ]',
    '[{}[x ? y : z] += a]',
    '[ c.d === (e ? f : g )]',
    '[ c.d === (e ? f : g ) ? x : y]',
    '[["b"] === e ? f : g ]',
    '[([b].c.d) === {string} ? f : g ]',
    '[([3].c.d) === e ? f : g /= 1]',
    '[{}[x ? {zzz} : (z)] /= a]',
    '[ c.d === e ? (f) : (g) ]',
    '["b" === e ? f : g ]',
    '[ [b].c.d === e ? f : g ]',
    '[{}[x ? y : z] += a]',
    '[ c.d === (e ? f : g )]',
    '[ c.d === (e ? f : g ) ? x : y]',
    '[["b"] === e ? f : g ]',
    '[([b].c.d) === e ? f : g ]',
    '[([b].c.d) === e ? f : g /= 1]',
    '[...{}[x ? {zzz} : (z)] /= a]',
    '[ ...c.d === e ? (f) : (g) ]',
    '[..."b" === e ? f : g ]',
    '[...[b].c.d === e ? f : g ]',
    '[...{}[x ? y : z] += a]',
    '[...[][x ? y : z] += a]',
    '[ c.d === (e ? f : g ) ? x : y]',
    '[(x.y) = 42]',
    '[(x.y) = [1/42]]',
    '[(x.y) = [1/42]]',
    '[x.y = 42]',
    '[[], [b, c], []];',
    '[a,, b,];',
    '[a,,,, b];',
    '[a, b,, c];',
    '[(a), ] = x;',
    '([(x), y] = x);',
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { lexical: true });
      });
    });

    it(`() => {${arg}}`, () => {
      t.doesNotThrow(() => {
        parseSource(`() => {${arg}}`);
      });
    });

    it(`function foo() { ${arg}}`, () => {
      t.doesNotThrow(() => {
        parseSource(`function foo() { ${arg}}`, { webcompat: true });
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { webcompat: true });
      });
    });
  }

  fail('Expressions - Array (fail)', [
    '[(x.y) = [1/42]/=2]',
    '[[[[[[[[[[[[[[[[[[[[{a=b}]]]]]]]]]]]]]]]]]]]]',
    '[{}[x ? {zzz} : (z)] /= ...a]',
    '[{} = 2/=2]',
    '["b" /= e ? f : g ]',
    '[([b].c.(d)) **= e ? f : g /= 1]',
    '[([b].c.(d) / x - 2) **= e ? f : g /= 1]',
    '[...[x ? y : z] += a]',
    'try {} catch ([...a.b]) {}',
    '[ c.d === (...e ? f : g )]',
    'let [...a.b]=c',
    '[["b"] /= e ? f : g ]',
    '[{} /= 2]',
    '[{x=y} = 2/=2]',
    '[ c.d === (...[e] ? f : g )]',
    '[x.[y] = 42]',
    '[x.[y] = [z]]',
    'for (let [...a.b] in c) d',
    '[...[1], ...1.a]',
    'let [...a, b] = [];',
    '[...break]',
    '[...break }',
    '[...break :',
    '[...break',
    '[...a, b] = v',
    '[(a), async(await[async])] = x;',
    '[...this] = x;',
    '[...this] => x;',
    '[{a: 1} = []];',
    '[{a: 1} = []];',
    '[{a: 1} = []];',
    '[{a: 1} = []];',
    '[...a, ...b] = x',
    '[([a])] = x',
    '[([async])] = x',
    '[...a,] = x',
    '[{x = y}]',
    '({a: {b = 0}.x} = {})',
    '() => {({a: {b = 0}.x} = {})}',
    'function foo() { ({a: {b = 0}.x} = {})}',
    '({a: {b = 0}.x} = {})',
    '[/[/]',
    '[{a = 0}.x] = [];',
    '() => {[{a = 0}.x] = [];}',
    '[{a = 0}.x] = [];',
    '[...x, ...y] = [];',
    '[...{a = 0}.x] = []',
    '() => {[...{a = 0}.x] = []}',
    '() => {({...{b = 0}.x} = {})}',
    '[...x, ...y] = [];',
    '[...x, ...y] = [];',
    // [`++[a];`, Context.None],
    '[...{0=x} = c] ',
    '[...{a: 0=x} = c] ',
    '[...{0} = c] ',
    '[...{a: 0} = c]',
    '({x:0 = 5})',
    '([...x=y]) = z',
    '([...x=y]) => z',
    '({*a([a.b]){}})',
    'try {} catch ({e: x.a}) {}',
    'var {a: b.c} = 0;',
    '([a.b]) => 0',
    'function a([a.b]) {}',
    '({a([a.b]){}}',
    '({set a([a.b]){}})',
    'let [...x=y] = z',
    '[...{true=x} = c]',
    '[...{a: true=x} = c]',
    '([x]=await y)=>z',
    '[x=y]=await z',
    '[...{true} = c]',
    '[...{a: function=x} = c]',
    '[...{a: true=x} = c]',
    '({x:true = 5})',
    'var [a]; ',
    'var ([a]) = x;',
    'var [...a, b] = x;',
    'var [...a,] = x;',
    '[x] += 0',
    '[, x, ...y,] = 0',
    '[...x, ...y] = 0',
    '({[a / b = c]: {}})',
    '[...x, y] = 0',
    '[...x,,] = 0',
    '[0,{a=0}] = 0',
    '[{a=0},{b=0},0] = 0',
    '[{a=0},...0]',
    '[...0,a]=0',
    '[...0,{a=0}]=0',
    '[...0,...{a=0}]=0',
    'function foo() { [a, ...{b=c}]}',
    '() => {[a, ...{b=c}]}',
    '([[a](b.c) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a](b) = [[a] = [[a] = ([[a] = x]]]]))',
    '[[a] = [[a] = [[a] = ([[a] = x]]]])',
    '([[a] = [[a] = [[a] = ([[a] = x]]]]))',
    '[...a, ,] = [...a, ,]',
    '([...a, ,] = [...a, ,])',
    '[...{a=0},]',
    '[...{a=0},]=0',
    '[0] = 0',
    '[a, ...b, {c=0}]',
    '{a = [...b, c]} = 0',
    '[a, ...(b = c)] = 0',
    { code: '[...await]', options: { sourceType: 'module' } },
    { code: '[...await]', context: Context.InAwaitContext },
    { code: '[...yield]', options: { impliedStrict: true } },
    { code: '[.../x//yield]', options: { impliedStrict: true } },
    { code: '[...await] = obj', options: { sourceType: 'module' } },
    { code: '[...await] = obj', context: Context.InAwaitContext },
    { code: '[...yield] = obj', options: { impliedStrict: true } },
    'async x => [...await x] = obj',
    '[...a + b] = c',
    'function *f(){ return [...yield] = obj; }',
    'function *f(){ return [...yield x] = obj; }',
    { code: '({...yield} = obj)', options: { impliedStrict: true } },
    'async([].x) => x;',
    '[x=await y]=z',
    '[x=await y]=z',
    '[.../x/ y]',
    '[...{a = b} = c] = x',
    '([...{a = b} = c]) => d;',
    '[...{a = b} = c] = d;',
    { code: 'result = [...{ x = yield }] = y;', options: { impliedStrict: true } },
    '[true = x] = x',
    '[(...)]',
    '(...)',
    '[...this, y] = foo;',
    '[{..}, x]',
    '[{..}, x]',
    '[{..}]',
    '[{..}.x]',
    '[{..}=x]',
    '[[async].await()] = x',
    '[[foo].food()] = x',
    '[[foo].food() = x] = x',
    '[[..][foo]] = x',
    '[[..].foo] = x',
    '[[..]=x]',
    '[[..].x]',
    '[[..], x]',
    '[[..]]',
    '([...x.y]) => z',
    '([...x.y] = z) => z',
    '[a, ...]',
    '[..., ]',
    '[a=5, b=7] = ([1]) = x;',
    '[a=5, b=7] = ([1]) => x;',
    '[a=5, b=7] = ([1]) => x;',
    '[(a=5, b=(x)) = y] = ([1]);',
    '[(a=5, b=(7))] = ([1]);',
    '[a=5, b=(7).c.(d)] = ([1])',
    '[a=5, b=(7).c.(d)[e]] = ([1]);',
    '([a] / ...bcd)',
    '([a], ...[bcd] = (x))',
    '([a], ...bcd = (x))',
    '([(({a.b.c[d]}), ({b = c / 2}))])',
    '([(({a[d]}), ({b = c / 2}))])',
    '([(({a}), ({b = c / 2}))])',
    '[..., ...]',
    '[ (...a)]',
    '[true = x]',
    '[this] = x',
    '[false] = x',
    '[false] = x',
    '[function(){}] = x',
    '[new x] = x',
    '[null] = x',
    '[true] = x',
    '[typeof x] = x',
    '[void x] = x',
    '[--x = 1]',
    '[...x += y] = a;',
    { code: '[await = x] = x', options: { sourceType: 'module' } },
    '[...a = 1 = a]',
    '[...1 = a]',
    '[this] = obj',
    '[x, ...y, z] = obj',
    '[x, y, ...z()] = obj',
    '[x, ...z = arr, y] = obj',
    '[x, ...z(), y] = obj',
    '[x, ...z + arr, y] = obj',
    '[...this] = obj',
    '[...true] = x',
    '[...true] => x',
    '[...new] = x',
    '[...new]',
    '[..."foo"=x] = x',
    '[...[a](1)=2] = 3',
    '[...[a](1)] = 3',
    '[...[a].1] = 3',
    '[...[1], "a"(b)] = x',
    '[...[1], ["a"](b)] = x',
    '[...]',
    '[..."x"=b]',
    '[...a=b] = x',
    '[..."foo".foo=x] = x',
    '[x, y, ...z = arr] = obj',
    '[x, y, ...z = arr] = x = obj',
    '[..."foo"+bar] = x',
    '[...[a](1)] = 3',
    '[...[x].map(y, z)] = a;',
    '[ ...([a] = []) = a;',
    '[ x += x ] = a;',
    '[...++x] = a;',
    '[...x--] = a;',
    '[...!x] = a;',
    '[...x + y] = a;',
    '[...z = 1] = a;',
    '[x, y, ...z = 1] = a;',
    '[...x,] = a;',
    '[x, ...y, z] = a;',
    '[async(x,y) => z] = a;',
    '[async x => z] = a;',
    '[--x = 1] = a;',
    '[this=x]',
    '[false=x]',
    '[true=x]',
    '[x()] = a;',
    '[this = 1] = a;',
    '[x--] = a;',
    '[--x = 1] = a;',
    '[[[[[[[a=b] = c]]] = c] = (c=d)] = c] = ({a = b}) = foo;',
    '[async x => z] = a;',
    '[x, y, ...[z] = [1]] = a;',
    '[...[z] = [1]] = a;',
    '[...rest, x] = x',
    '[a,b,...rest, x] = x',
    '[...rest,] = x',
    '[a,b,...rest,...rest1] = x',
    '[a,,..rest,...rest1]  = x ',
    '{...[ x = 5 ] }',
    '{...[x] } = x',
    '{...[ x = 5 ] }',
    '{...[ x = 5 ] }',
    '[x + y] = x',
    'x, [foo + y, bar] = doo',
    '[50] = a;',
    '[0,{a=0}] = 0',
    '[0] = 0',
    'x, [foo + y, bar] = zoo;',
    '[x[yield]]] = value;',
    '[[(x, y)]] = x;',
    '[...[(x, y)]] = x;',
    '[ ...[ ( [ a ] ) ] ] = a;',
    '[(foo())] = a;',
    '[ ([a]) ] = a;',
    '[ (++y) ] = a;',
    '([this]) => x;',
    '[break]',
    { code: '[implements]', options: { sourceType: 'module' } },
    '"use strict"; [implements]',
    'x, [foo + y, bar] = doo;',
    '[...{a: true} = c]',
    '[[[a.b =[{ x: x.b }]]]] = ([{ a = b / 2}])',
    '[[[a.b =[{ x: x.b = 123 }]a(b=c)]]]',
    '[(a.b.c.d = e) = ()]',
    'function foo() { [(a.b.c.d = e) = ()]}',
    '[() = ()]',
    '[(1) = (a = b)]',
    '[(1) = (a = b.c)]',
    '[([{ x = y }] = b.call(c)) = ()]',
    '[(a = b.call(c)) = ()]',
    '[(a = b.call(c)) = (a = b / 2)]',
    '[(a = async.call(c)) = (a = b / 2)]',
  ]);

  pass('Expressions - Array (pass)', [
    '[(x) = y = (z) => (a)]',
    '[.../x//yield]',
    'x, [foo, bar] = doo;',
    'x, [foo = y, bar] = doo',
    { code: 'function *f(){ return [...yield x]; }', options: { ranges: true } },
    { code: '"use strict"; const { [eval]: []} = a;', options: { ranges: true, raw: true } },
    { code: 'function *f(){ return [...yield]; }', options: { ranges: true } },
    { code: '[x = true] = y', options: { ranges: true } },

    '[[x] = true] = y',
    '[[x = true] = true] = y',
    '["foo".foo] = x',
    'result = [...{ x = yield }] = y;',
    '[/foo/.length] = x',
    'function* g() {   [...{ x = yield }] = y   }',
    '[...{x}=y];',
    '[(a)] = 1',
    '[x,] = 0',
    '[[x]] = 0',
    { code: '[...this];', options: { webcompat: true } },
    '[...x.list];',
    { code: '[...x.list] = a;', options: { ranges: true } },
    { code: '[, x,,] = 0', options: { ranges: true } },
    { code: '[...[x]] = 0', options: { ranges: true } },
    '[...{x = 1}] = [{}]',
    '[...[x]] = 0',
    '[x, ...{0: y}] = 0',
    '[x, x] = 0',
    '[(a)] = 0',
    '({x} = 0)',
    '[ x = "x" in {} ] = value;',
    'a = [ a = x += 1, b = x *= 2 ] = value;',
    '[{ x }] = [null];',
    '[{ x }] = [ , ];',
    'a = [{ x = yield }] = value;',
    'a = [[x[yield]]] = 123;',
    '[{ x }] = [];',
    'a = [{ x }] =  [{ x: 2 }];',
    'a = [x.y] = [123];',
    '[x, ...y] = [1, 2, 3];',
    '[, ...x] = [1, 2, 3];',
    'a = [x.y] = value;',
    'a = [ x[yield] ] = [33];',
    'a = [...[x, y]] = [null];',
    'a = [...[x]] = [ , ];',
    'a = [...{ 0: x, length }] = [undefined];',
    'a = [...x.y] = [4, 3, 2];',
    'a = [...[x[yield]]] = [2018];',
    'a = [...{ 0: x, length }] = value;',
    'a = [...{ 1: x }] = [1, 2, 3];',
    '[,] = null;',
    '[[x]] = [[1]];',
    'a = [ x = yield ] = [];',
    'result = [, x, , y, ,] = [1, 2, 3, 4, 5, 6];',
    'a = [ x = flag = true ] = [];',
    'a = [ a = x += 1, b = x *= 2 ] = [];',
    'a = [arguments = 4, eval = 5] = value;',
    '[a,b=0,[c,...a[0]]={}]=0',
    '[a,a,,...a]=0;',
    '[{a=b}=0]',
    '[a = 0, ...{b = 0}] = 0',
    '[{a=0}, ...b] = 0',
    '[x[a]=a] = 0',
    '[x.a=a] = 0',
    '[{a=0},{a=0}] = 0',
    '[...[...a[x]]] = 1',
    'for([a,b[a],{c,d=e,[f]:[g,h().a,(0).k,...i[0]]}] in 0);',
    '[[[[[[[[[[[[[[[[[[[[{a=b[0]}]]]]]]]]]]]]]]]]]]]]=0;',
    '[ { x = 10 } = {} ]',
    '[ { x : foo()[y] = 10 } = {} ]',
    '[ [ foo().x = 10 ] = {} ]',
    '[x, y, ...z = 1]',
    '[...z = 1]',
    'function x([ a, b ]){}',
    'function a([x, , [, z]]) {}',
    '[a,,b] = array;',
    '[x = 10, y, z] = a;',
    '[ok.v] = 20;',
    '([y]) => x;',
    '[{a = 0}] = [{}];',
    '[{a = 0}] = [{}];',
    'function f([...[{a = 0}]]) {}',
    'h = ([...[{a = 0}]]) => {};',
    'function f1({a} = {a:1}, b, [c] = [2]) {}',
    '[arguments] = []',
    '[...{a}] = [{}];',
    '[{x : [{y:{z = 1}, z1 = 2}] }, {x2 = 3}, {x3 : {y3:[{z3 = 4}]}} ] = [{x:[{y:{}}]}, {}, {x3:{y3:[{}]}}];',
    '[[ x ]] = [ , ];',
    '[[ x ]] = [undefined];',
    '[[ x ]] = [null];',
    '[...[a] = 1]',
    '[...[ x = 5 ] ] = x',
    'function foo([x] = [1]) {}',
    'function foo([x = 1] = [2]) {}',
    '[.../x/]',
    '[.../x/+y]',
    '[.../x//y]',
    '[.../x/g/y]',
    'function foo([{y1:y1 = 1} = {y1:2}] = [{y1:3}]) {}',
    '[...[...[...a]]] = [[[]]];',
    'x; [{ x = 10 } = {}]',
    '[...[a].b1] = 3',
    '[ { x : foo().y } ] = x',
    '[ { x : foo()[y] } ] = x',
    '[ { x : x.y } ] = x',
    '[ [ x ] ] = x',
    '[ [ foo().x ] ] = x',
    '[ [ foo()[x] ] ] = x',
    '[ [ x.y ] ] = x',
    '[ [ x[y] ] ] = x',
    '[ x = 10 ] = x',
    '[ foo().x = 10 ] = x',
    '[ foo()[x] = 10 ] = x',
    '[ x.y = 10 ] = x',
    '[ x[y] = 10 ] = x',
    '[ { x = 10 } = {} ] = x',
    '[ { x : y = 10 } = {} ] = x',
    '[ { x : foo().y = 10 } = {} ] = x',
    '[ { x : foo()[y] = 10 } = {} ] = x',
    '[ [ x = 10 ] = {} ] = x',
    '[[y] = /a/ ]',
    '[{y} = /a/ ]',
    '[ [ foo()[x] = 10 ] = {} ] = x',
    '[ [ x.y = 10 ] = {} ] = x',
    '[x,y,z] = x',
    '[x, y = 42, z] = x',
    '[{x:x = 1, y:y = 2}, [z = 3, z = 4, z = 5]] = x',
    '[(x)] = x',
    '[((x, y) => z).x] = x',
    '[((x, y) => z)["x"]] = x',
    '[ ...(a) ] = x',
    '[ ...(foo.bar) ] = x',
    '[ (foo.bar) ] = x',
    '[ (foo["bar"]) ] = x',
    '[[].length] = x',
    '[[x].length] = x',
    '[{}.length] = x',
    '[{x: y}.length] = x',
    '[...true]',
    '[..."f".toString()]',
    '[...50]',
    '[..."foo"]',
    '[..."foo".bar]',
    '[...(x)]',
    '[...(x,y)]',
    '[..."x".y]',
    '(x|y)^y',
    '[...{a = b}] = x',
    '[..."x" + y]',
    '[[ x ]] = [];',
    '[]',
    '[1,2,3,4,5]',
    '[,]',
    '[,a,]',
    '[a,,,,,,,,,b]',
    '[[[[z++]]]]',
    'array[1] === 2',
    '[1, 2, 3, ...[]]',
    '[1, 2, ...target = source]',
    '[5, ...[6, 7, 8], 9]',
    '[x]',
    '[() => {}]',
    '[abc => {}]',
    '[,,]',
    '[x,,,]',
    '[x,,y]',
    '[this];',
    '[,,,]',
    '[,,x]',
    '[this];',
    '[x, y, ...z]',
    '[x.y] = z',
    '[x().y] = z',
    '[a[x.y]] = z',
    '[x()[y]] = z',
    '[x.y = a] = z',
    '[x().y = a] = z',
    '[a[x.y] = a] = z',
    '[x()[y] = a ] = z',
    '[x.y = a + b] = z',
    '[x().y = a + b] = z',
    '[a[x.y] = a + b] = z',
    '[x()[y] = a + b] = z',
    '[function(){}.length] = x',
    '[5..length] = x',
    '["X".length] = x',
    '[{}.x] = y',
    '[{}[x]] = y',
    '[x, y, ...z]',
    ' [...target = source]',
    '[x, ...y, z]',
    '[x, y, ...z = arr]',
    '[x, y, ...z()]',
    '[x, y, ...z + arr]',
    '[x, ...z = arr, y]',
    '[x, ...z(), y]',
    '[x, ...z + arr, y]',
    '[foo = A] = arr;',
    '[foo, bar] = arr;',
    '[foo = A, bar = B] = arr;',
    '[foo, [x,y,z], bar = B] = arr;',
    '[foo, [[[[[[[[[[[[[x,y,z]]]]]]]]]]]]], bar = B] = arr;',
    '[foo, [x,y = 20,z], bar = B] = arr;',
    'foo([a, b] = arr);',
    '[...x.list];',
    '[...x.list] = a;',
    '[...x = y];',
    { code: '[...x += y];', options: { ranges: true } },
    { code: '[...[x].map(y, z)];', options: { ranges: true } },
    { code: '[...[x].map(y, z)[x]] = a;', options: { ranges: true } },
    { code: 'x, [foo, bar] = doo', options: { ranges: true } },
    { code: 'x, [foo = y, bar] = doo', options: { ranges: true } },
    { code: 'x = [a, b] = y', options: { ranges: true } },
    { code: '[a, b] = c = d', options: { ranges: true } },
    { code: '[[foo].length] = x', options: { ranges: true } },
    { code: '[x, y]', options: { ranges: true } },
    { code: '[x = y]', options: { ranges: true } },
    { code: '[x.y]', options: { ranges: true } },
    '[]',
    '[,]',
    '[,,]',
    '[x,]',
    { code: '[x,,,]', options: { ranges: true } },
    '[x,,y]',
    { code: '[foo = A] = arr;', options: { ranges: true } },
    { code: '[foo, bar] = arr;', options: { ranges: true } },
    { code: '[foo = A, bar = B] = arr;', options: { ranges: true } },
    { code: '[x &= 42]', options: { ranges: true, raw: true } },
    '[a = 2]',
    { code: '[await = x] = x', options: { ranges: true } },
    '[await = x]',
    { code: '["x".foo]=x', options: { ranges: true, raw: true } },
    { code: '[x.y = z]', options: { ranges: true } },
    { code: '[a,b=[x,y]] = z', options: { ranges: true } },
    '(foo, [bar, baz] = doo);',
    { code: '[a, {b:d}, c] = obj', options: { ranges: true } },
    { code: '[a, {[b]:d}, c] = obj', options: { ranges: true } },
    { code: '[please, {[make]: it}, stop] = bwahahahaha', options: { ranges: true } },
    { code: '[pweeze = [pretty] = please, {[make]: it}, stop] = bwahahahaha', options: { ranges: true } },
    { code: 'log({foo: [bar]});', options: { ranges: true } },
    { code: 'log({foo: [bar]} = obj);', options: { ranges: true } },
    { code: '[...{a = b} = c];', options: { ranges: true } },
    { code: '[a, {b}, c] = obj', options: { ranges: true } },
    { code: '[z++]', options: { ranges: true } },
  ]);
});
