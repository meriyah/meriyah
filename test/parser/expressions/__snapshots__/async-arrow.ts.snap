// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > "(async()["foo21"] () => 1) 1`] = `
"SyntaxError [1:11-1:16]: Unexpected token: 'identifier'
> 1 | "(async()["foo21"] () => 1)
    |            ^^^^^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > "use strict"; async(x = await) => {  } 1`] = `
"SyntaxError [1:31-1:33]: Await expression not allowed in formal parameter
> 1 | "use strict"; async(x = await) => {  }
    |                                ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > 'use strict'; async (yield) => X 1`] = `
"SyntaxError [1:21-1:26]: 'yield' may not be used as an identifier in this context
> 1 | 'use strict'; async (yield) => X
    |                      ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > 'use strict'; async X => yield 1`] = `
"SyntaxError [1:25-1:30]: 'yield' may not be used as an identifier in this context
> 1 | 'use strict'; async X => yield
    |                          ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > 'use strict'; async yield => X 1`] = `
"SyntaxError [1:20-1:25]: Yield expression not allowed in formal parameter
> 1 | 'use strict'; async yield => X
    |                     ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > () => {1} ? a : b 1`] = `
"SyntaxError [1:10-1:11]: Block body arrows can not be immediately accessed without a group
> 1 | () => {1} ? a : b
    |           ^ Block body arrows can not be immediately accessed without a group"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (...a, b) => { let a; } 1`] = `
"SyntaxError [1:5-1:6]: Invalid rest argument
> 1 | (...a, b) => { let a; }
    |      ^ Invalid rest argument"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (...await) => {} 1`] = `
"SyntaxError [1:4-1:9]: Can not use \`await\` as identifier in module or async func
> 1 | (...await) => {}
    |     ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ([x].foo) => x 1`] = `
"SyntaxError [1:10-1:12]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([x].foo) => x
    |           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({ async
f(){} }) 1`] = `
"SyntaxError [2:0-2:1]: Async methods are a restricted production and cannot have a newline following it
  1 | ({ async
> 2 | f(){} })
    | ^ Async methods are a restricted production and cannot have a newline following it"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({ async get a(){} }) 1`] = `
"SyntaxError [1:13-1:14]: Expected '('
> 1 | ({ async get a(){} })
    |              ^ Expected '('"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({ async get a(){} }) 2`] = `
"SyntaxError [1:13-1:14]: Expected '('
> 1 | ({ async get a(){} })
    |              ^ Expected '('"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({async foo() { return {await} }}) 1`] = `
"SyntaxError [1:29-1:30]: Can not use \`await\` as identifier in module or async func
> 1 | ({async foo() { return {await} }})
    |                              ^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({async foo() { var await }}) 1`] = `
"SyntaxError [1:20-1:25]: cannot use "await" as identifier inside an async function
> 1 | ({async foo() { var await }})
    |                     ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({async foo(await) { }}) 1`] = `
"SyntaxError [1:12-1:17]: cannot use "await" as identifier inside an async function
> 1 | ({async foo(await) { }})
    |             ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({async get foo() { }}) 1`] = `
"SyntaxError [1:12-1:15]: Expected '('
> 1 | ({async get foo() { }})
    |             ^^^ Expected '('"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > ({async set foo(value) { }}) 1`] = `
"SyntaxError [1:12-1:15]: Expected '('
> 1 | ({async set foo(value) { }})
    |             ^^^ Expected '('"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a = (...await) => {}) => {} 1`] = `
"SyntaxError [1:9-1:14]: Can not use \`await\` as identifier in module or async func
> 1 | (a = (...await) => {}) => {}
    |          ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a = (b, ...await) => {}) => {} 1`] = `
"SyntaxError [1:12-1:17]: Can not use \`await\` as identifier in module or async func
> 1 | (a = (b, ...await) => {}) => {}
    |             ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a = async(...await) => {}) => {} 1`] = `
"SyntaxError [1:21-1:23]: Await expression not allowed in formal parameter
> 1 | (a = async(...await) => {}) => {}
    |                      ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a = async(...await) => {}) => {} 2`] = `
"SyntaxError [1:21-1:23]: Await expression not allowed in formal parameter
> 1 | (a = async(...await) => {}) => {}
    |                      ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a = async(b = await/r/g) => {}) => {} 1`] = `
"SyntaxError [1:20-1:24]: Expected ')'
> 1 | (a = async(b = await/r/g) => {}) => {}
    |                     ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a = async(b, ...await) => {}) => {} 1`] = `
"SyntaxError [1:24-1:26]: Await expression not allowed in formal parameter
> 1 | (a = async(b, ...await) => {}) => {}
    |                         ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a, ...await) => {} 1`] = `
"SyntaxError [1:7-1:12]: Can not use \`await\` as identifier in module or async func
> 1 | (a, ...await) => {}
    |        ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (a, async (a) => 0) => 0 1`] = `
"SyntaxError [1:20-1:22]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, async (a) => 0) => 0
    |                     ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async 
 => async) 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | (async 
> 2 |  => async)
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async (...a,) => {} 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | (async (...a,) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async (...x = []) => {}); 1`] = `
"SyntaxError [1:19-1:21]: Invalid left-hand side in async arrow
> 1 | (async (...x = []) => {});
    |                    ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async (x) => {}) /= 1 1`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in assignment
> 1 | (async (x) => {}) /= 1
    |                   ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function foo3() { } () => 1) 1`] = `
"SyntaxError [1:30-1:32]: Expected ')'
> 1 | (async function foo3() { } () => 1)
    |                               ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function foo4() { } => 1) 1`] = `
"SyntaxError [1:27-1:29]: Expected ')'
> 1 | (async function foo4() { } => 1)
    |                            ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function foo4() { } => 1) 2`] = `
"SyntaxError [1:27-1:29]: Expected ')'
> 1 | (async function foo4() { } => 1)
    |                            ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function() { } () => 1) 1`] = `
"SyntaxError [1:25-1:27]: Expected ')'
> 1 | (async function() { } () => 1)
    |                          ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function() { } () => 1) 2`] = `
"SyntaxError [1:25-1:27]: Expected ')'
> 1 | (async function() { } () => 1)
    |                          ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function() { } => 1) 1`] = `
"SyntaxError [1:22-1:24]: Expected ')'
> 1 | (async function() { } => 1)
    |                       ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function() { } foo5 => 1) 1`] = `
"SyntaxError [1:22-1:26]: Expected ')'
> 1 | (async function() { } foo5 => 1)
    |                       ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async function() { } foo5 => 1) 2`] = `
"SyntaxError [1:22-1:26]: Expected ')'
> 1 | (async function() { } foo5 => 1)
    |                       ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async((a), ...(b) = xxx) => x) 1`] = `
"SyntaxError [1:12-1:15]: Unexpected token: '...'
> 1 | (async((a), ...(b) = xxx) => x)
    |             ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async((a), ...(b)) => x) 1`] = `
"SyntaxError [1:12-1:15]: Unexpected token: '...'
> 1 | (async((a), ...(b)) => x)
    |             ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async((a), ...[b] = xxx) => x) 1`] = `
"SyntaxError [1:12-1:15]: Unexpected token: '...'
> 1 | (async((a), ...[b] = xxx) => x)
    |             ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async((a), ...{b} = xxx) => x) 1`] = `
"SyntaxError [1:12-1:15]: Unexpected token: '...'
> 1 | (async((a), ...{b} = xxx) => x)
    |             ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async((a), ...{b} = xxx)) 1`] = `
"SyntaxError [1:12-1:15]: Unexpected token: '...'
> 1 | (async((a), ...{b} = xxx))
    |             ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async().foo10 => 1) 1`] = `
"SyntaxError [1:15-1:17]: Expected ')'
> 1 | (async().foo10 => 1)
    |                ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async().foo13 () => 1) 1`] = `
"SyntaxError [1:18-1:20]: Expected ')'
> 1 | (async().foo13 () => 1)
    |                   ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async().foo13 () => 1) 2`] = `
"SyntaxError [1:18-1:20]: Expected ')'
> 1 | (async().foo13 () => 1)
    |                   ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async()["foo18"] => 1) 1`] = `
"SyntaxError [1:18-1:20]: Expected ')'
> 1 | (async()["foo18"] => 1)
    |                   ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async()["foo18"] => 1) 2`] = `
"SyntaxError [1:18-1:20]: Expected ')'
> 1 | (async()["foo18"] => 1)
    |                   ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async()["foo19"] foo20 => 1) 1`] = `
"SyntaxError [1:18-1:23]: Expected ')'
> 1 | (async()["foo19"] foo20 => 1)
    |                   ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async(...a, ...b) => x) 1`] = `
"SyntaxError [1:19-1:21]: Invalid left-hand side in async arrow
> 1 | (async(...a, ...b) => x)
    |                    ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async(...b = y, ...d) => x) 1`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | (async(...b = y, ...d) => x)
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async(...b = y, d) => x) 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | (async(...b = y, d) => x)
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async(a, ...(b)) => x) 1`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | (async(a, ...(b)) => x)
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async(a, ...b = y) => x) 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | (async(a, ...b = y) => x)
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async.foo6 => 1) 1`] = `
"SyntaxError [1:12-1:14]: Expected ')'
> 1 | (async.foo6 => 1)
    |             ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async.foo7 foo8 => 1) 1`] = `
"SyntaxError [1:12-1:16]: Expected ')'
> 1 | (async.foo7 foo8 => 1)
    |             ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async.foo9 () => 1) 1`] = `
"SyntaxError [1:15-1:17]: Expected ')'
> 1 | (async.foo9 () => 1)
    |                ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async["foo14"] => 1) 1`] = `
"SyntaxError [1:16-1:18]: Expected ')'
> 1 | (async["foo14"] => 1)
    |                 ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async["foo15"] foo16 => 1) 1`] = `
"SyntaxError [1:16-1:21]: Expected ')'
> 1 | (async["foo15"] foo16 => 1)
    |                 ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async["foo15"] foo16 => 1) 2`] = `
"SyntaxError [1:16-1:21]: Expected ')'
> 1 | (async["foo15"] foo16 => 1)
    |                 ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async["foo15"] foo16 => 1) 3`] = `
"SyntaxError [1:16-1:21]: Expected ')'
> 1 | (async["foo15"] foo16 => 1)
    |                 ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async["foo17"] () => 1) 1`] = `
"SyntaxError [1:19-1:21]: Expected ')'
> 1 | (async["foo17"] () => 1)
    |                    ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo22\` => 1) 1`] = `
"SyntaxError [1:14-1:16]: Expected ')'
> 1 | (async\`foo22\` => 1)
    |               ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo23\` foo24 => 1) 1`] = `
"SyntaxError [1:14-1:19]: Expected ')'
> 1 | (async\`foo23\` foo24 => 1)
    |               ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo25\` () => 1) 1`] = `
"SyntaxError [1:17-1:19]: Expected ')'
> 1 | (async\`foo25\` () => 1)
    |                  ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo26\`.bar27 => 1) 1`] = `
"SyntaxError [1:20-1:22]: Expected ')'
> 1 | (async\`foo26\`.bar27 => 1)
    |                     ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo28\`.bar29 foo30 => 1) 1`] = `
"SyntaxError [1:20-1:25]: Expected ')'
> 1 | (async\`foo28\`.bar29 foo30 => 1)
    |                     ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo28\`.bar29 foo30 => 1) 2`] = `
"SyntaxError [1:20-1:25]: Expected ')'
> 1 | (async\`foo28\`.bar29 foo30 => 1)
    |                     ^^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo31\`.bar32 () => 1) 1`] = `
"SyntaxError [1:23-1:25]: Expected ')'
> 1 | (async\`foo31\`.bar32 () => 1)
    |                        ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (async\`foo31\`.bar32 () => 1) 2`] = `
"SyntaxError [1:23-1:25]: Expected ')'
> 1 | (async\`foo31\`.bar32 () => 1)
    |                        ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > (class { async get a(){} }) 1`] = `
"SyntaxError [1:19-1:20]: Unexpected token: 'identifier'
> 1 | (class { async get a(){} })
    |                    ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > [async 
 () => x] 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | [async 
> 2 |  () => x]
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > \\u0061sync () => {} 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | \\u0061sync () => {}
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > a + async () => {} 1`] = `
"SyntaxError [1:13-1:15]: \`=>\` is an invalid assignment target
> 1 | a + async () => {}
    |              ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > a + async b => {} 1`] = `
"SyntaxError [1:12-1:14]: \`=>\` is an invalid assignment target
> 1 | a + async b => {}
    |             ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > a = (b = await/r/g) => {}) => {} 1`] = `
"SyntaxError [1:14-1:18]: Expected ')'
> 1 | a = (b = await/r/g) => {}) => {}
    |               ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > a.x => {}; 1`] = `
"SyntaxError [1:4-1:6]: Unexpected token: '=>'
> 1 | a.x => {};
    |     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async
(a, b) => {} 1`] = `
"SyntaxError [2:7-2:9]: No line break is allowed after '=>'
  1 | async
> 2 | (a, b) => {}
    |        ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 () 
 => {} 1`] = `
"SyntaxError [3:1-3:3]: No line break is allowed after '=>'
  1 | async 
  2 |  () 
> 3 |  => {}
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 () 
 => {} 2`] = `
"SyntaxError [3:1-3:3]: No line break is allowed after '=>'
  1 | async 
  2 |  () 
> 3 |  => {}
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 () => {} 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | async 
> 2 |  () => {}
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 () => {} 2`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | async 
> 2 |  () => {}
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 (x) 
 => x 1`] = `
"SyntaxError [3:1-3:3]: No line break is allowed after '=>'
  1 | async 
  2 |  (x) 
> 3 |  => x
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 (x) => x 1`] = `
"SyntaxError [2:5-2:7]: No line break is allowed after '=>'
  1 | async 
> 2 |  (x) => x
    |      ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 => async 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async 
> 2 |  => async
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 
 x 
 => x 1`] = `
"SyntaxError [3:1-3:3]: No line break is allowed after '=>'
  1 | async 
  2 |  x 
> 3 |  => x
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async  ...x => x; 1`] = `
"SyntaxError [1:7-1:10]: Unexpected token: '...'
> 1 | async  ...x => x;
    |        ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async "a" => {} 1`] = `
"SyntaxError [1:6-1:9]: Unexpected token: 'string'
> 1 | async "a" => {}
    |       ^^^ Unexpected token: 'string'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async "use strict"; (a) => 00; 1`] = `
"SyntaxError [1:6-1:18]: Unexpected token: 'string'
> 1 | async "use strict"; (a) => 00;
    |       ^^^^^^^^^^^^ Unexpected token: 'string'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ("a") => {} 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async ("a") => {}
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ("a", b) => {} 1`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async ("a", b) => {}
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ("a", b) => {} 2`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async ("a", b) => {}
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (()) => 0 1`] = `
"SyntaxError [1:9-1:10]: Expected '=>'
> 1 | async (()) => 0
    |          ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (()) => 0 2`] = `
"SyntaxError [1:9-1:10]: Expected '=>'
> 1 | async (()) => 0
    |          ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((a)) => {} 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async ((a)) => {}
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((a)) => {} 2`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async ((a)) => {}
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((x)) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async ((x)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((x)) => a 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async ((x)) => a
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((x, y)) => 0 1`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async ((x, y)) => 0
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((x, y)) => 0 2`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async ((x, y)) => 0
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((x, y), z) => 0 1`] = `
"SyntaxError [1:18-1:20]: Unexpected token: '=>'
> 1 | async ((x, y), z) => 0
    |                   ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ((x, y, z)) => 0 1`] = `
"SyntaxError [1:18-1:20]: Unexpected token: '=>'
> 1 | async ((x, y, z)) => 0
    |                   ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async () 
 => {} 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async () 
> 2 |  => {}
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async () 
 => {} 2`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async () 
> 2 |  => {}
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async () => { await => { }; } 1`] = `
"SyntaxError [1:14-1:26]: cannot use "await" as identifier inside an async function
> 1 | async () => { await => { }; }
    |               ^^^^^^^^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async () => {'value': 42} 1`] = `
"SyntaxError [1:20-1:21]: Unexpected token: ':'
> 1 | async () => {'value': 42}
    |                     ^ Unexpected token: ':'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async () => {1} ? a : b 1`] = `
"SyntaxError [1:16-1:17]: Block body arrows can not be immediately accessed without a group
> 1 | async () => {1} ? a : b
    |                 ^ Block body arrows can not be immediately accessed without a group"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ()c++=>{}; 1`] = `
"SyntaxError [1:8-1:9]: Unexpected token: 'identifier'
> 1 | async ()c++=>{};
    |         ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (,) => b; 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: ','
> 1 | async (,) => b;
    |        ^ Unexpected token: ','"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a = b) => b 1`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in async arrow
> 1 | async (...a = b) => b
    |                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a = b) => b 2`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in async arrow
> 1 | async (...a = b) => b
    |                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a)?c:d=>{}=>{} 1`] = `
"SyntaxError [1:20-1:22]: Unexpected token: '=>'
> 1 | async (...a)?c:d=>{}=>{}
    |                     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a)[1]=>{}; 1`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async (...a)[1]=>{};
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a,) => {} 1`] = `
"SyntaxError [1:14-1:16]: Invalid left-hand side in async arrow
> 1 | async (...a,) => {}
    |               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a,) => {} 2`] = `
"SyntaxError [1:14-1:16]: Invalid left-hand side in async arrow
> 1 | async (...a,) => {}
    |               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...a,) => {} 3`] = `
"SyntaxError [1:14-1:16]: Invalid left-hand side in async arrow
> 1 | async (...a,) => {}
    |               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...await) => 1 1`] = `
"SyntaxError [1:17-1:19]: Await expression not allowed in formal parameter
> 1 | async (...await) => 1
    |                  ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...rest - a) => b 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | async (...rest - a) => b
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...x = []) => {} 1`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | async (...x = []) => {}
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (...x = []) => {} 2`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | async (...x = []) => {}
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (..a, ...b) => c 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: '.'
> 1 | async (..a, ...b) => c
    |        ^ Unexpected token: '.'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (/foo/) => bar 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | async (/foo/) => bar
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([...[ x ] = []] = []) => {}; 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | async ([...[ x ] = []] = []) => {};
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([...{ x }, y]) => {}; 1`] = `
"SyntaxError [1:22-1:24]: Invalid left-hand side in async arrow
> 1 | async ([...{ x }, y]) => {};
    |                       ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([...{ x }, y]) => {}; 2`] = `
"SyntaxError [1:22-1:24]: Invalid left-hand side in async arrow
> 1 | async ([...{ x }, y]) => {};
    |                       ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([...await]) => 1 1`] = `
"SyntaxError [1:19-1:21]: Await expression not allowed in formal parameter
> 1 | async ([...await]) => 1
    |                    ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{"foo": y.z} = a]) => b 1`] = `
"SyntaxError [1:27-1:29]: Invalid left-hand side in async arrow
> 1 | async ([{"foo": y.z} = a]) => b
    |                            ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{"foo": y.z}]) => b 1`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{"foo": y.z}]) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z} = a]) => b 1`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z} = a]) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z} = a]) => b 2`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z} = a]) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z}] = a) => b 1`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z}] = a) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z}] = a) => b 2`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z}] = a) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z}] = a) => b 3`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z}] = a) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z}] = a) => b 4`] = `
"SyntaxError [1:23-1:25]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z}] = a) => b
    |                        ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z}]) => b 1`] = `
"SyntaxError [1:19-1:21]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z}]) => b
    |                    ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([{x: y.z}]) => b 2`] = `
"SyntaxError [1:19-1:21]: Invalid left-hand side in async arrow
> 1 | async ([{x: y.z}]) => b
    |                    ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([0])=>0; 1`] = `
"SyntaxError [1:11-1:13]: Invalid left-hand side in async arrow
> 1 | async ([0])=>0;
    |            ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([a=await 1]) => 1 1`] = `
"SyntaxError [1:16-1:17]: Expected ']'
> 1 | async ([a=await 1]) => 1
    |                 ^ Expected ']'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([a=await]) => 1 1`] = `
"SyntaxError [1:18-1:20]: Await expression not allowed in formal parameter
> 1 | async ([a=await]) => 1
    |                   ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([await]) => 1 1`] = `
"SyntaxError [1:16-1:18]: Await expression not allowed in formal parameter
> 1 | async ([await]) => 1
    |                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([await]) => 1 2`] = `
"SyntaxError [1:16-1:18]: Await expression not allowed in formal parameter
> 1 | async ([await]) => 1
    |                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([x.y]=z) => z 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in async arrow
> 1 | async ([x.y]=z) => z
    |                 ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ([x].foo) => x 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in async arrow
> 1 | async ([x].foo) => x
    |                 ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({"foo": y.z} = a) => b 1`] = `
"SyntaxError [1:25-1:27]: Invalid left-hand side in async arrow
> 1 | async ({"foo": y.z} = a) => b
    |                          ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({...[a, b]}) => x 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | async ({...[a, b]}) => x
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({...{a, b}}) => x 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | async ({...{a, b}}) => x
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({0})=>0; 1`] = `
"SyntaxError [1:9-1:10]: Object literal keys that are strings or numbers must be a method or have a colon
> 1 | async ({0})=>0;
    |          ^ Object literal keys that are strings or numbers must be a method or have a colon"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({a: await}) => 1 1`] = `
"SyntaxError [1:19-1:21]: Await expression not allowed in formal parameter
> 1 | async ({a: await}) => 1
    |                    ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({a:b[0]}) => x 1`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in async arrow
> 1 | async ({a:b[0]}) => x
    |                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({a=await 1}) => 1 1`] = `
"SyntaxError [1:16-1:17]: Expected '}'
> 1 | async ({a=await 1}) => 1
    |                 ^ Expected '}'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({a=await}) => 1 1`] = `
"SyntaxError [1:18-1:20]: Await expression not allowed in formal parameter
> 1 | async ({a=await}) => 1
    |                   ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({await}) => 1 1`] = `
"SyntaxError [1:16-1:18]: Await expression not allowed in formal parameter
> 1 | async ({await}) => 1
    |                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({await}) => 1 2`] = `
"SyntaxError [1:13-1:14]: Can not use \`await\` as identifier in module or async func
> 1 | async ({await}) => 1
    |              ^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({await}) => 1 3`] = `
"SyntaxError [1:16-1:18]: Await expression not allowed in formal parameter
> 1 | async ({await}) => 1
    |                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: {x: y}.length})  => {} 1`] = `
"SyntaxError [1:28-1:30]: Invalid left-hand side in async arrow
> 1 | async ({x: {x: y}.length})  => {}
    |                             ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: async ()=>x})  => {} 1`] = `
"SyntaxError [1:26-1:28]: Invalid left-hand side in async arrow
> 1 | async ({x: async ()=>x})  => {}
    |                           ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: function(){}})  => {} 1`] = `
"SyntaxError [1:27-1:29]: Invalid left-hand side in async arrow
> 1 | async ({x: function(){}})  => {}
    |                            ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: this})  => {} 1`] = `
"SyntaxError [1:19-1:21]: Invalid left-hand side in async arrow
> 1 | async ({x: this})  => {}
    |                    ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: void x})  => {} 1`] = `
"SyntaxError [1:21-1:23]: Invalid left-hand side in async arrow
> 1 | async ({x: void x})  => {}
    |                      ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: x + y})  => {} 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | async ({x: x + y})  => {}
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ({x: y.z} = a) => b 1`] = `
"SyntaxError [1:21-1:23]: Invalid left-hand side in async arrow
> 1 | async ({x: y.z} = a) => b
    |                      ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (-a) => {} 1`] = `
"SyntaxError [1:11-1:13]: Unexpected token: '=>'
> 1 | async (-a) => {}
    |            ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (-a, b) => {} 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | async (-a, b) => {}
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (1) => {} 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | async (1) => {}
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (1) => {} 2`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | async (1) => {}
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (1) => {}() 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | async (1) => {}()
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (1) => {}() 2`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | async (1) => {}()
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (10) => 0; 1`] = `
"SyntaxError [1:11-1:13]: Unexpected token: '=>'
> 1 | async (10) => 0;
    |            ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (32) => {} 1`] = `
"SyntaxError [1:11-1:13]: Unexpected token: '=>'
> 1 | async (32) => {}
    |            ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a + b) => {} 1`] = `
"SyntaxError [1:14-1:16]: Invalid left-hand side in async arrow
> 1 | async (a + b) => {}
    |               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a + b, c) => {} 1`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in async arrow
> 1 | async (a + b, c) => {}
    |                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a = (await) => {}) => {} 1`] = `
"SyntaxError [1:26-1:28]: Await expression not allowed in formal parameter
> 1 | async (a = (await) => {}) => {}
    |                           ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a = await => {}) => {} 1`] = `
"SyntaxError [1:24-1:26]: Await expression not allowed in formal parameter
> 1 | async (a = await => {}) => {}
    |                         ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a++) => {} 1`] = `
"SyntaxError [1:12-1:14]: Invalid left-hand side in async arrow
> 1 | async (a++) => {}
    |             ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a++, b) => {} 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async (a++, b) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, "b") => {} 1`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async (a, "b") => {}
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, "b") => {} 2`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | async (a, "b") => {}
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, ...b - 10) => b 1`] = `
"SyntaxError [1:21-1:23]: Invalid left-hand side in async arrow
> 1 | async (a, ...b - 10) => b
    |                      ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, ...b, ...c) => {} 1`] = `
"SyntaxError [1:22-1:24]: Invalid left-hand side in async arrow
> 1 | async (a, ...b, ...c) => {}
    |                       ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, ...b, ...c) => {} 2`] = `
"SyntaxError [1:22-1:24]: Invalid left-hand side in async arrow
> 1 | async (a, ...b, ...c) => {}
    |                       ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, -b) => {} 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | async (a, -b) => {}
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, 32) => {} 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | async (a, 32) => {}
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, async (1) => 0) 1`] = `
"SyntaxError [1:20-1:22]: Expected ')'
> 1 | async (a, async (1) => 0)
    |                     ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, async (async (a) => 0) => 0) 1`] = `
"SyntaxError [1:33-1:35]: Invalid left-hand side in async arrow
> 1 | async (a, async (async (a) => 0) => 0)
    |                                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, await) => { } 1`] = `
"SyntaxError [1:17-1:19]: Await expression not allowed in formal parameter
> 1 | async (a, await) => { }
    |                  ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, b = await 1) => {} 1`] = `
"SyntaxError [1:20-1:21]: Expected ')'
> 1 | async (a, b = await 1) => {}
    |                     ^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, b = await 1) => {} 2`] = `
"SyntaxError [1:20-1:21]: Expected ')'
> 1 | async (a, b = await 1) => {}
    |                     ^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, b - c) => {} 1`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in async arrow
> 1 | async (a, b - c) => {}
    |                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, b++) => {} 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async (a, b++) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, foo ? bar : baz) => {} 1`] = `
"SyntaxError [1:27-1:29]: Invalid left-hand side in async arrow
> 1 | async (a, foo ? bar : baz) => {}
    |                            ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a, if) => {} 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: 'if'
> 1 | async (a, if) => {}
    |           ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a,...b)[c]=>{}; 1`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async (a,...b)[c]=>{};
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a,...b)\`\${c}template-tail\`=>{} 1`] = `
"SyntaxError [1:33-1:35]: Unexpected token: '=>'
> 1 | async (a,...b)\`\${c}template-tail\`=>{}
    |                                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a,...b)\`\${c}template-tail\`=>{}; 1`] = `
"SyntaxError [1:33-1:35]: Unexpected token: '=>'
> 1 | async (a,...b)\`\${c}template-tail\`=>{};
    |                                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a,...b)\`template-head\${c}\`=>{} 1`] = `
"SyntaxError [1:33-1:35]: Unexpected token: '=>'
> 1 | async (a,...b)\`template-head\${c}\`=>{}
    |                                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a.b, c) => {} 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async (a.b, c) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a=await 1) => 1 1`] = `
"SyntaxError [1:15-1:16]: Expected ')'
> 1 | async (a=await 1) => 1
    |                ^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a=await) => 1 1`] = `
"SyntaxError [1:16-1:18]: Await expression not allowed in formal parameter
> 1 | async (a=await) => 1
    |                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a['b'], c) => {} 1`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | async (a['b'], c) => {}
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (a['b'], c) => {} 2`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | async (a['b'], c) => {}
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (async ()  => a)  => a 1`] = `
"SyntaxError [1:24-1:26]: Invalid left-hand side in async arrow
> 1 | async (async ()  => a)  => a
    |                         ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (await) => 1 1`] = `
"SyntaxError [1:14-1:16]: Await expression not allowed in formal parameter
> 1 | async (await) => 1
    |               ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (await) => 1 2`] = `
"SyntaxError [1:14-1:16]: Await expression not allowed in formal parameter
> 1 | async (await) => 1
    |               ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (await, b = async () => {}) => 1 1`] = `
"SyntaxError [1:34-1:36]: Await expression not allowed in formal parameter
> 1 | async (await, b = async () => {}) => 1
    |                                   ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (await, b = async () => {}) => 1 2`] = `
"SyntaxError [1:34-1:36]: Await expression not allowed in formal parameter
> 1 | async (await, b = async () => {}) => 1
    |                                   ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (await, b = async()) => 2 1`] = `
"SyntaxError [1:27-1:29]: Await expression not allowed in formal parameter
> 1 | async (await, b = async()) => 2
    |                            ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (b = (await) => {}) => 1 1`] = `
"SyntaxError [1:26-1:28]: Await expression not allowed in formal parameter
> 1 | async (b = (await) => {}) => 1
    |                           ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (b = [...await]) => 1 1`] = `
"SyntaxError [1:23-1:25]: Await expression not allowed in formal parameter
> 1 | async (b = [...await]) => 1
    |                        ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (b = [await]) => 1 1`] = `
"SyntaxError [1:20-1:22]: Await expression not allowed in formal parameter
> 1 | async (b = [await]) => 1
    |                     ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (b = {a: await}) => 1 1`] = `
"SyntaxError [1:23-1:25]: Await expression not allowed in formal parameter
> 1 | async (b = {a: await}) => 1
    |                        ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (b = {await}) => 1 1`] = `
"SyntaxError [1:20-1:22]: Await expression not allowed in formal parameter
> 1 | async (b = {await}) => 1
    |                     ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (b = class await {}) => 1 1`] = `
"SyntaxError [1:27-1:29]: Await expression not allowed in formal parameter
> 1 | async (b = class await {}) => 1
    |                            ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (c, a.b) => {} 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async (c, a.b) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (c, a.b) => {} 2`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async (c, a.b) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (c, a['b']) => {} 1`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | async (c, a['b']) => {}
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (c, a['b']) => {} 2`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in async arrow
> 1 | async (c, a['b']) => {}
    |                   ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (foo = super.foo) => { } 1`] = `
"SyntaxError [1:18-1:19]: Member access on super must be in a method
> 1 | async (foo = super.foo) => { }
    |                   ^ Member access on super must be in a method"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (foo ? bar : baz) => {} 1`] = `
"SyntaxError [1:24-1:26]: Invalid left-hand side in async arrow
> 1 | async (foo ? bar : baz) => {}
    |                         ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (foo ? bar : baz, a) => {} 1`] = `
"SyntaxError [1:27-1:29]: Invalid left-hand side in async arrow
> 1 | async (foo ? bar : baz, a) => {}
    |                            ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (if) => {} 1`] = `
"SyntaxError [1:7-1:9]: Unexpected token: 'if'
> 1 | async (if) => {}
    |        ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (var x) => {}; 1`] = `
"SyntaxError [1:7-1:10]: Unexpected token: 'var'
> 1 | async (var x) => {};
    |        ^^^ Unexpected token: 'var'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x = (x) += await f) => {} 1`] = `
"SyntaxError [1:24-1:25]: Expected ')'
> 1 | async (x = (x) += await f) => {}
    |                         ^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x = 1) => {"use strict"} 1`] = `
"SyntaxError [1:18-1:31]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | async (x = 1) => {"use strict"}
    |                   ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) 
 => x 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async (x) 
> 2 |  => x
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) 
 => x 2`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async (x) 
> 2 |  => x
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) => {} + 2 1`] = `
"SyntaxError [1:16-1:17]: Unexpected token: '+'
> 1 | async (x) => {} + 2
    |                 ^ Unexpected token: '+'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) => {} / 1 1`] = `
"SyntaxError [1:16-1:19]: Unterminated regular expression
> 1 | async (x) => {} / 1
    |                 ^^^ Unterminated regular expression"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) => {} 1 1`] = `
"SyntaxError [1:16-1:17]: Unexpected token: 'number'
> 1 | async (x) => {} 1
    |                 ^ Unexpected token: 'number'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) => {} a() 1`] = `
"SyntaxError [1:16-1:17]: Unexpected token: 'identifier'
> 1 | async (x) => {} a()
    |                 ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x) => {}a 1`] = `
"SyntaxError [1:15-1:16]: Unexpected token: 'identifier'
> 1 | async (x) => {}a
    |                ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (x, y)[7] => {} 1`] = `
"SyntaxError [1:16-1:18]: Unexpected token: '=>'
> 1 | async (x, y)[7] => {}
    |                 ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async (yield) => 1; 1`] = `
"SyntaxError [1:7-1:12]: 'yield' may not be used as an identifier in this context
> 1 | async (yield) => 1;
    |        ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async ) => {} 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: ')'
> 1 | async ) => {}
    |       ^ Unexpected token: ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async => ; 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: ';'
> 1 | async => ;
    |          ^ Unexpected token: ';'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async [] => {} 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: ']'
> 1 | async [] => {}
    |        ^ Unexpected token: ']'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async [a, b] => 1 1`] = `
"SyntaxError [1:13-1:15]: Unexpected token: '=>'
> 1 | async [a, b] => 1
    |              ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async [a] => 1 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | async [a] => 1
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async {} => {} 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: '{'
> 1 | async {} => {}
    |       ^ Unexpected token: '{'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async {a: b} => 1 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: '{'
> 1 | async {a: b} => 1
    |       ^ Unexpected token: '{'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async {a} => 1 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: '{'
> 1 | async {a} => 1
    |       ^ Unexpected token: '{'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async {y=z} => d 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: '{'
> 1 | async {y=z} => d
    |       ^ Unexpected token: '{'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async {y=z} 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: '{'
> 1 | async {y=z}
    |       ^ Unexpected token: '{'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async -a => {} 1`] = `
"SyntaxError [1:9-1:11]: \`=>\` is an invalid assignment target
> 1 | async -a => {}
    |          ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 1 + () 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: 'number'
> 1 | async 1 + ()
    |       ^ Unexpected token: 'number'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 1 => ; 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: 'number'
> 1 | async 1 => ;
    |       ^ Unexpected token: 'number'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 1 => b; 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: 'number'
> 1 | async 1 => b;
    |       ^ Unexpected token: 'number'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async 32 => {} 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: 'number'
> 1 | async 32 => {}
    |       ^^ Unexpected token: 'number'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a + b => {} 1`] = `
"SyntaxError [1:8-1:9]: Expected '=>'
> 1 | async a + b => {}
    |         ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => {} () 1`] = `
"SyntaxError [1:14-1:15]: Block body arrows can not be immediately invoked without a group
> 1 | async a => {} ()
    |               ^ Block body arrows can not be immediately invoked without a group"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => {} () 2`] = `
"SyntaxError [1:14-1:15]: Block body arrows can not be immediately invoked without a group
> 1 | async a => {} ()
    |               ^ Block body arrows can not be immediately invoked without a group"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => async b 1`] = `
"SyntaxError [1:17-1:18]: Expected '=>'
> 1 | async a => async b
    |                  ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => async function 1`] = `
"SyntaxError [1:17-1:25]: Expected '('
> 1 | async a => async function
    |                  ^^^^^^^^ Expected '('"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => async function() 1`] = `
"SyntaxError [1:26-1:27]: Expected '{'
> 1 | async a => async function()
    |                           ^ Expected '{'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => await 1`] = `
"SyntaxError [1:11-1:16]: cannot use "await" as identifier inside an async function
> 1 | async a => await
    |            ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a => await await 1`] = `
"SyntaxError [1:17-1:22]: cannot use "await" as identifier inside an async function
> 1 | async a => await await
    |                  ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a++ => {} 1`] = `
"SyntaxError [1:7-1:9]: Expected '=>'
> 1 | async a++ => {}
    |        ^^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async a?c:d=>{}=>{}; 1`] = `
"SyntaxError [1:7-1:8]: Expected '=>'
> 1 | async a?c:d=>{}=>{};
    |        ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async await => { } 1`] = `
"SyntaxError [1:6-1:11]: Await expression not allowed in formal parameter
> 1 | async await => { }
    |       ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async await => {} 1`] = `
"SyntaxError [1:6-1:11]: Await expression not allowed in formal parameter
> 1 | async await => {}
    |       ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async await => 0 1`] = `
"SyntaxError [1:6-1:11]: Await expression not allowed in formal parameter
> 1 | async await => 0
    |       ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async await => 1 1`] = `
"SyntaxError [1:6-1:11]: Await expression not allowed in formal parameter
> 1 | async await => 1
    |       ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async enum => 1; 1`] = `
"SyntaxError [1:6-1:10]: Unexpected token: 'enum'
> 1 | async enum => 1;
    |       ^^^^ Unexpected token: 'enum'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async foo ? bar : baz => {} 1`] = `
"SyntaxError [1:10-1:11]: Expected '=>'
> 1 | async foo ? bar : baz => {}
    |           ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async foo bar => zoo 1`] = `
"SyntaxError [1:10-1:13]: Expected '=>'
> 1 | async foo bar => zoo
    |           ^^^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function a() { async function b([k = await 3]) {} } 1`] = `
"SyntaxError [1:43-1:48]: Await expression not allowed in formal parameter
> 1 | async function a() { async function b([k = await 3]) {} }
    |                                            ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function a() { async function b({k = [await 3]}) {} } 1`] = `
"SyntaxError [1:44-1:49]: Await expression not allowed in formal parameter
> 1 | async function a() { async function b({k = [await 3]}) {} }
    |                                             ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function a(k = await 3) {} 1`] = `
"SyntaxError [1:21-1:26]: Await expression not allowed in formal parameter
> 1 | async function a(k = await 3) {}
    |                      ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { [ await ] = 1; } 1`] = `
"SyntaxError [1:23-1:28]: cannot use "await" as identifier inside an async function
> 1 | async function f() { [ await ] = 1; }
    |                        ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { { await } = 1; } 1`] = `
"SyntaxError [1:23-1:28]: cannot use "await" as identifier inside an async function
> 1 | async function f() { { await } = 1; }
    |                        ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { O = { async [await](a, a) {} } } 1`] = `
"SyntaxError [1:34-1:39]: cannot use "await" as identifier inside an async function
> 1 | async function f() { O = { async [await](a, a) {} } }
    |                                   ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { await = 1; } 1`] = `
"SyntaxError [1:21-1:26]: cannot use "await" as identifier inside an async function
> 1 | async function f() { await = 1; }
    |                      ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { e = (await = 42) } 1`] = `
"SyntaxError [1:26-1:31]: cannot use "await" as identifier inside an async function
> 1 | async function f() { e = (await = 42) }
    |                           ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { e = (await); } 1`] = `
"SyntaxError [1:26-1:31]: cannot use "await" as identifier inside an async function
> 1 | async function f() { e = (await); }
    |                           ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { e = (await, f); } 1`] = `
"SyntaxError [1:26-1:31]: cannot use "await" as identifier inside an async function
> 1 | async function f() { e = (await, f); }
    |                           ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { e = [await];  } 1`] = `
"SyntaxError [1:26-1:31]: cannot use "await" as identifier inside an async function
> 1 | async function f() { e = [await];  }
    |                           ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { e = {await}; } 1`] = `
"SyntaxError [1:31-1:32]: Can not use \`await\` as identifier in module or async func
> 1 | async function f() { e = {await}; }
    |                                ^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { f = (...await) => 42; } 1`] = `
"SyntaxError [1:29-1:34]: cannot use "await" as identifier inside an async function
> 1 | async function f() { f = (...await) => 42; }
    |                              ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { f = (await) => 42; } 1`] = `
"SyntaxError [1:26-1:31]: cannot use "await" as identifier inside an async function
> 1 | async function f() { f = (await) => 42; }
    |                           ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { f = (await, a) => 42; } 1`] = `
"SyntaxError [1:26-1:31]: cannot use "await" as identifier inside an async function
> 1 | async function f() { f = (await, a) => 42; }
    |                           ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { f = await => 42; } 1`] = `
"SyntaxError [1:25-1:36]: cannot use "await" as identifier inside an async function
> 1 | async function f() { f = await => 42; }
    |                          ^^^^^^^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { function await() {} } 1`] = `
"SyntaxError [1:30-1:35]: Can not use \`await\` as identifier in module or async func
> 1 | async function f() { function await() {} }
    |                               ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { return {await = 0} = {}; } 1`] = `
"SyntaxError [1:35-1:36]: Can not use \`await\` as identifier in module or async func
> 1 | async function f() { return {await = 0} = {}; }
    |                                    ^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function f() { return {await}; } 1`] = `
"SyntaxError [1:34-1:35]: Can not use \`await\` as identifier in module or async func
> 1 | async function f() { return {await}; }
    |                                   ^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async function x({await}) { return 1 } 1`] = `
"SyntaxError [1:23-1:24]: Can not use \`await\` as identifier in module or async func
> 1 | async function x({await}) { return 1 }
    |                        ^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async if => {} 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: 'if'
> 1 | async if => {}
    |       ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async left = (aSize.width/2) - () 1`] = `
"SyntaxError [1:11-1:12]: Expected '=>'
> 1 | async left = (aSize.width/2) - ()
    |            ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x 
 => x 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async x 
> 2 |  => x
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x 
 => x 2`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | async x 
> 2 |  => x
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => (await) = 1 1`] = `
"SyntaxError [1:12-1:17]: cannot use "await" as identifier inside an async function
> 1 | async x => (await) = 1
    |             ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => (break) = 1 1`] = `
"SyntaxError [1:12-1:17]: Unexpected token: 'break'
> 1 | async x => (break) = 1
    |             ^^^^^ Unexpected token: 'break'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => (case) = 1 1`] = `
"SyntaxError [1:12-1:16]: Unexpected token: 'case'
> 1 | async x => (case) = 1
    |             ^^^^ Unexpected token: 'case'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => (catch) = 1 1`] = `
"SyntaxError [1:12-1:17]: Unexpected token: 'catch'
> 1 | async x => (catch) = 1
    |             ^^^^^ Unexpected token: 'catch'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => (in) = 1 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: 'in'
> 1 | async x => (in) = 1
    |             ^^ Unexpected token: 'in'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => const = 1 1`] = `
"SyntaxError [1:11-1:16]: Unexpected token: 'const'
> 1 | async x => const = 1
    |            ^^^^^ Unexpected token: 'const'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => do = 1 1`] = `
"SyntaxError [1:11-1:13]: Unexpected token: 'do'
> 1 | async x => do = 1
    |            ^^ Unexpected token: 'do'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => else = 1 1`] = `
"SyntaxError [1:11-1:15]: Unexpected token: 'else'
> 1 | async x => else = 1
    |            ^^^^ Unexpected token: 'else'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => for = 1 1`] = `
"SyntaxError [1:11-1:14]: Unexpected token: 'for'
> 1 | async x => for = 1
    |            ^^^ Unexpected token: 'for'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async x => function = 1 1`] = `
"SyntaxError [1:20-1:21]: Expected '('
> 1 | async x => function = 1
    |                     ^ Expected '('"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async yield => 1; 1`] = `
"SyntaxError [1:6-1:11]: Yield expression not allowed in formal parameter
> 1 | async yield => 1;
    |       ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async yield x => zoo 1`] = `
"SyntaxError [1:12-1:13]: Expected '=>'
> 1 | async yield x => zoo
    |             ^ Expected '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async("foo".bar) => x 1`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async("foo".bar) => x
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async("foo".bar) => x 2`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async("foo".bar) => x
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async() => ((async(x = await 1) => x)(); 1`] = `
"SyntaxError [1:32-1:34]: Await expression not allowed in formal parameter
> 1 | async() => ((async(x = await 1) => x)();
    |                                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async() => { (a = await/r/g) => {} }; 1`] = `
"SyntaxError [1:29-1:31]: Await expression not allowed in formal parameter
> 1 | async() => { (a = await/r/g) => {} };
    |                              ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async() => { (a = await/r/g) => {} }; 2`] = `
"SyntaxError [1:29-1:31]: Await expression not allowed in formal parameter
> 1 | async() => { (a = await/r/g) => {} };
    |                              ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async() => await 1`] = `
"SyntaxError [1:11-1:16]: cannot use "await" as identifier inside an async function
> 1 | async() => await
    |            ^^^^^ cannot use "await" as identifier inside an async function"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async().foo10 => 1 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | async().foo10 => 1
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async().foo10 => 1 2`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | async().foo10 => 1
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async().foo13 () => 1 1`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async().foo13 () => 1
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(,) 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: ','
> 1 | async(,)
    |       ^ Unexpected token: ','"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a = b) => b 1`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in async arrow
> 1 | async(...a = b) => b
    |                 ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a = b) => b 2`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in async arrow
> 1 | async(...a = b) => b
    |                 ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a = b) => b 3`] = `
"SyntaxError [1:16-1:18]: Invalid left-hand side in async arrow
> 1 | async(...a = b) => b
    |                 ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a)?c:d=>{}=>{}; 1`] = `
"SyntaxError [1:19-1:21]: Unexpected token: '=>'
> 1 | async(...a)?c:d=>{}=>{};
    |                    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a)\`template-head\${c}\`=>{} 1`] = `
"SyntaxError [1:30-1:32]: Unexpected token: '=>'
> 1 | async(...a)\`template-head\${c}\`=>{}
    |                               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a, b) => b 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async(...a, b) => b
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a, b) => b 2`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async(...a, b) => b
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a, b) => b 3`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async(...a, b) => b
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a, b) => b 4`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async(...a, b) => b
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a, b) => b 5`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async(...a, b) => b
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a, b) => b 6`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async(...a, b) => b
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a,) => b 1`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in async arrow
> 1 | async(...a,) => b
    |              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a,) => b 2`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in async arrow
> 1 | async(...a,) => b
    |              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a,) => b 3`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in async arrow
> 1 | async(...a,) => b
    |              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...a,) => b 4`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in async arrow
> 1 | async(...a,) => b
    |              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...await) => {} 1`] = `
"SyntaxError [1:16-1:18]: Await expression not allowed in formal parameter
> 1 | async(...await) => {}
    |                 ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...x,) => x 1`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in async arrow
> 1 | async(...x,) => x
    |              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(...x,b) => x 1`] = `
"SyntaxError [1:14-1:16]: Invalid left-hand side in async arrow
> 1 | async(...x,b) => x
    |               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async({a = 1}, {b = 2} = {}, {c = 3} = {}) 1`] = `
"SyntaxError [1:41-1:42]: Invalid shorthand property initializer
> 1 | async({a = 1}, {b = 2} = {}, {c = 3} = {})
    |                                          ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(1, a) => x 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async(1, a) => x
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(1,2,3) => x 1`] = `
"SyntaxError [1:13-1:15]: Unexpected token: '=>'
> 1 | async(1,2,3) => x
    |              ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = (...await) => {}) => {} 1`] = `
"SyntaxError [1:28-1:30]: Await expression not allowed in formal parameter
> 1 | async(a = (...await) => {}) => {}
    |                             ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = (b = await/r/g) => {}) => {} 1`] = `
"SyntaxError [1:20-1:24]: Expected ')'
> 1 | async(a = (b = await/r/g) => {}) => {}
    |                     ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = (b, ...await) => {}) => {} 1`] = `
"SyntaxError [1:31-1:33]: Await expression not allowed in formal parameter
> 1 | async(a = (b, ...await) => {}) => {}
    |                                ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = async(...await) => {}) => {} 1`] = `
"SyntaxError [1:26-1:28]: Await expression not allowed in formal parameter
> 1 | async(a = async(...await) => {}) => {}
    |                           ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = async(b = await/r/g) => {}) => {} 1`] = `
"SyntaxError [1:25-1:29]: Expected ')'
> 1 | async(a = async(b = await/r/g) => {}) => {}
    |                          ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = async(b, ...await) => {}) => {} 1`] = `
"SyntaxError [1:29-1:31]: Await expression not allowed in formal parameter
> 1 | async(a = async(b, ...await) => {}) => {}
    |                              ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = await x) => x 1`] = `
"SyntaxError [1:16-1:17]: Expected ')'
> 1 | async(a = await x) => x
    |                 ^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a = await/r/g) => {} 1`] = `
"SyntaxError [1:15-1:19]: Expected ')'
> 1 | async(a = await/r/g) => {}
    |                ^^^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a, ...await) => {} 1`] = `
"SyntaxError [1:19-1:21]: Await expression not allowed in formal parameter
> 1 | async(a, ...await) => {}
    |                    ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(a, 1) => x 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | async(a, 1) => x
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(async() () => {})(async() () => {})(async() () => {})(async() () => {})(async() () => {}) 1`] = `
"SyntaxError [1:17-1:19]: Expected ')'
> 1 | async(async() () => {})(async() () => {})(async() () => {})(async() () => {})(async() () => {})
    |                  ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(async() () => {})(async() () => {})(y)(n)(c) 1`] = `
"SyntaxError [1:17-1:19]: Expected ')'
> 1 | async(async() () => {})(async() () => {})(y)(n)(c)
    |                  ^^ Expected ')'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(await) => {  } 1`] = `
"SyntaxError [1:13-1:15]: Await expression not allowed in formal parameter
> 1 | async(await) => {  }
    |              ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo = super()) => {} 1`] = `
"SyntaxError [1:17-1:18]: Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass
> 1 | async(foo = super()) => {}
    |                  ^ Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo = super()) => {} 2`] = `
"SyntaxError [1:17-1:18]: Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass
> 1 | async(foo = super()) => {}
    |                  ^ Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo = super()) => {} 3`] = `
"SyntaxError [1:17-1:18]: Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass
> 1 | async(foo = super()) => {}
    |                  ^ Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo) => { super() }; 1`] = `
"SyntaxError [1:21-1:22]: Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass
> 1 | async(foo) => { super() };
    |                      ^ Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo) => { super.prop }; 1`] = `
"SyntaxError [1:21-1:22]: Member access on super must be in a method
> 1 | async(foo) => { super.prop };
    |                      ^ Member access on super must be in a method"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo) => { super.prop }; 2`] = `
"SyntaxError [1:21-1:22]: Member access on super must be in a method
> 1 | async(foo) => { super.prop };
    |                      ^ Member access on super must be in a method"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(foo) => { super.prop }; 3`] = `
"SyntaxError [1:21-1:22]: Member access on super must be in a method
> 1 | async(foo) => { super.prop };
    |                      ^ Member access on super must be in a method"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > async(x = await) => {  } 1`] = `
"SyntaxError [1:17-1:19]: Await expression not allowed in formal parameter
> 1 | async(x = await) => {  }
    |                  ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > asyncFn = async await => await + 'test'; 1`] = `
"SyntaxError [1:16-1:21]: Await expression not allowed in formal parameter
> 1 | asyncFn = async await => await + 'test';
    |                 ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > break async 
 () => x 1`] = `
"SyntaxError [2:1-2:2]: Undefined label 'async'
  1 | break async 
> 2 |  () => x
    |  ^ Undefined label 'async'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > class x extends async 
 () => x {} 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | class x extends async 
> 2 |  () => x {}
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > f = async
(g) => g 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | f = async
> 2 | (g) => g
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > f = async
function g(){await x} 1`] = `
"SyntaxError [2:19-2:20]: Unexpected token: 'identifier'
  1 | f = async
> 2 | function g(){await x}
    |                    ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > f = async
g => await g 1`] = `
"SyntaxError [2:11-2:12]: Unexpected token: 'identifier'
  1 | f = async
> 2 | g => await g
    |            ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > f = async ((x)) => x 1`] = `
"SyntaxError [1:16-1:18]: Unexpected token: '=>'
> 1 | f = async ((x)) => x
    |                 ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > f(async
()=>c) 1`] = `
"SyntaxError [2:2-2:4]: No line break is allowed after '=>'
  1 | f(async
> 2 | ()=>c)
    |   ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > for (;async 
 () => x;) x 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | for (;async 
> 2 |  () => x;) x
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > for (async 
 () => x;;) x 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | for (async 
> 2 |  () => x;;) x
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > for (x of async 
 () => x) x 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | for (x of async 
> 2 |  () => x) x
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function () { a = async await => { } } 1`] = `
"SyntaxError [1:9-1:10]: Function declaration must have a name in this context
> 1 | function () { a = async await => { } }
    |          ^ Function declaration must have a name in this context"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function *a() { async yield => foo } 1`] = `
"SyntaxError [1:22-1:27]: Unexpected token: 'yield'
> 1 | function *a() { async yield => foo }
    |                       ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function f(x = async 
 () => x){} 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | function f(x = async 
> 2 |  () => x){}
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* a(){ async (yield) => {}; } 1`] = `
"SyntaxError [1:29-1:31]: Invalid left-hand side in async arrow
> 1 | function* a(){ async (yield) => {}; }
    |                              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* a(){ async (yield) => {}; } 2`] = `
"SyntaxError [1:29-1:31]: Invalid left-hand side in async arrow
> 1 | function* a(){ async (yield) => {}; }
    |                              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* a(){ async (yield) => {}; } 3`] = `
"SyntaxError [1:29-1:31]: Invalid left-hand side in async arrow
> 1 | function* a(){ async (yield) => {}; }
    |                              ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* a(){ async yield => {}; } 1`] = `
"SyntaxError [1:21-1:26]: Unexpected token: 'yield'
> 1 | function* a(){ async yield => {}; }
    |                      ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* a(){ async yield => {}; } 2`] = `
"SyntaxError [1:21-1:26]: Unexpected token: 'yield'
> 1 | function* a(){ async yield => {}; }
    |                      ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async ([yield]) => X } 1`] = `
"SyntaxError [1:32-1:34]: Invalid left-hand side in async arrow
> 1 | function* g() { async ([yield]) => X }
    |                                 ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async ({yield}) => X } 1`] = `
"SyntaxError [1:29-1:30]: 'yield' may not be used as an identifier in this context
> 1 | function* g() { async ({yield}) => X }
    |                              ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async ({yield}) => X } 2`] = `
"SyntaxError [1:29-1:30]: 'yield' may not be used as an identifier in this context
> 1 | function* g() { async ({yield}) => X }
    |                              ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async (yield) => X } 1`] = `
"SyntaxError [1:30-1:32]: Invalid left-hand side in async arrow
> 1 | function* g() { async (yield) => X }
    |                               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async (yield) => X } 2`] = `
"SyntaxError [1:30-1:32]: Invalid left-hand side in async arrow
> 1 | function* g() { async (yield) => X }
    |                               ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async yield => X } 1`] = `
"SyntaxError [1:22-1:27]: Unexpected token: 'yield'
> 1 | function* g() { async yield => X }
    |                       ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > function* g() { async yield => X } 2`] = `
"SyntaxError [1:22-1:27]: Unexpected token: 'yield'
> 1 | function* g() { async yield => X }
    |                       ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > if (x) async 
 () => x else y 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | if (x) async 
> 2 |  () => x else y
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > interface => {} 1`] = `
"SyntaxError [1:0-1:9]: Unexpected token: 'interface'
> 1 | interface => {}
    | ^^^^^^^^^ Unexpected token: 'interface'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > let f = a + b + async()=>d 1`] = `
"SyntaxError [1:23-1:25]: \`=>\` is an invalid assignment target
> 1 | let f = a + b + async()=>d
    |                        ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > let f = async
(g) => g 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | let f = async
> 2 | (g) => g
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > let f = async
(g) => g 2`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | let f = async
> 2 | (g) => g
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > new async() => {} 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | new async() => {}
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > try {} catch(e = async 
 () => x) {} 1`] = `
"SyntaxError [1:15-1:16]: Catch clause parameter does not support default values
> 1 | try {} catch(e = async 
    |                ^ Catch clause parameter does not support default values
  2 |  () => x) {}"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var aaf = async
(x, y) => { }; 1`] = `
"SyntaxError [2:7-2:9]: No line break is allowed after '=>'
  1 | var aaf = async
> 2 | (x, y) => { };
    |        ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var af = arguments => 1; 1`] = `
"SyntaxError [1:19-1:21]: Unexpected eval or arguments in strict mode
> 1 | var af = arguments => 1;
    |                    ^^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var af = package => 1; 1`] = `
"SyntaxError [1:9-1:16]: Unexpected token: 'package'
> 1 | var af = package => 1;
    |          ^^^^^^^ Unexpected token: 'package'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var asyncFn = async () => var await = 'test'; 1`] = `
"SyntaxError [1:26-1:29]: Unexpected token: 'var'
> 1 | var asyncFn = async () => var await = 'test';
    |                           ^^^ Unexpected token: 'var'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var asyncFn = async await => await + 'test'; 1`] = `
"SyntaxError [1:20-1:25]: Await expression not allowed in formal parameter
> 1 | var asyncFn = async await => await + 'test';
    |                     ^^^^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var f = async() => ((async(x = await 1) => x)(); 1`] = `
"SyntaxError [1:40-1:42]: Await expression not allowed in formal parameter
> 1 | var f = async() => ((async(x = await 1) => x)();
    |                                         ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var x = 1 y => y 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: 'identifier'
> 1 | var x = 1 y => y
    |           ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > var x = async 
 () => x, y 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | var x = async 
> 2 |  () => x, y
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > with (async 
 () => x) {} 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | with (async 
> 2 |  () => x) {}
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > with({}) async function f(){}; 1`] = `
"SyntaxError [1:15-1:23]: Async functions can only be declared at the top level or inside a block
> 1 | with({}) async function f(){};
    |                ^^^^^^^^ Async functions can only be declared at the top level or inside a block"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > x = async 
 () => x, y 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | x = async 
> 2 |  () => x, y
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > x(async 
 () => x) 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | x(async 
> 2 |  () => x)
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > x(async 
 () => x); 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | x(async 
> 2 |  () => x);
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > x={x: async 
 () => x} 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | x={x: async 
> 2 |  () => x}
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow (fail) > x[async 
 () => x]; 1`] = `
"SyntaxError [2:4-2:6]: No line break is allowed after '=>'
  1 | x[async 
> 2 |  () => x];
    |     ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > ({async foo () 
 {}}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "foo",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": true,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > ({x: async (y,w) => z}) 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "end": 22,
        "properties": [
          {
            "computed": false,
            "end": 21,
            "key": {
              "end": 3,
              "name": "x",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              21,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "async": true,
              "body": {
                "end": 21,
                "name": "z",
                "range": [
                  20,
                  21,
                ],
                "start": 20,
                "type": "Identifier",
              },
              "end": 21,
              "expression": true,
              "generator": false,
              "params": [
                {
                  "end": 13,
                  "name": "y",
                  "range": [
                    12,
                    13,
                  ],
                  "start": 12,
                  "type": "Identifier",
                },
                {
                  "end": 15,
                  "name": "w",
                  "range": [
                    14,
                    15,
                  ],
                  "start": 14,
                  "type": "Identifier",
                },
              ],
              "range": [
                5,
                21,
              ],
              "start": 5,
              "type": "ArrowFunctionExpression",
            },
          },
        ],
        "range": [
          1,
          22,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async () => {})
(async () => {})
(async () => {})
(async () => {})
(async () => {}) 1`] = `
{
  "body": [
    {
      "end": 84,
      "expression": {
        "arguments": [
          {
            "async": true,
            "body": {
              "body": [],
              "end": 83,
              "range": [
                81,
                83,
              ],
              "start": 81,
              "type": "BlockStatement",
            },
            "end": 83,
            "expression": false,
            "generator": false,
            "params": [],
            "range": [
              69,
              83,
            ],
            "start": 69,
            "type": "ArrowFunctionExpression",
          },
        ],
        "callee": {
          "arguments": [
            {
              "async": true,
              "body": {
                "body": [],
                "end": 66,
                "range": [
                  64,
                  66,
                ],
                "start": 64,
                "type": "BlockStatement",
              },
              "end": 66,
              "expression": false,
              "generator": false,
              "params": [],
              "range": [
                52,
                66,
              ],
              "start": 52,
              "type": "ArrowFunctionExpression",
            },
          ],
          "callee": {
            "arguments": [
              {
                "async": true,
                "body": {
                  "body": [],
                  "end": 49,
                  "range": [
                    47,
                    49,
                  ],
                  "start": 47,
                  "type": "BlockStatement",
                },
                "end": 49,
                "expression": false,
                "generator": false,
                "params": [],
                "range": [
                  35,
                  49,
                ],
                "start": 35,
                "type": "ArrowFunctionExpression",
              },
            ],
            "callee": {
              "arguments": [
                {
                  "async": true,
                  "body": {
                    "body": [],
                    "end": 32,
                    "range": [
                      30,
                      32,
                    ],
                    "start": 30,
                    "type": "BlockStatement",
                  },
                  "end": 32,
                  "expression": false,
                  "generator": false,
                  "params": [],
                  "range": [
                    18,
                    32,
                  ],
                  "start": 18,
                  "type": "ArrowFunctionExpression",
                },
              ],
              "callee": {
                "async": true,
                "body": {
                  "body": [],
                  "end": 15,
                  "range": [
                    13,
                    15,
                  ],
                  "start": 13,
                  "type": "BlockStatement",
                },
                "end": 15,
                "expression": false,
                "generator": false,
                "params": [],
                "range": [
                  1,
                  15,
                ],
                "start": 1,
                "type": "ArrowFunctionExpression",
              },
              "end": 33,
              "optional": false,
              "range": [
                0,
                33,
              ],
              "start": 0,
              "type": "CallExpression",
            },
            "end": 50,
            "optional": false,
            "range": [
              0,
              50,
            ],
            "start": 0,
            "type": "CallExpression",
          },
          "end": 67,
          "optional": false,
          "range": [
            0,
            67,
          ],
          "start": 0,
          "type": "CallExpression",
        },
        "end": 84,
        "optional": false,
        "range": [
          0,
          84,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        84,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 84,
  "range": [
    0,
    84,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async ({await: a}) => 1) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "type": "Literal",
          "value": 1,
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "await",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "a",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async (a = b) => {  }) 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "end": 22,
          "range": [
            18,
            22,
          ],
          "start": 18,
          "type": "BlockStatement",
        },
        "end": 22,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 13,
            "left": {
              "end": 9,
              "name": "a",
              "range": [
                8,
                9,
              ],
              "start": 8,
              "type": "Identifier",
            },
            "range": [
              8,
              13,
            ],
            "right": {
              "end": 13,
              "name": "b",
              "range": [
                12,
                13,
              ],
              "start": 12,
              "type": "Identifier",
            },
            "start": 8,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          1,
          22,
        ],
        "start": 1,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async a => {})() 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [],
        "callee": {
          "async": true,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "expression": false,
          "generator": false,
          "params": [
            {
              "name": "a",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async a => b => c) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "async": false,
          "body": {
            "name": "c",
            "type": "Identifier",
          },
          "expression": true,
          "generator": false,
          "params": [
            {
              "name": "b",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async function a(){}(0)) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "type": "Literal",
            "value": 0,
          },
        ],
        "callee": {
          "async": true,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "generator": false,
          "id": {
            "name": "a",
            "type": "Identifier",
          },
          "params": [],
          "type": "FunctionExpression",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async x =>x) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > (async({x = yield}) => 1); 1`] = `
{
  "body": [
    {
      "end": 26,
      "expression": {
        "async": true,
        "body": {
          "end": 24,
          "range": [
            23,
            24,
          ],
          "start": 23,
          "type": "Literal",
          "value": 1,
        },
        "end": 24,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 18,
            "properties": [
              {
                "computed": false,
                "end": 17,
                "key": {
                  "end": 9,
                  "name": "x",
                  "range": [
                    8,
                    9,
                  ],
                  "start": 8,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  8,
                  17,
                ],
                "shorthand": true,
                "start": 8,
                "type": "Property",
                "value": {
                  "end": 17,
                  "left": {
                    "end": 9,
                    "name": "x",
                    "range": [
                      8,
                      9,
                    ],
                    "start": 8,
                    "type": "Identifier",
                  },
                  "range": [
                    8,
                    17,
                  ],
                  "right": {
                    "end": 17,
                    "name": "yield",
                    "range": [
                      12,
                      17,
                    ],
                    "start": 12,
                    "type": "Identifier",
                  },
                  "start": 8,
                  "type": "AssignmentPattern",
                },
              },
            ],
            "range": [
              7,
              18,
            ],
            "start": 7,
            "type": "ObjectPattern",
          },
        ],
        "range": [
          1,
          24,
        ],
        "start": 1,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > [async x => z] 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "elements": [
          {
            "async": true,
            "body": {
              "end": 13,
              "name": "z",
              "range": [
                12,
                13,
              ],
              "start": 12,
              "type": "Identifier",
            },
            "end": 13,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 8,
                "name": "x",
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Identifier",
              },
            ],
            "range": [
              1,
              13,
            ],
            "start": 1,
            "type": "ArrowFunctionExpression",
          },
        ],
        "end": 14,
        "range": [
          0,
          14,
        ],
        "start": 0,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > [async(x,y) => z] 1`] = `
{
  "body": [
    {
      "end": 17,
      "expression": {
        "elements": [
          {
            "async": true,
            "body": {
              "end": 16,
              "name": "z",
              "range": [
                15,
                16,
              ],
              "start": 15,
              "type": "Identifier",
            },
            "end": 16,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 8,
                "name": "x",
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Identifier",
              },
              {
                "end": 10,
                "name": "y",
                "range": [
                  9,
                  10,
                ],
                "start": 9,
                "type": "Identifier",
              },
            ],
            "range": [
              1,
              16,
            ],
            "start": 1,
            "type": "ArrowFunctionExpression",
          },
        ],
        "end": 17,
        "range": [
          0,
          17,
        ],
        "start": 0,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        17,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > a => a => a => async a => a 1`] = `
{
  "body": [
    {
      "end": 27,
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "async": false,
            "body": {
              "async": true,
              "body": {
                "end": 27,
                "name": "a",
                "range": [
                  26,
                  27,
                ],
                "start": 26,
                "type": "Identifier",
              },
              "end": 27,
              "expression": true,
              "generator": false,
              "params": [
                {
                  "end": 22,
                  "name": "a",
                  "range": [
                    21,
                    22,
                  ],
                  "start": 21,
                  "type": "Identifier",
                },
              ],
              "range": [
                15,
                27,
              ],
              "start": 15,
              "type": "ArrowFunctionExpression",
            },
            "end": 27,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 11,
                "name": "a",
                "range": [
                  10,
                  11,
                ],
                "start": 10,
                "type": "Identifier",
              },
            ],
            "range": [
              10,
              27,
            ],
            "start": 10,
            "type": "ArrowFunctionExpression",
          },
          "end": 27,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 6,
              "name": "a",
              "range": [
                5,
                6,
              ],
              "start": 5,
              "type": "Identifier",
            },
          ],
          "range": [
            5,
            27,
          ],
          "start": 5,
          "type": "ArrowFunctionExpression",
        },
        "end": 27,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          27,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        27,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 27,
  "range": [
    0,
    27,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async (() => 1)(), 1 1`] = `
{
  "body": [
    {
      "end": 20,
      "expression": {
        "end": 20,
        "expressions": [
          {
            "arguments": [],
            "callee": {
              "arguments": [
                {
                  "async": false,
                  "body": {
                    "end": 14,
                    "range": [
                      13,
                      14,
                    ],
                    "start": 13,
                    "type": "Literal",
                    "value": 1,
                  },
                  "end": 14,
                  "expression": true,
                  "generator": false,
                  "params": [],
                  "range": [
                    7,
                    14,
                  ],
                  "start": 7,
                  "type": "ArrowFunctionExpression",
                },
              ],
              "callee": {
                "end": 5,
                "name": "async",
                "range": [
                  0,
                  5,
                ],
                "start": 0,
                "type": "Identifier",
              },
              "end": 15,
              "optional": false,
              "range": [
                0,
                15,
              ],
              "start": 0,
              "type": "CallExpression",
            },
            "end": 17,
            "optional": false,
            "range": [
              0,
              17,
            ],
            "start": 0,
            "type": "CallExpression",
          },
          {
            "end": 20,
            "range": [
              19,
              20,
            ],
            "start": 19,
            "type": "Literal",
            "value": 1,
          },
        ],
        "range": [
          0,
          20,
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        20,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 20,
  "range": [
    0,
    20,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async ((a)) 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "arguments": [
          {
            "end": 9,
            "name": "a",
            "range": [
              8,
              9,
            ],
            "start": 8,
            "type": "Identifier",
          },
        ],
        "callee": {
          "end": 5,
          "name": "async",
          "range": [
            0,
            5,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 11,
        "optional": false,
        "range": [
          0,
          11,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async ({a: b = c}) 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "arguments": [
          {
            "end": 17,
            "properties": [
              {
                "computed": false,
                "end": 16,
                "key": {
                  "end": 9,
                  "name": "a",
                  "range": [
                    8,
                    9,
                  ],
                  "start": 8,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  8,
                  16,
                ],
                "shorthand": false,
                "start": 8,
                "type": "Property",
                "value": {
                  "end": 16,
                  "left": {
                    "end": 12,
                    "name": "b",
                    "range": [
                      11,
                      12,
                    ],
                    "start": 11,
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "range": [
                    11,
                    16,
                  ],
                  "right": {
                    "end": 16,
                    "name": "c",
                    "range": [
                      15,
                      16,
                    ],
                    "start": 15,
                    "type": "Identifier",
                  },
                  "start": 11,
                  "type": "AssignmentExpression",
                },
              },
            ],
            "range": [
              7,
              17,
            ],
            "start": 7,
            "type": "ObjectExpression",
          },
        ],
        "callee": {
          "end": 5,
          "name": "async",
          "range": [
            0,
            5,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 18,
        "optional": false,
        "range": [
          0,
          18,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async (a = async () => { await 1; }) => {} 1`] = `
{
  "body": [
    {
      "end": 42,
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "end": 42,
          "range": [
            40,
            42,
          ],
          "start": 40,
          "type": "BlockStatement",
        },
        "end": 42,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 35,
            "left": {
              "end": 8,
              "name": "a",
              "range": [
                7,
                8,
              ],
              "start": 7,
              "type": "Identifier",
            },
            "range": [
              7,
              35,
            ],
            "right": {
              "async": true,
              "body": {
                "body": [
                  {
                    "end": 33,
                    "expression": {
                      "argument": {
                        "end": 32,
                        "range": [
                          31,
                          32,
                        ],
                        "start": 31,
                        "type": "Literal",
                        "value": 1,
                      },
                      "end": 32,
                      "range": [
                        25,
                        32,
                      ],
                      "start": 25,
                      "type": "AwaitExpression",
                    },
                    "range": [
                      25,
                      33,
                    ],
                    "start": 25,
                    "type": "ExpressionStatement",
                  },
                ],
                "end": 35,
                "range": [
                  23,
                  35,
                ],
                "start": 23,
                "type": "BlockStatement",
              },
              "end": 35,
              "expression": false,
              "generator": false,
              "params": [],
              "range": [
                11,
                35,
              ],
              "start": 11,
              "type": "ArrowFunctionExpression",
            },
            "start": 7,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          42,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        42,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 42,
  "range": [
    0,
    42,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async (a, b) => 0, (c, d) => 1 1`] = `
{
  "body": [
    {
      "end": 30,
      "expression": {
        "end": 30,
        "expressions": [
          {
            "async": true,
            "body": {
              "end": 17,
              "range": [
                16,
                17,
              ],
              "start": 16,
              "type": "Literal",
              "value": 0,
            },
            "end": 17,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 8,
                "name": "a",
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Identifier",
              },
              {
                "end": 11,
                "name": "b",
                "range": [
                  10,
                  11,
                ],
                "start": 10,
                "type": "Identifier",
              },
            ],
            "range": [
              0,
              17,
            ],
            "start": 0,
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "end": 30,
              "range": [
                29,
                30,
              ],
              "start": 29,
              "type": "Literal",
              "value": 1,
            },
            "end": 30,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 21,
                "name": "c",
                "range": [
                  20,
                  21,
                ],
                "start": 20,
                "type": "Identifier",
              },
              {
                "end": 24,
                "name": "d",
                "range": [
                  23,
                  24,
                ],
                "start": 23,
                "type": "Identifier",
              },
            ],
            "range": [
              19,
              30,
            ],
            "start": 19,
            "type": "ArrowFunctionExpression",
          },
        ],
        "range": [
          0,
          30,
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        30,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 30,
  "range": [
    0,
    30,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async (b = {await: a}) => 1 1`] = `
{
  "body": [
    {
      "end": 27,
      "expression": {
        "async": true,
        "body": {
          "end": 27,
          "range": [
            26,
            27,
          ],
          "start": 26,
          "type": "Literal",
          "value": 1,
        },
        "end": 27,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 21,
            "left": {
              "end": 8,
              "name": "b",
              "range": [
                7,
                8,
              ],
              "start": 7,
              "type": "Identifier",
            },
            "range": [
              7,
              21,
            ],
            "right": {
              "end": 21,
              "properties": [
                {
                  "computed": false,
                  "end": 20,
                  "key": {
                    "end": 17,
                    "name": "await",
                    "range": [
                      12,
                      17,
                    ],
                    "start": 12,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    12,
                    20,
                  ],
                  "shorthand": false,
                  "start": 12,
                  "type": "Property",
                  "value": {
                    "end": 20,
                    "name": "a",
                    "range": [
                      19,
                      20,
                    ],
                    "start": 19,
                    "type": "Identifier",
                  },
                },
              ],
              "range": [
                11,
                21,
              ],
              "start": 11,
              "type": "ObjectExpression",
            },
            "start": 7,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          27,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        27,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 27,
  "range": [
    0,
    27,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > async x => delete ("x"[(await x)]) 1`] = `
{
  "body": [
    {
      "end": 34,
      "expression": {
        "async": true,
        "body": {
          "argument": {
            "computed": true,
            "end": 33,
            "loc": {
              "end": {
                "column": 33,
                "line": 1,
              },
              "start": {
                "column": 19,
                "line": 1,
              },
            },
            "object": {
              "end": 22,
              "loc": {
                "end": {
                  "column": 22,
                  "line": 1,
                },
                "start": {
                  "column": 19,
                  "line": 1,
                },
              },
              "range": [
                19,
                22,
              ],
              "start": 19,
              "type": "Literal",
              "value": "x",
            },
            "optional": false,
            "property": {
              "argument": {
                "end": 31,
                "loc": {
                  "end": {
                    "column": 31,
                    "line": 1,
                  },
                  "start": {
                    "column": 30,
                    "line": 1,
                  },
                },
                "name": "x",
                "range": [
                  30,
                  31,
                ],
                "start": 30,
                "type": "Identifier",
              },
              "end": 31,
              "loc": {
                "end": {
                  "column": 31,
                  "line": 1,
                },
                "start": {
                  "column": 24,
                  "line": 1,
                },
              },
              "range": [
                24,
                31,
              ],
              "start": 24,
              "type": "AwaitExpression",
            },
            "range": [
              19,
              33,
            ],
            "start": 19,
            "type": "MemberExpression",
          },
          "end": 34,
          "loc": {
            "end": {
              "column": 34,
              "line": 1,
            },
            "start": {
              "column": 11,
              "line": 1,
            },
          },
          "operator": "delete",
          "prefix": true,
          "range": [
            11,
            34,
          ],
          "start": 11,
          "type": "UnaryExpression",
        },
        "end": 34,
        "expression": true,
        "generator": false,
        "loc": {
          "end": {
            "column": 34,
            "line": 1,
          },
          "start": {
            "column": 0,
            "line": 1,
          },
        },
        "params": [
          {
            "end": 7,
            "loc": {
              "end": {
                "column": 7,
                "line": 1,
              },
              "start": {
                "column": 6,
                "line": 1,
              },
            },
            "name": "x",
            "range": [
              6,
              7,
            ],
            "start": 6,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          34,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "loc": {
        "end": {
          "column": 34,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        34,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 34,
  "loc": {
    "end": {
      "column": 34,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    34,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > f(a, async (b, c) => await [b, c], d) 1`] = `
{
  "body": [
    {
      "end": 37,
      "expression": {
        "arguments": [
          {
            "end": 3,
            "name": "a",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          {
            "async": true,
            "body": {
              "argument": {
                "elements": [
                  {
                    "end": 29,
                    "name": "b",
                    "range": [
                      28,
                      29,
                    ],
                    "start": 28,
                    "type": "Identifier",
                  },
                  {
                    "end": 32,
                    "name": "c",
                    "range": [
                      31,
                      32,
                    ],
                    "start": 31,
                    "type": "Identifier",
                  },
                ],
                "end": 33,
                "range": [
                  27,
                  33,
                ],
                "start": 27,
                "type": "ArrayExpression",
              },
              "end": 33,
              "range": [
                21,
                33,
              ],
              "start": 21,
              "type": "AwaitExpression",
            },
            "end": 33,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 13,
                "name": "b",
                "range": [
                  12,
                  13,
                ],
                "start": 12,
                "type": "Identifier",
              },
              {
                "end": 16,
                "name": "c",
                "range": [
                  15,
                  16,
                ],
                "start": 15,
                "type": "Identifier",
              },
            ],
            "range": [
              5,
              33,
            ],
            "start": 5,
            "type": "ArrowFunctionExpression",
          },
          {
            "end": 36,
            "name": "d",
            "range": [
              35,
              36,
            ],
            "start": 35,
            "type": "Identifier",
          },
        ],
        "callee": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 37,
        "optional": false,
        "range": [
          0,
          37,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        37,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 37,
  "range": [
    0,
    37,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > f(a, async b => await b) 1`] = `
{
  "body": [
    {
      "end": 24,
      "expression": {
        "arguments": [
          {
            "end": 3,
            "name": "a",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          {
            "async": true,
            "body": {
              "argument": {
                "end": 23,
                "name": "b",
                "range": [
                  22,
                  23,
                ],
                "start": 22,
                "type": "Identifier",
              },
              "end": 23,
              "range": [
                16,
                23,
              ],
              "start": 16,
              "type": "AwaitExpression",
            },
            "end": 23,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 12,
                "name": "b",
                "range": [
                  11,
                  12,
                ],
                "start": 11,
                "type": "Identifier",
              },
            ],
            "range": [
              5,
              23,
            ],
            "start": 5,
            "type": "ArrowFunctionExpression",
          },
        ],
        "callee": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 24,
        "optional": false,
        "range": [
          0,
          24,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        24,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 24,
  "range": [
    0,
    24,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > f(async ()=>c) 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "arguments": [
          {
            "async": true,
            "body": {
              "end": 13,
              "name": "c",
              "range": [
                12,
                13,
              ],
              "start": 12,
              "type": "Identifier",
            },
            "end": 13,
            "expression": true,
            "generator": false,
            "params": [],
            "range": [
              2,
              13,
            ],
            "start": 2,
            "type": "ArrowFunctionExpression",
          },
        ],
        "callee": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 14,
        "optional": false,
        "range": [
          0,
          14,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > id = async x => x, square = async (y) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "left": {
              "name": "id",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "async": true,
              "body": {
                "name": "x",
                "type": "Identifier",
              },
              "expression": true,
              "generator": false,
              "params": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "type": "AssignmentExpression",
          },
          {
            "left": {
              "name": "square",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "async": true,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "expression": false,
              "generator": false,
              "params": [
                {
                  "name": "y",
                  "type": "Identifier",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "type": "AssignmentExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > new async() 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "arguments": [],
        "callee": {
          "end": 9,
          "name": "async",
          "range": [
            4,
            9,
          ],
          "start": 4,
          "type": "Identifier",
        },
        "end": 11,
        "range": [
          0,
          11,
        ],
        "start": 0,
        "type": "NewExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > var f = cond ? x=>{x.foo } : x=>x + x + x + x + x + x + (async x =>x) 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 69,
          "id": {
            "end": 5,
            "name": "f",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "init": {
            "alternate": {
              "async": false,
              "body": {
                "end": 69,
                "left": {
                  "end": 53,
                  "left": {
                    "end": 49,
                    "left": {
                      "end": 45,
                      "left": {
                        "end": 41,
                        "left": {
                          "end": 37,
                          "left": {
                            "end": 33,
                            "name": "x",
                            "range": [
                              32,
                              33,
                            ],
                            "start": 32,
                            "type": "Identifier",
                          },
                          "operator": "+",
                          "range": [
                            32,
                            37,
                          ],
                          "right": {
                            "end": 37,
                            "name": "x",
                            "range": [
                              36,
                              37,
                            ],
                            "start": 36,
                            "type": "Identifier",
                          },
                          "start": 32,
                          "type": "BinaryExpression",
                        },
                        "operator": "+",
                        "range": [
                          32,
                          41,
                        ],
                        "right": {
                          "end": 41,
                          "name": "x",
                          "range": [
                            40,
                            41,
                          ],
                          "start": 40,
                          "type": "Identifier",
                        },
                        "start": 32,
                        "type": "BinaryExpression",
                      },
                      "operator": "+",
                      "range": [
                        32,
                        45,
                      ],
                      "right": {
                        "end": 45,
                        "name": "x",
                        "range": [
                          44,
                          45,
                        ],
                        "start": 44,
                        "type": "Identifier",
                      },
                      "start": 32,
                      "type": "BinaryExpression",
                    },
                    "operator": "+",
                    "range": [
                      32,
                      49,
                    ],
                    "right": {
                      "end": 49,
                      "name": "x",
                      "range": [
                        48,
                        49,
                      ],
                      "start": 48,
                      "type": "Identifier",
                    },
                    "start": 32,
                    "type": "BinaryExpression",
                  },
                  "operator": "+",
                  "range": [
                    32,
                    53,
                  ],
                  "right": {
                    "end": 53,
                    "name": "x",
                    "range": [
                      52,
                      53,
                    ],
                    "start": 52,
                    "type": "Identifier",
                  },
                  "start": 32,
                  "type": "BinaryExpression",
                },
                "operator": "+",
                "range": [
                  32,
                  69,
                ],
                "right": {
                  "async": true,
                  "body": {
                    "end": 68,
                    "name": "x",
                    "range": [
                      67,
                      68,
                    ],
                    "start": 67,
                    "type": "Identifier",
                  },
                  "end": 68,
                  "expression": true,
                  "generator": false,
                  "params": [
                    {
                      "end": 64,
                      "name": "x",
                      "range": [
                        63,
                        64,
                      ],
                      "start": 63,
                      "type": "Identifier",
                    },
                  ],
                  "range": [
                    57,
                    68,
                  ],
                  "start": 57,
                  "type": "ArrowFunctionExpression",
                },
                "start": 32,
                "type": "BinaryExpression",
              },
              "end": 69,
              "expression": true,
              "generator": false,
              "params": [
                {
                  "end": 30,
                  "name": "x",
                  "range": [
                    29,
                    30,
                  ],
                  "start": 29,
                  "type": "Identifier",
                },
              ],
              "range": [
                29,
                69,
              ],
              "start": 29,
              "type": "ArrowFunctionExpression",
            },
            "consequent": {
              "async": false,
              "body": {
                "body": [
                  {
                    "end": 24,
                    "expression": {
                      "computed": false,
                      "end": 24,
                      "object": {
                        "end": 20,
                        "name": "x",
                        "range": [
                          19,
                          20,
                        ],
                        "start": 19,
                        "type": "Identifier",
                      },
                      "optional": false,
                      "property": {
                        "end": 24,
                        "name": "foo",
                        "range": [
                          21,
                          24,
                        ],
                        "start": 21,
                        "type": "Identifier",
                      },
                      "range": [
                        19,
                        24,
                      ],
                      "start": 19,
                      "type": "MemberExpression",
                    },
                    "range": [
                      19,
                      24,
                    ],
                    "start": 19,
                    "type": "ExpressionStatement",
                  },
                ],
                "end": 26,
                "range": [
                  18,
                  26,
                ],
                "start": 18,
                "type": "BlockStatement",
              },
              "end": 26,
              "expression": false,
              "generator": false,
              "params": [
                {
                  "end": 16,
                  "name": "x",
                  "range": [
                    15,
                    16,
                  ],
                  "start": 15,
                  "type": "Identifier",
                },
              ],
              "range": [
                15,
                26,
              ],
              "start": 15,
              "type": "ArrowFunctionExpression",
            },
            "end": 69,
            "range": [
              8,
              69,
            ],
            "start": 8,
            "test": {
              "end": 12,
              "name": "cond",
              "range": [
                8,
                12,
              ],
              "start": 8,
              "type": "Identifier",
            },
            "type": "ConditionalExpression",
          },
          "range": [
            4,
            69,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 69,
      "kind": "var",
      "range": [
        0,
        69,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 69,
  "range": [
    0,
    69,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Async arrow > Expressions - Async arrow > x + (async y => x) 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "end": 18,
        "left": {
          "end": 1,
          "name": "x",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "+",
        "range": [
          0,
          18,
        ],
        "right": {
          "async": true,
          "body": {
            "end": 17,
            "name": "x",
            "range": [
              16,
              17,
            ],
            "start": 16,
            "type": "Identifier",
          },
          "end": 17,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 12,
              "name": "y",
              "range": [
                11,
                12,
              ],
              "start": 11,
              "type": "Identifier",
            },
          ],
          "range": [
            5,
            17,
          ],
          "start": 5,
          "type": "ArrowFunctionExpression",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;
