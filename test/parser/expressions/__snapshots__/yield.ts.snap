// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Expressions - Yield > Expressions - Yield (fail) > "function *gf(b, a = 1 + yield) { 1`] = `
"SyntaxError [1:0-1:33]: Unterminated string literal
> 1 | "function *gf(b, a = 1 + yield) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Unterminated string literal"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ("string" = ({x} = (function* y(z) { (yield) }))) => (p); 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | ("string" = ({x} = (function* y(z) { (yield) }))) => (p);
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ([yield] = x) 1`] = `
"SyntaxError [1:2-1:7]: 'yield' may not be used as an identifier in this context
> 1 | ([yield] = x)
    |   ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ([yield]) => x 1`] = `
"SyntaxError [1:2-1:7]: 'yield' may not be used as an identifier in this context
> 1 | ([yield]) => x
    |   ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ({ *g1() {   return {yield}  }}) 1`] = `
"SyntaxError [1:26-1:27]: 'yield' may not be used as an identifier in this context
> 1 | ({ *g1() {   return {yield}  }})
    |                           ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ({x} = yield) => {} 1`] = `
"SyntaxError [1:7-1:12]: 'yield' may not be used as an identifier in this context
> 1 | ({x} = yield) => {}
    |        ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ({yield} = x) 1`] = `
"SyntaxError [1:7-1:8]: Unexpected strict mode reserved word
> 1 | ({yield} = x)
    |        ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ({yield}) => x 1`] = `
"SyntaxError [1:7-1:8]: Unexpected strict mode reserved word
> 1 | ({yield}) => x
    |        ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > ({yield}) 1`] = `
"SyntaxError [1:7-1:8]: Unexpected strict mode reserved word
> 1 | ({yield})
    |        ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (a = yield 3) {} 1`] = `
"SyntaxError [1:11-1:12]: Expected ')'
> 1 | (a = yield 3) {}
    |            ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (a=yield) {} 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: '{'
> 1 | (a=yield) {}
    |           ^ Unexpected token: '{'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (function *(x, ...yield){}) 1`] = `
"SyntaxError [1:23-1:24]: Yield expression not allowed in formal parameter
> 1 | (function *(x, ...yield){})
    |                        ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (function *f(){  ({*g(x=yield){}})  }) 1`] = `
"SyntaxError [1:29-1:30]: Yield expression not allowed in formal parameter
> 1 | (function *f(){  ({*g(x=yield){}})  })
    |                              ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (x = delete ((yield) = f)) => {} 1`] = `
"SyntaxError [1:14-1:19]: 'yield' may not be used as an identifier in this context
> 1 | (x = delete ((yield) = f)) => {}
    |               ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (x = x + yield); 1`] = `
"SyntaxError [1:9-1:14]: 'yield' may not be used as an identifier in this context
> 1 | (x = x + yield);
    |          ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (x = x) = x; 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | (x = x) = x;
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (yield = 1) {} 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: '{'
> 1 | (yield = 1) {}
    |             ^ Unexpected token: '{'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (yield 3) {} 1`] = `
"SyntaxError [1:7-1:8]: Expected ')'
> 1 | (yield 3) {}
    |        ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > (yield) = 1; 1`] = `
"SyntaxError [1:1-1:6]: 'yield' may not be used as an identifier in this context
> 1 | (yield) = 1;
    |  ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = [yield y]) => z } 1`] = `
"SyntaxError [1:14-1:15]: Expected ']'
> 1 | { (x = [yield y]) => z }
    |               ^ Expected ']'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = [yield y]) } 1`] = `
"SyntaxError [1:14-1:15]: Expected ']'
> 1 | { (x = [yield y]) }
    |               ^ Expected ']'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = {[yield y]: 1}) => z } 1`] = `
"SyntaxError [1:15-1:16]: Expected ']'
> 1 | { (x = {[yield y]: 1}) => z }
    |                ^ Expected ']'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = {[yield y]: 1}) } 1`] = `
"SyntaxError [1:15-1:16]: Expected ']'
> 1 | { (x = {[yield y]: 1}) }
    |                ^ Expected ']'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y + foo(a, yield y)) => x; } 1`] = `
"SyntaxError [1:24-1:25]: Expected ')'
> 1 | { (x = y + foo(a, yield y)) => x; }
    |                         ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y + foo(a, yield y)); } 1`] = `
"SyntaxError [1:24-1:25]: Expected ')'
> 1 | { (x = y + foo(a, yield y)); }
    |                         ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y + yield y) => x; } 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | { (x = y + yield y) => x; }
    |                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y + yield y); } 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | { (x = y + yield y); }
    |                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y + yield z) => {}; } 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | { (x = y + yield z) => {}; }
    |                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y = yield z) => {}; } 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | { (x = y = yield z) => {}; }
    |                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = y = yield z); } 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | { (x = y = yield z); }
    |                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > { (x = yield) = {}; } 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | { (x = yield) = {}; }
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > 5 + yield x + y 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: 'identifier'
> 1 | 5 + yield x + y
    |           ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > 5 + yield x 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: 'identifier'
> 1 | 5 + yield x
    |           ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > async (x = yield y) 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | async (x = yield y)
    |                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > async (yield x) 1`] = `
"SyntaxError [1:13-1:14]: Expected ')'
> 1 | async (yield x)
    |              ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > async (yield) = f 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | async (yield) = f
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > async function f(){ yield a,b; } 1`] = `
"SyntaxError [1:26-1:27]: Unexpected token: 'identifier'
> 1 | async function f(){ yield a,b; }
    |                           ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > call(yield x + y) 1`] = `
"SyntaxError [1:11-1:12]: Expected ')'
> 1 | call(yield x + y)
    |            ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > call(yield x) 1`] = `
"SyntaxError [1:11-1:12]: Expected ')'
> 1 | call(yield x)
    |            ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > fuction *f() {  return +yield foo;  } 1`] = `
"SyntaxError [1:13-1:14]: Unexpected token: '{'
> 1 | fuction *f() {  return +yield foo;  }
    |              ^ Unexpected token: '{'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *a(){({yield} = {})} 1`] = `
"SyntaxError [1:21-1:22]: 'yield' may not be used as an identifier in this context
> 1 | function *a(){({yield} = {})}
    |                      ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *a(){yield
*a} 1`] = `
"SyntaxError [2:0-2:1]: Unexpected token: '*'
  1 | function *a(){yield
> 2 | *a}
    | ^ Unexpected token: '*'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *a(){yield*} 1`] = `
"SyntaxError [1:20-1:21]: Unexpected token: '}'
> 1 | function *a(){yield*}
    |                     ^ Unexpected token: '}'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return !yield;  } 1`] = `
"SyntaxError [1:30-1:31]: Invalid left-hand side in assignment
> 1 | function *f() {  return !yield;  }
    |                               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return +yield;  } 1`] = `
"SyntaxError [1:30-1:31]: Invalid left-hand side in assignment
> 1 | function *f() {  return +yield;  }
    |                               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return --yield;  } 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | function *f() {  return --yield;  }
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return await yield foo;  } 1`] = `
"SyntaxError [1:30-1:35]: Unexpected token: 'yield'
> 1 | function *f() {  return await yield foo;  }
    |                               ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return delete yield foo;  } 1`] = `
"SyntaxError [1:37-1:40]: Invalid left-hand side in assignment
> 1 | function *f() {  return delete yield foo;  }
    |                                      ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return delete yield;  } 1`] = `
"SyntaxError [1:36-1:37]: Invalid left-hand side in assignment
> 1 | function *f() {  return delete yield;  }
    |                                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return typeof yield foo;  } 1`] = `
"SyntaxError [1:37-1:40]: Invalid left-hand side in assignment
> 1 | function *f() {  return typeof yield foo;  }
    |                                      ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return typeof yield;  } 1`] = `
"SyntaxError [1:36-1:37]: Invalid left-hand side in assignment
> 1 | function *f() {  return typeof yield;  }
    |                                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return void yield foo;  } 1`] = `
"SyntaxError [1:35-1:38]: Invalid left-hand side in assignment
> 1 | function *f() {  return void yield foo;  }
    |                                    ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() {  return void yield;  } 1`] = `
"SyntaxError [1:34-1:35]: Invalid left-hand side in assignment
> 1 | function *f() {  return void yield;  }
    |                                   ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() { yield ? 1 : 1 ; } 1`] = `
"SyntaxError [1:22-1:23]: Can not have a \`yield\` expression on the left side of a ternary
> 1 | function *f() { yield ? 1 : 1 ; }
    |                       ^ Can not have a \`yield\` expression on the left side of a ternary"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f() { yield ? yield : yield ; } 1`] = `
"SyntaxError [1:22-1:23]: Can not have a \`yield\` expression on the left side of a ternary
> 1 | function *f() { yield ? yield : yield ; }
    |                       ^ Can not have a \`yield\` expression on the left side of a ternary"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  ({*g(x=yield){}})  } 1`] = `
"SyntaxError [1:28-1:29]: Yield expression not allowed in formal parameter
> 1 | function *f(){  ({*g(x=yield){}})  }
    |                             ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  class x extends yield y{}  } 1`] = `
"SyntaxError [1:38-1:39]: Invalid left-hand side in assignment
> 1 | function *f(){  class x extends yield y{}  }
    |                                       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  class x{*foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:37-1:38]: Yield expression not allowed in formal parameter
> 1 | function *f(){  class x{*foo(a=yield x){}}  }
    |                                      ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  class x{*foo(a=yield){}}  } 1`] = `
"SyntaxError [1:36-1:37]: Yield expression not allowed in formal parameter
> 1 | function *f(){  class x{*foo(a=yield){}}  }
    |                                     ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  class x{constructor(a=yield x){}}  } 1`] = `
"SyntaxError [1:38-1:43]: 'yield' may not be used as an identifier in this context
> 1 | function *f(){  class x{constructor(a=yield x){}}  }
    |                                       ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  class x{constructor(a=yield){}}  } 1`] = `
"SyntaxError [1:38-1:43]: 'yield' may not be used as an identifier in this context
> 1 | function *f(){  class x{constructor(a=yield){}}  }
    |                                       ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  class x{foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:30-1:35]: 'yield' may not be used as an identifier in this context
> 1 | function *f(){  class x{foo(a=yield x){}}  }
    |                               ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return (x=yield) => x;  } 1`] = `
"SyntaxError [1:33-1:35]: Yield expression not allowed in formal parameter
> 1 | function *f(){  return (x=yield) => x;  }
    |                                  ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return *(x=yield y) => x;  } 1`] = `
"SyntaxError [1:23-1:24]: Unexpected token: '*'
> 1 | function *f(){  return *(x=yield y) => x;  }
    |                        ^ Unexpected token: '*'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return *(x=yield y) => x;  } 2`] = `
"SyntaxError [1:23-1:24]: Unexpected token: '*'
> 1 | function *f(){  return *(x=yield y) => x;  }
    |                        ^ Unexpected token: '*'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return *(x=yield) => x;  } 1`] = `
"SyntaxError [1:23-1:24]: Unexpected token: '*'
> 1 | function *f(){  return *(x=yield) => x;  }
    |                        ^ Unexpected token: '*'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return function(x=yield y) {};  } 1`] = `
"SyntaxError [1:40-1:41]: Expected ')'
> 1 | function *f(){  return function(x=yield y) {};  }
    |                                         ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return function*(x=yield y) {};  } 1`] = `
"SyntaxError [1:41-1:42]: Yield expression not allowed in formal parameter
> 1 | function *f(){  return function*(x=yield y) {};  }
    |                                          ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  return function*(x=yield) {};  } 1`] = `
"SyntaxError [1:40-1:41]: Yield expression not allowed in formal parameter
> 1 | function *f(){  return function*(x=yield) {};  }
    |                                         ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  x = {*foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:34-1:35]: Yield expression not allowed in formal parameter
> 1 | function *f(){  x = {*foo(a=yield x){}}  }
    |                                   ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  x = {*foo(a=yield){}}  } 1`] = `
"SyntaxError [1:33-1:34]: Yield expression not allowed in formal parameter
> 1 | function *f(){  x = {*foo(a=yield){}}  }
    |                                  ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  x = {foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:33-1:34]: Expected ')'
> 1 | function *f(){  x = {foo(a=yield x){}}  }
    |                                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){  x = {foo(a=yield x){}}  } 2`] = `
"SyntaxError [1:33-1:34]: Expected ')'
> 1 | function *f(){  x = {foo(a=yield x){}}  }
    |                                  ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ ([x] = yield x) => {} } 1`] = `
"SyntaxError [1:31-1:33]: Yield expression not allowed in formal parameter
> 1 | function *f(){ ([x] = yield x) => {} }
    |                                ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ ({x} = yield x) => {} } 1`] = `
"SyntaxError [1:31-1:33]: Yield expression not allowed in formal parameter
> 1 | function *f(){ ({x} = yield x) => {} }
    |                                ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ (yield) = 1; } 1`] = `
"SyntaxError [1:23-1:24]: Invalid left-hand side in assignment
> 1 | function *f(){ (yield) = 1; }
    |                        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ async (x = (yield y)) => {} } 1`] = `
"SyntaxError [1:37-1:39]: Yield expression not allowed in formal parameter
> 1 | function *f(){ async (x = (yield y)) => {} }
    |                                      ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ async (x = (yield)) => {} } 1`] = `
"SyntaxError [1:35-1:37]: Yield expression not allowed in formal parameter
> 1 | function *f(){ async (x = (yield)) => {} }
    |                                    ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ async (x = yield y) => {} } 1`] = `
"SyntaxError [1:35-1:37]: Yield expression not allowed in formal parameter
> 1 | function *f(){ async (x = yield y) => {} }
    |                                    ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ async (x = yield) => {} } 1`] = `
"SyntaxError [1:33-1:35]: Yield expression not allowed in formal parameter
> 1 | function *f(){ async (x = yield) => {} }
    |                                  ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ async (x = z = yield y) => {} } 1`] = `
"SyntaxError [1:39-1:41]: Yield expression not allowed in formal parameter
> 1 | function *f(){ async (x = z = yield y) => {} }
    |                                        ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ async (x = z = yield) => {} } 1`] = `
"SyntaxError [1:37-1:39]: Yield expression not allowed in formal parameter
> 1 | function *f(){ async (x = z = yield) => {} }
    |                                      ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ return function(x = yield y){}; } 1`] = `
"SyntaxError [1:41-1:42]: Expected ')'
> 1 | function *f(){ return function(x = yield y){}; }
    |                                          ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(){ yield = 1; } 1`] = `
"SyntaxError [1:21-1:22]: Invalid left-hand side in assignment
> 1 | function *f(){ yield = 1; }
    |                      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(x = (yield) = f) {} 1`] = `
"SyntaxError [1:22-1:23]: Yield expression not allowed in formal parameter
> 1 | function *f(x = (yield) = f) {}
    |                       ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(x = delete ((yield) = f)) {} 1`] = `
"SyntaxError [1:30-1:31]: Yield expression not allowed in formal parameter
> 1 | function *f(x = delete ((yield) = f)) {}
    |                               ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(x=yield){ } 1`] = `
"SyntaxError [1:19-1:20]: Yield expression not allowed in formal parameter
> 1 | function *f(x=yield){ }
    |                    ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(yield){ } 1`] = `
"SyntaxError [1:12-1:17]: Yield expression not allowed in formal parameter
> 1 | function *f(yield){ }
    |             ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *f(yield){} 1`] = `
"SyntaxError [1:12-1:17]: Yield expression not allowed in formal parameter
> 1 | function *f(yield){}
    |             ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = u + yield z) => {}; } 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | function *g() { (x = u + yield z) => {}; }
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = y + yield y) => x; } 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | function *g() { (x = y + yield y) => x; }
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = y + yield y); } 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | function *g() { (x = y + yield y); }
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = y + yield z) => {}; } 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | function *g() { (x = y + yield z) => {}; }
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = y + yield) => x; } 1`] = `
"SyntaxError [1:30-1:31]: Invalid left-hand side in assignment
> 1 | function *g() { (x = y + yield) => x; }
    |                               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = y + yield); } 1`] = `
"SyntaxError [1:30-1:31]: Invalid left-hand side in assignment
> 1 | function *g() { (x = y + yield); }
    |                               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = y = yield z) => {}; } 1`] = `
"SyntaxError [1:34-1:36]: Yield expression not allowed in formal parameter
> 1 | function *g() { (x = y = yield z) => {}; }
    |                                   ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = yield) = {}; } 1`] = `
"SyntaxError [1:28-1:29]: Invalid left-hand side in assignment
> 1 | function *g() { (x = yield) = {}; }
    |                             ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { (x = yield) => {}; } 1`] = `
"SyntaxError [1:28-1:30]: Yield expression not allowed in formal parameter
> 1 | function *g() { (x = yield) => {}; }
    |                             ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y + foo(a, yield y)) => x; } 1`] = `
"SyntaxError [1:48-1:50]: Yield expression not allowed in formal parameter
> 1 | function *g() { async (x = y + foo(a, yield y)) => x; }
    |                                                 ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y + yield y) => x; } 1`] = `
"SyntaxError [1:37-1:38]: Invalid left-hand side in assignment
> 1 | function *g() { async (x = y + yield y) => x; }
    |                                      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y + yield y); } 1`] = `
"SyntaxError [1:37-1:38]: Invalid left-hand side in assignment
> 1 | function *g() { async (x = y + yield y); }
    |                                      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y + yield z) => {}; } 1`] = `
"SyntaxError [1:37-1:38]: Invalid left-hand side in assignment
> 1 | function *g() { async (x = y + yield z) => {}; }
    |                                      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y + yield) => x; } 1`] = `
"SyntaxError [1:36-1:37]: Invalid left-hand side in assignment
> 1 | function *g() { async (x = y + yield) => x; }
    |                                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y + yield); } 1`] = `
"SyntaxError [1:36-1:37]: Invalid left-hand side in assignment
> 1 | function *g() { async (x = y + yield); }
    |                                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = y = yield z) => {}; } 1`] = `
"SyntaxError [1:40-1:42]: Yield expression not allowed in formal parameter
> 1 | function *g() { async (x = y = yield z) => {}; }
    |                                         ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = yield) = {}; } 1`] = `
"SyntaxError [1:34-1:35]: Invalid left-hand side in assignment
> 1 | function *g() { async (x = yield) = {}; }
    |                                   ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async (x = yield) => {}; } 1`] = `
"SyntaxError [1:34-1:36]: Yield expression not allowed in formal parameter
> 1 | function *g() { async (x = yield) => {}; }
    |                                   ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async yield = {}; } 1`] = `
"SyntaxError [1:22-1:27]: Unexpected token: 'yield'
> 1 | function *g() { async yield = {}; }
    |                       ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { async yield => {}; } 1`] = `
"SyntaxError [1:22-1:27]: Unexpected token: 'yield'
> 1 | function *g() { async yield => {}; }
    |                       ^^^^^ Unexpected token: 'yield'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { function f(x = x + foo(a, yield y)) {}; } 1`] = `
"SyntaxError [1:48-1:49]: Expected ')'
> 1 | function *g() { function f(x = x + foo(a, yield y)) {}; }
    |                                                 ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { function f(x = x + yield y) {}; } 1`] = `
"SyntaxError [1:41-1:42]: Expected ')'
> 1 | function *g() { function f(x = x + yield y) {}; }
    |                                          ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { function f(x = y = yield z) {}; } 1`] = `
"SyntaxError [1:41-1:42]: Expected ')'
> 1 | function *g() { function f(x = y = yield z) {}; }
    |                                          ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { new yield } 1`] = `
"SyntaxError [1:26-1:27]: Invalid left-hand side in assignment
> 1 | function *g() { new yield }
    |                           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { new yield foo} 1`] = `
"SyntaxError [1:26-1:29]: Invalid left-hand side in assignment
> 1 | function *g() { new yield foo}
    |                           ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { yield = {}; } 1`] = `
"SyntaxError [1:22-1:23]: Invalid left-hand side in assignment
> 1 | function *g() { yield = {}; }
    |                       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g() { yield => {}; } 1`] = `
"SyntaxError [1:22-1:24]: Unexpected token: '=>'
> 1 | function *g() { yield => {}; }
    |                       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(){ (x = {[yield y]: 1}) => z } 1`] = `
"SyntaxError [1:36-1:38]: Yield expression not allowed in formal parameter
> 1 | function *g(){ (x = {[yield y]: 1}) => z }
    |                                     ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(){ (x = {[yield]: 1}) => z } 1`] = `
"SyntaxError [1:34-1:36]: Yield expression not allowed in formal parameter
> 1 | function *g(){ (x = {[yield]: 1}) => z }
    |                                   ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(){ async (x = [yield y]) => z } 1`] = `
"SyntaxError [1:37-1:39]: Yield expression not allowed in formal parameter
> 1 | function *g(){ async (x = [yield y]) => z }
    |                                      ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(){ async (x = [yield]) => z } 1`] = `
"SyntaxError [1:35-1:37]: Yield expression not allowed in formal parameter
> 1 | function *g(){ async (x = [yield]) => z }
    |                                    ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(){ async (x = {[yield y]: 1}) => z } 1`] = `
"SyntaxError [1:42-1:44]: Yield expression not allowed in formal parameter
> 1 | function *g(){ async (x = {[yield y]: 1}) => z }
    |                                           ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(){ async (x = {[yield]: 1}) => z } 1`] = `
"SyntaxError [1:40-1:42]: Yield expression not allowed in formal parameter
> 1 | function *g(){ async (x = {[yield]: 1}) => z }
    |                                         ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *g(a, b, c, ...yield){} 1`] = `
"SyntaxError [1:29-1:30]: Yield expression not allowed in formal parameter
> 1 | function *g(a, b, c, ...yield){}
    |                              ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *gf() { (a = (yield) => {}) => {}; } 1`] = `
"SyntaxError [1:30-1:32]: The left-hand side of the arrow can only be destructed through assignment
> 1 | function *gf() { (a = (yield) => {}) => {}; }
    |                               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *gf(){ function yield(){}; } 1`] = `
"SyntaxError [1:25-1:30]: 'yield' may not be used as an identifier in this context
> 1 | function *gf(){ function yield(){}; }
    |                          ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *gf({yield}){} 1`] = `
"SyntaxError [1:19-1:20]: 'yield' may not be used as an identifier in this context
> 1 | function *gf({yield}){}
    |                    ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *gf(a = (10, yield, 20)) {} 1`] = `
"SyntaxError [1:27-1:28]: Yield expression not allowed in formal parameter
> 1 | function *gf(a = (10, yield, 20)) {}
    |                            ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *gf(b, a = 1 + yield) {} 1`] = `
"SyntaxError [1:29-1:30]: Yield expression not allowed in formal parameter
> 1 | function *gf(b, a = 1 + yield) {}
    |                              ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function *gf(b, yield) {} 1`] = `
"SyntaxError [1:16-1:21]: Yield expression not allowed in formal parameter
> 1 | function *gf(b, yield) {}
    |                 ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  class x{*foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:36-1:37]: Yield expression not allowed in formal parameter
> 1 | function f(){  class x{*foo(a=yield x){}}  }
    |                                     ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  class x{*foo(a=yield){}}  } 1`] = `
"SyntaxError [1:35-1:36]: Yield expression not allowed in formal parameter
> 1 | function f(){  class x{*foo(a=yield){}}  }
    |                                    ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  class x{foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:29-1:34]: 'yield' may not be used as an identifier in this context
> 1 | function f(){  class x{foo(a=yield x){}}  }
    |                              ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  class x{foo(a=yield){}}  } 1`] = `
"SyntaxError [1:29-1:34]: 'yield' may not be used as an identifier in this context
> 1 | function f(){  class x{foo(a=yield){}}  }
    |                              ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  return (x=yield y) => x;  } 1`] = `
"SyntaxError [1:31-1:32]: Expected ')'
> 1 | function f(){  return (x=yield y) => x;  }
    |                                ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  return *(x=yield y) => x;  } 1`] = `
"SyntaxError [1:22-1:23]: Unexpected token: '*'
> 1 | function f(){  return *(x=yield y) => x;  }
    |                       ^ Unexpected token: '*'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  return *(x=yield) => x;  } 1`] = `
"SyntaxError [1:22-1:23]: Unexpected token: '*'
> 1 | function f(){  return *(x=yield) => x;  }
    |                       ^ Unexpected token: '*'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  return function(x=yield y) {};  } 1`] = `
"SyntaxError [1:39-1:40]: Expected ')'
> 1 | function f(){  return function(x=yield y) {};  }
    |                                        ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  return function*(x=yield y) {};  } 1`] = `
"SyntaxError [1:40-1:41]: Yield expression not allowed in formal parameter
> 1 | function f(){  return function*(x=yield y) {};  }
    |                                         ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  return function*(x=yield) {};  } 1`] = `
"SyntaxError [1:39-1:40]: Yield expression not allowed in formal parameter
> 1 | function f(){  return function*(x=yield) {};  }
    |                                        ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  x = {*foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:33-1:34]: Yield expression not allowed in formal parameter
> 1 | function f(){  x = {*foo(a=yield x){}}  }
    |                                  ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  x = {*foo(a=yield){}}  } 1`] = `
"SyntaxError [1:32-1:33]: Yield expression not allowed in formal parameter
> 1 | function f(){  x = {*foo(a=yield){}}  }
    |                                 ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){  x = {foo(a=yield x){}}  } 1`] = `
"SyntaxError [1:32-1:33]: Expected ')'
> 1 | function f(){  x = {foo(a=yield x){}}  }
    |                                 ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){ 5 + yield x + y; } 1`] = `
"SyntaxError [1:24-1:25]: Unexpected token: 'identifier'
> 1 | function f(){ 5 + yield x + y; }
    |                         ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){ call(yield x + y); } 1`] = `
"SyntaxError [1:25-1:26]: Expected ')'
> 1 | function f(){ call(yield x + y); }
    |                          ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){ call(yield x); } 1`] = `
"SyntaxError [1:25-1:26]: Expected ')'
> 1 | function f(){ call(yield x); }
    |                          ^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){ yield x + y; } 1`] = `
"SyntaxError [1:20-1:21]: Unexpected token: 'identifier'
> 1 | function f(){ yield x + y; }
    |                     ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function f(){ yield x; } 1`] = `
"SyntaxError [1:20-1:21]: Unexpected token: 'identifier'
> 1 | function f(){ yield x; }
    |                     ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* f(){ 5 + yield } 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | function* f(){ 5 + yield }
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* f(){ 5 + yield x + y; } 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | function* f(){ 5 + yield x + y; }
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* f(){ 5 + yield x; } 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | function* f(){ 5 + yield x; }
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* foo() { class x extends (async yield* (e = "x") => {}) {} } 1`] = `
"SyntaxError [1:41-1:46]: Expected ')'
> 1 | function* foo() { class x extends (async yield* (e = "x") => {}) {} }
    |                                          ^^^^^ Expected ')'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* g() { (function yield() {}) } 1`] = `
"SyntaxError [1:26-1:31]: Unexpected strict mode reserved word
> 1 | function* g() { (function yield() {}) }
    |                           ^^^^^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* g() { yield 3 + yield 4; } 1`] = `
"SyntaxError [1:32-1:33]: Invalid left-hand side in assignment
> 1 | function* g() { yield 3 + yield 4; }
    |                                 ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* g() { yield 3 + yield; } 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | function* g() { yield 3 + yield; }
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { (yield) = 10; } 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | function* gf() { (yield) = 10; }
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { (yield)++; } 1`] = `
"SyntaxError [1:24-1:26]: Invalid increment/decrement operand
> 1 | function* gf() { (yield)++; }
    |                         ^^ Invalid increment/decrement operand"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { +yield 2; } 1`] = `
"SyntaxError [1:24-1:25]: Invalid left-hand side in assignment
> 1 | function* gf() { +yield 2; }
    |                         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { +yield; } 1`] = `
"SyntaxError [1:23-1:24]: Invalid left-hand side in assignment
> 1 | function* gf() { +yield; }
    |                        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { +yield; } 2`] = `
"SyntaxError [1:23-1:24]: Invalid left-hand side in assignment
> 1 | function* gf() { +yield; }
    |                        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { 1 + yield 2; } 1`] = `
"SyntaxError [1:27-1:28]: Invalid left-hand side in assignment
> 1 | function* gf() { 1 + yield 2; }
    |                            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { 1 + yield* "foo"; } 1`] = `
"SyntaxError [1:26-1:27]: Invalid left-hand side in assignment
> 1 | function* gf() { 1 + yield* "foo"; }
    |                           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { 1 + yield; } 1`] = `
"SyntaxError [1:26-1:27]: Invalid left-hand side in assignment
> 1 | function* gf() { 1 + yield; }
    |                           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { class yield { } } 1`] = `
"SyntaxError [1:23-1:28]: 'yield' may not be used as an identifier in this context
> 1 | function* gf() { class yield { } }
    |                        ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { const yield = 10; } 1`] = `
"SyntaxError [1:23-1:28]: Yield expression not allowed in formal parameter
> 1 | function* gf() { const yield = 10; }
    |                        ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { const yield = 10; } 2`] = `
"SyntaxError [1:23-1:28]: Yield expression not allowed in formal parameter
> 1 | function* gf() { const yield = 10; }
    |                        ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { function yield() { } } 1`] = `
"SyntaxError [1:26-1:31]: 'yield' may not be used as an identifier in this context
> 1 | function* gf() { function yield() { } }
    |                           ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { function* yield() { } } 1`] = `
"SyntaxError [1:27-1:32]: 'yield' may not be used as an identifier in this context
> 1 | function* gf() { function* yield() { } }
    |                            ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { let yield;  1`] = `
"SyntaxError [1:21-1:26]: Yield expression not allowed in formal parameter
> 1 | function* gf() { let yield; 
    |                      ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { let yield; } 1`] = `
"SyntaxError [1:21-1:26]: Yield expression not allowed in formal parameter
> 1 | function* gf() { let yield; }
    |                      ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x = yield 0) => { }; } 1`] = `
"SyntaxError [1:39-1:41]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x = yield 0) => { }; }
    |                                        ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x = yield) => { }; } 1`] = `
"SyntaxError [1:37-1:39]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x = yield) => { }; }
    |                                      ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x = yield* 0) => { }; } 1`] = `
"SyntaxError [1:40-1:42]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x = yield* 0) => { }; }
    |                                         ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y = yield 0, z = 0) => { }; } 1`] = `
"SyntaxError [1:49-1:51]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x, y = yield 0, z = 0) => { }; }
    |                                                  ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y = yield* 0, z = 0) => { }; } 1`] = `
"SyntaxError [1:50-1:52]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x, y = yield* 0, z = 0) => { }; }
    |                                                   ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y = yield, z = 0) => { }; } 1`] = `
"SyntaxError [1:47-1:49]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x, y = yield, z = 0) => { }; }
    |                                                ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y, yield) => { }; } 1`] = `
"SyntaxError [1:39-1:41]: The left-hand side of the arrow can only be destructed through assignment
> 1 | function* gf() { var a = (x, y, yield) => { }; }
    |                                        ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y, z = yield 0) => { }; } 1`] = `
"SyntaxError [1:45-1:47]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x, y, z = yield 0) => { }; }
    |                                              ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y, z = yield) => { }; } 1`] = `
"SyntaxError [1:43-1:45]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x, y, z = yield) => { }; }
    |                                            ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, y, z = yield* 0) => { }; } 1`] = `
"SyntaxError [1:46-1:48]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var a = (x, y, z = yield* 0) => { }; }
    |                                               ^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (x, yield, y) => { }; } 1`] = `
"SyntaxError [1:39-1:41]: The left-hand side of the arrow can only be destructed through assignment
> 1 | function* gf() { var a = (x, yield, y) => { }; }
    |                                        ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = (yield) => { }; } 1`] = `
"SyntaxError [1:33-1:35]: The left-hand side of the arrow can only be destructed through assignment
> 1 | function* gf() { var a = (yield) => { }; }
    |                                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var a = yield => { }; } 1`] = `
"SyntaxError [1:31-1:33]: Unexpected token: '=>'
> 1 | function* gf() { var a = yield => { }; }
    |                                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var gfe = function* yield() { } } 1`] = `
"SyntaxError [1:37-1:42]: 'yield' may not be used as an identifier in this context
> 1 | function* gf() { var gfe = function* yield() { } }
    |                                      ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var gfe = function* yield() { } } 2`] = `
"SyntaxError [1:37-1:42]: 'yield' may not be used as an identifier in this context
> 1 | function* gf() { var gfe = function* yield() { } }
    |                                      ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var o = { yield }; } 1`] = `
"SyntaxError [1:33-1:34]: 'yield' may not be used as an identifier in this context
> 1 | function* gf() { var o = { yield }; }
    |                                  ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { var yield; } 1`] = `
"SyntaxError [1:21-1:26]: Yield expression not allowed in formal parameter
> 1 | function* gf() { var yield; }
    |                      ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { yield++; } 1`] = `
"SyntaxError [1:24-1:25]: Unexpected token: ';'
> 1 | function* gf() { yield++; }
    |                         ^ Unexpected token: ';'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() { yield++; } 2`] = `
"SyntaxError [1:24-1:25]: Unexpected token: ';'
> 1 | function* gf() { yield++; }
    |                         ^ Unexpected token: ';'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() {var a = yield in {};} 1`] = `
"SyntaxError [1:30-1:32]: Unexpected token: 'in'
> 1 | function* gf() {var a = yield in {};}
    |                               ^^ Unexpected token: 'in'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function* gf() {yield in {};} 1`] = `
"SyntaxError [1:22-1:24]: Unexpected token: 'in'
> 1 | function* gf() {yield in {};}
    |                       ^^ Unexpected token: 'in'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { ({yield = 0} = 0); } 1`] = `
"SyntaxError [1:23-1:24]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { ({yield = 0} = 0); }
    |                        ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { ({yield = 0}); } 1`] = `
"SyntaxError [1:23-1:24]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { ({yield = 0}); }
    |                        ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { ({yield = 0}); } 2`] = `
"SyntaxError [1:23-1:24]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { ({yield = 0}); }
    |                        ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { ({yield} = 0); } 1`] = `
"SyntaxError [1:22-1:23]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { ({yield} = 0); }
    |                       ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { ({yield}); } 1`] = `
"SyntaxError [1:22-1:23]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { ({yield}); }
    |                       ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { 0, {yield} = {}; } 1`] = `
"SyntaxError [1:24-1:25]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { 0, {yield} = {}; }
    |                         ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { 0, {yield} = {}; } 2`] = `
"SyntaxError [1:24-1:25]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { 0, {yield} = {}; }
    |                         ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { for ({yield = 0} in 0); } 1`] = `
"SyntaxError [1:27-1:28]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { for ({yield = 0} in 0); }
    |                            ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { for ({yield} in [{}]); } 1`] = `
"SyntaxError [1:26-1:27]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { for ({yield} in [{}]); }
    |                           ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { for ({yield} in 0); } 1`] = `
"SyntaxError [1:26-1:27]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { for ({yield} in 0); }
    |                           ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { for ({yield} of [{}]); } 1`] = `
"SyntaxError [1:26-1:27]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { for ({yield} of [{}]); }
    |                           ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { for ({yield} of [{}]); } 2`] = `
"SyntaxError [1:26-1:27]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { for ({yield} of [{}]); }
    |                           ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { let yield; } 1`] = `
"SyntaxError [1:19-1:24]: Yield expression not allowed in formal parameter
> 1 | function*g() { let yield; }
    |                    ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { try {} catch (yield) {} } 1`] = `
"SyntaxError [1:29-1:34]: Yield expression not allowed in formal parameter
> 1 | function*g() { try {} catch (yield) {} }
    |                              ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { var {yield = 0} = 0; } 1`] = `
"SyntaxError [1:26-1:27]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { var {yield = 0} = 0; }
    |                           ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { var {yield} = 0; } 1`] = `
"SyntaxError [1:25-1:26]: 'yield' may not be used as an identifier in this context
> 1 | function*g() { var {yield} = 0; }
    |                          ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g() { var yield; } 1`] = `
"SyntaxError [1:19-1:24]: Yield expression not allowed in formal parameter
> 1 | function*g() { var yield; }
    |                    ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g(){ function yield(){}; } 1`] = `
"SyntaxError [1:23-1:28]: 'yield' may not be used as an identifier in this context
> 1 | function*g(){ function yield(){}; }
    |                        ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g(){ var yield = 1; } 1`] = `
"SyntaxError [1:18-1:23]: Yield expression not allowed in formal parameter
> 1 | function*g(){ var yield = 1; }
    |                   ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g(){ var yield; } 1`] = `
"SyntaxError [1:18-1:23]: Yield expression not allowed in formal parameter
> 1 | function*g(){ var yield; }
    |                   ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g([yield]){} 1`] = `
"SyntaxError [1:17-1:18]: Yield expression not allowed in formal parameter
> 1 | function*g([yield]){}
    |                  ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g([yield]){} 2`] = `
"SyntaxError [1:17-1:18]: Yield expression not allowed in formal parameter
> 1 | function*g([yield]){}
    |                  ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g({a: yield}){} 1`] = `
"SyntaxError [1:20-1:21]: Yield expression not allowed in formal parameter
> 1 | function*g({a: yield}){}
    |                     ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g({yield}){} 1`] = `
"SyntaxError [1:17-1:18]: 'yield' may not be used as an identifier in this context
> 1 | function*g({yield}){}
    |                  ^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g(yield = 0){} 1`] = `
"SyntaxError [1:11-1:16]: Yield expression not allowed in formal parameter
> 1 | function*g(yield = 0){}
    |            ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g(yield = 0){} 2`] = `
"SyntaxError [1:11-1:16]: Yield expression not allowed in formal parameter
> 1 | function*g(yield = 0){}
    |            ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > function*g(yield){} 1`] = `
"SyntaxError [1:11-1:16]: Yield expression not allowed in formal parameter
> 1 | function*g(yield){}
    |            ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > gf = function* (b, a = yield) {} 1`] = `
"SyntaxError [1:28-1:29]: Yield expression not allowed in formal parameter
> 1 | gf = function* (b, a = yield) {}
    |                             ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > gf = function* (b, yield) {} 1`] = `
"SyntaxError [1:19-1:24]: Yield expression not allowed in formal parameter
> 1 | gf = function* (b, yield) {}
    |                    ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > label: function* a(){} 1`] = `
"SyntaxError [1:7-1:15]: Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement
> 1 | label: function* a(){}
    |        ^^^^^^^^ Without web compatibility enabled functions can not be declared at top level, inside a block, or as the body of an if statement"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > let gfe = function* yield() { } 1`] = `
"SyntaxError [1:20-1:25]: 'yield' may not be used as an identifier in this context
> 1 | let gfe = function* yield() { }
    |                     ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > var g = function* yield() {}; 1`] = `
"SyntaxError [1:18-1:23]: 'yield' may not be used as an identifier in this context
> 1 | var g = function* yield() {};
    |                   ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > var obj = { *gf(b, a = yield) {} } 1`] = `
"SyntaxError [1:28-1:29]: Yield expression not allowed in formal parameter
> 1 | var obj = { *gf(b, a = yield) {} }
    |                             ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > var obj = { *gf(b, yield) {} } 1`] = `
"SyntaxError [1:19-1:24]: Yield expression not allowed in formal parameter
> 1 | var obj = { *gf(b, yield) {} }
    |                    ^^^^^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > yield x + y 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: 'identifier'
> 1 | yield x + y
    |       ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (fail) > yield x 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: 'identifier'
> 1 | yield x
    |       ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Yield > Expressions - Yield (pass) >  function* g22() { yield (1 + (yield 2) + 3); yield (4 + (yield 5) + 6); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 45,
            "expression": {
              "argument": {
                "end": 43,
                "left": {
                  "end": 39,
                  "left": {
                    "end": 27,
                    "range": [
                      26,
                      27,
                    ],
                    "start": 26,
                    "type": "Literal",
                    "value": 1,
                  },
                  "operator": "+",
                  "range": [
                    26,
                    39,
                  ],
                  "right": {
                    "argument": {
                      "end": 38,
                      "range": [
                        37,
                        38,
                      ],
                      "start": 37,
                      "type": "Literal",
                      "value": 2,
                    },
                    "delegate": false,
                    "end": 38,
                    "range": [
                      31,
                      38,
                    ],
                    "start": 31,
                    "type": "YieldExpression",
                  },
                  "start": 26,
                  "type": "BinaryExpression",
                },
                "operator": "+",
                "range": [
                  26,
                  43,
                ],
                "right": {
                  "end": 43,
                  "range": [
                    42,
                    43,
                  ],
                  "start": 42,
                  "type": "Literal",
                  "value": 3,
                },
                "start": 26,
                "type": "BinaryExpression",
              },
              "delegate": false,
              "end": 44,
              "range": [
                19,
                44,
              ],
              "start": 19,
              "type": "YieldExpression",
            },
            "range": [
              19,
              45,
            ],
            "start": 19,
            "type": "ExpressionStatement",
          },
          {
            "end": 72,
            "expression": {
              "argument": {
                "end": 70,
                "left": {
                  "end": 66,
                  "left": {
                    "end": 54,
                    "range": [
                      53,
                      54,
                    ],
                    "start": 53,
                    "type": "Literal",
                    "value": 4,
                  },
                  "operator": "+",
                  "range": [
                    53,
                    66,
                  ],
                  "right": {
                    "argument": {
                      "end": 65,
                      "range": [
                        64,
                        65,
                      ],
                      "start": 64,
                      "type": "Literal",
                      "value": 5,
                    },
                    "delegate": false,
                    "end": 65,
                    "range": [
                      58,
                      65,
                    ],
                    "start": 58,
                    "type": "YieldExpression",
                  },
                  "start": 53,
                  "type": "BinaryExpression",
                },
                "operator": "+",
                "range": [
                  53,
                  70,
                ],
                "right": {
                  "end": 70,
                  "range": [
                    69,
                    70,
                  ],
                  "start": 69,
                  "type": "Literal",
                  "value": 6,
                },
                "start": 53,
                "type": "BinaryExpression",
              },
              "delegate": false,
              "end": 71,
              "range": [
                46,
                71,
              ],
              "start": 46,
              "type": "YieldExpression",
            },
            "range": [
              46,
              72,
            ],
            "start": 46,
            "type": "ExpressionStatement",
          },
        ],
        "end": 74,
        "range": [
          17,
          74,
        ],
        "start": 17,
        "type": "BlockStatement",
      },
      "end": 74,
      "generator": true,
      "id": {
        "end": 14,
        "name": "g22",
        "range": [
          11,
          14,
        ],
        "start": 11,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        1,
        74,
      ],
      "start": 1,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 74,
  "range": [
    0,
    74,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ([x, {y: [yield]}] = z) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
            {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "elements": [
                      {
                        "name": "yield",
                        "type": "Identifier",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ([x, {y: [yield]}] = z) 2`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
            {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "elements": [
                      {
                        "name": "yield",
                        "type": "Identifier",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ([x, {y: [yield]}]) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "name": "x",
                "type": "Identifier",
              },
              {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "elements": [
                        {
                          "name": "yield",
                          "type": "Identifier",
                        },
                      ],
                      "type": "ArrayPattern",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ([x, {y: [yield]}]) 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "elements": [
          {
            "end": 3,
            "name": "x",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          {
            "end": 17,
            "properties": [
              {
                "computed": false,
                "end": 16,
                "key": {
                  "end": 7,
                  "name": "y",
                  "range": [
                    6,
                    7,
                  ],
                  "start": 6,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  6,
                  16,
                ],
                "shorthand": false,
                "start": 6,
                "type": "Property",
                "value": {
                  "elements": [
                    {
                      "end": 15,
                      "name": "yield",
                      "range": [
                        10,
                        15,
                      ],
                      "start": 10,
                      "type": "Identifier",
                    },
                  ],
                  "end": 16,
                  "range": [
                    9,
                    16,
                  ],
                  "start": 9,
                  "type": "ArrayExpression",
                },
              },
            ],
            "range": [
              5,
              17,
            ],
            "start": 5,
            "type": "ObjectExpression",
          },
        ],
        "end": 18,
        "range": [
          1,
          18,
        ],
        "start": 1,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ([x, {y: [yield]}]) 2`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "y",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "elements": [
                    {
                      "name": "yield",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrayExpression",
                },
              },
            ],
            "type": "ObjectExpression",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ([yield]) 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "name": "yield",
            "type": "Identifier",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({  * yield() {}  }) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "yield",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({  * yield() {}  }) 2`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "yield",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({ *g1() {   (yield 1)  }}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "g1",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "expression": {
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "ExpressionStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({ *g1() {   (yield)  }}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "g1",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "expression": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "ExpressionStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({ *g1() {   return {x: yield}  }}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "g1",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "argument": {
                      "properties": [
                        {
                          "computed": false,
                          "key": {
                            "name": "x",
                            "type": "Identifier",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false,
                          "type": "Property",
                          "value": {
                            "argument": null,
                            "delegate": false,
                            "type": "YieldExpression",
                          },
                        },
                      ],
                      "type": "ObjectExpression",
                    },
                    "type": "ReturnStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({ *g1() {   return {x: yield}  }}) 2`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "g1",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "argument": {
                      "properties": [
                        {
                          "computed": false,
                          "key": {
                            "name": "x",
                            "type": "Identifier",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false,
                          "type": "Property",
                          "value": {
                            "argument": null,
                            "delegate": false,
                            "type": "YieldExpression",
                          },
                        },
                      ],
                      "type": "ObjectExpression",
                    },
                    "type": "ReturnStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ({yield} = x) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "yield",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "yield",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "x",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function * () { ({ [yield]: x } = { }) }); 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "left": {
                  "properties": [
                    {
                      "computed": true,
                      "key": {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "name": "x",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectPattern",
                },
                "operator": "=",
                "right": {
                  "properties": [],
                  "type": "ObjectExpression",
                },
                "type": "AssignmentExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": null,
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function * () { x = class extends (yield) {} }); 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "operator": "=",
                "right": {
                  "body": {
                    "body": [],
                    "type": "ClassBody",
                  },
                  "id": null,
                  "superClass": {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "ClassExpression",
                },
                "type": "AssignmentExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": null,
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function * () { yield * 1; return 37; yield * "icefapper"; }); 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": {
                  "type": "Literal",
                  "value": 1,
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
            {
              "argument": {
                "type": "Literal",
                "value": 37,
              },
              "type": "ReturnStatement",
            },
            {
              "expression": {
                "argument": {
                  "type": "Literal",
                  "value": "icefapper",
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": null,
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function *f(){ async (x = yield) }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "operator": "=",
                    "right": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "AssignmentExpression",
                  },
                ],
                "callee": {
                  "name": "async",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function *g(){ async (x = [yield y]) }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "operator": "=",
                    "right": {
                      "elements": [
                        {
                          "argument": {
                            "name": "y",
                            "type": "Identifier",
                          },
                          "delegate": false,
                          "type": "YieldExpression",
                        },
                      ],
                      "type": "ArrayExpression",
                    },
                    "type": "AssignmentExpression",
                  },
                ],
                "callee": {
                  "name": "async",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "g",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function *g(){ async (x = {[yield y]: 1}) }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "operator": "=",
                    "right": {
                      "properties": [
                        {
                          "computed": true,
                          "key": {
                            "argument": {
                              "name": "y",
                              "type": "Identifier",
                            },
                            "delegate": false,
                            "type": "YieldExpression",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false,
                          "type": "Property",
                          "value": {
                            "type": "Literal",
                            "value": 1,
                          },
                        },
                      ],
                      "type": "ObjectExpression",
                    },
                    "type": "AssignmentExpression",
                  },
                ],
                "callee": {
                  "name": "async",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "g",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function *g(){ async (x = {[yield]: 1}) }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "operator": "=",
                    "right": {
                      "properties": [
                        {
                          "computed": true,
                          "key": {
                            "argument": null,
                            "delegate": false,
                            "type": "YieldExpression",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false,
                          "type": "Property",
                          "value": {
                            "type": "Literal",
                            "value": 1,
                          },
                        },
                      ],
                      "type": "ObjectExpression",
                    },
                    "type": "AssignmentExpression",
                  },
                ],
                "callee": {
                  "name": "async",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "g",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function f(){ 5 + yield }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "left": {
                  "type": "Literal",
                  "value": 5,
                },
                "operator": "+",
                "right": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "type": "BinaryExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": false,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function f(){ call(yield); }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "name": "yield",
                    "type": "Identifier",
                  },
                ],
                "callee": {
                  "name": "call",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": false,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* f(){ call(yield x + y); }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "argument": {
                      "left": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "operator": "+",
                      "right": {
                        "name": "y",
                        "type": "Identifier",
                      },
                      "type": "BinaryExpression",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                ],
                "callee": {
                  "name": "call",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* f(){ call(yield); }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "arguments": [
                  {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                ],
                "callee": {
                  "name": "call",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* f(){ yield }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* f(){ yield x + y }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "+",
                  "right": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "type": "BinaryExpression",
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* f(){ yield x + y; }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "+",
                  "right": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "type": "BinaryExpression",
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* f(){ yield x; }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "f",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* g() { x = yield 3; }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "operator": "=",
                "right": {
                  "argument": {
                    "type": "Literal",
                    "value": 3,
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "AssignmentExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "g",
          "type": "Identifier",
        },
        "params": [],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* g(x) { yield x = 3; }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "type": "Literal",
                    "value": 3,
                  },
                  "type": "AssignmentExpression",
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "g",
          "type": "Identifier",
        },
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (function* g(x) { yield x = yield 3; }) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "argument": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "argument": {
                      "type": "Literal",
                      "value": 3,
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "AssignmentExpression",
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "generator": true,
        "id": {
          "name": "g",
          "type": "Identifier",
        },
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "FunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (x = {[yield]: 1}) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "properties": [
            {
              "computed": true,
              "key": {
                "name": "yield",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "type": "Literal",
                "value": 1,
              },
            },
          ],
          "type": "ObjectExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (x = x + yield) => x; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (x = x + yield); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "yield",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > (x = yield = x) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "yield",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > ++yield; 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "yield",
          "type": "Identifier",
        },
        "operator": "++",
        "prefix": true,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > +function yield() {} 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "generator": false,
          "id": {
            "name": "yield",
            "type": "Identifier",
          },
          "params": [],
          "type": "FunctionExpression",
        },
        "operator": "+",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = [yield]) => z } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "async": false,
            "body": {
              "name": "z",
              "type": "Identifier",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "elements": [
                    {
                      "name": "yield",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrayExpression",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = [yield]) } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "elements": [
                {
                  "name": "yield",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "AssignmentExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = {[yield]: 1}) => z } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "async": false,
            "body": {
              "name": "z",
              "type": "Identifier",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "properties": [
                    {
                      "computed": true,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "type": "Literal",
                        "value": 1,
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = {[yield]: 1}) } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "properties": [
                {
                  "computed": true,
                  "key": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "type": "Literal",
                    "value": 1,
                  },
                },
              ],
              "type": "ObjectExpression",
            },
            "type": "AssignmentExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = x + yield) => x; } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "async": false,
            "body": {
              "name": "x",
              "type": "Identifier",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "+",
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "BinaryExpression",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = x + yield); } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "AssignmentExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = yield) => {}; } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { (x = yield); } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { yield = {}; } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "left": {
              "name": "yield",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "properties": [],
              "type": "ObjectExpression",
            },
            "type": "AssignmentExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > { yield => {}; } 1`] = `
{
  "body": [
    {
      "body": [
        {
          "expression": {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "yield",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "ExpressionStatement",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > 1,2,3 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "type": "Literal",
            "value": 1,
          },
          {
            "type": "Literal",
            "value": 2,
          },
          {
            "type": "Literal",
            "value": 3,
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = (yield)) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = (yield)) => {} 2`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = yield) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = yield) => {} 2`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = yield) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = yield) 2`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = z = yield) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "left": {
                "name": "z",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = z = yield) => {} 2`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "left": {
                "name": "z",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = z = yield) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "left": {
                "name": "z",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "AssignmentExpression",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (x = z = yield) 2`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "left": {
                "name": "z",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "AssignmentExpression",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (yield) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "yield",
            "type": "Identifier",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async (yield) 2`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "yield",
            "type": "Identifier",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async function *f(x){ yield x; } 1`] = `
{
  "body": [
    {
      "async": true,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "name": "x",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "x",
          "type": "Identifier",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async function *g() { (x = y = yield z) } 1`] = `
{
  "body": [
    {
      "async": true,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "left": {
                  "name": "y",
                  "type": "Identifier",
                },
                "operator": "=",
                "right": {
                  "argument": {
                    "name": "z",
                    "type": "Identifier",
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "AssignmentExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > async function *g() { (x = yield); } 1`] = `
{
  "body": [
    {
      "async": true,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > await: yield 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "yield",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "await",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > class C { *gf() { switch (1) { case yield* 'foo': break; } } } 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "computed": false,
            "end": 60,
            "key": {
              "end": 13,
              "name": "gf",
              "range": [
                11,
                13,
              ],
              "start": 11,
              "type": "Identifier",
            },
            "kind": "method",
            "range": [
              10,
              60,
            ],
            "start": 10,
            "static": false,
            "type": "MethodDefinition",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "cases": [
                      {
                        "consequent": [
                          {
                            "end": 56,
                            "label": null,
                            "range": [
                              50,
                              56,
                            ],
                            "start": 50,
                            "type": "BreakStatement",
                          },
                        ],
                        "end": 56,
                        "range": [
                          31,
                          56,
                        ],
                        "start": 31,
                        "test": {
                          "argument": {
                            "end": 48,
                            "range": [
                              43,
                              48,
                            ],
                            "start": 43,
                            "type": "Literal",
                            "value": "foo",
                          },
                          "delegate": true,
                          "end": 48,
                          "range": [
                            36,
                            48,
                          ],
                          "start": 36,
                          "type": "YieldExpression",
                        },
                        "type": "SwitchCase",
                      },
                    ],
                    "discriminant": {
                      "end": 27,
                      "range": [
                        26,
                        27,
                      ],
                      "start": 26,
                      "type": "Literal",
                      "value": 1,
                    },
                    "end": 58,
                    "range": [
                      18,
                      58,
                    ],
                    "start": 18,
                    "type": "SwitchStatement",
                  },
                ],
                "end": 60,
                "range": [
                  16,
                  60,
                ],
                "start": 16,
                "type": "BlockStatement",
              },
              "end": 60,
              "generator": true,
              "id": null,
              "params": [],
              "range": [
                13,
                60,
              ],
              "start": 13,
              "type": "FunctionExpression",
            },
          },
        ],
        "end": 62,
        "range": [
          8,
          62,
        ],
        "start": 8,
        "type": "ClassBody",
      },
      "end": 62,
      "id": {
        "end": 7,
        "name": "C",
        "range": [
          6,
          7,
        ],
        "start": 6,
        "type": "Identifier",
      },
      "range": [
        0,
        62,
      ],
      "start": 0,
      "superClass": null,
      "type": "ClassDeclaration",
    },
  ],
  "end": 62,
  "range": [
    0,
    62,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > class C { *gf() { switch (1) { case yield: break; } } } 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "computed": false,
            "key": {
              "name": "gf",
              "type": "Identifier",
            },
            "kind": "method",
            "static": false,
            "type": "MethodDefinition",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "cases": [
                      {
                        "consequent": [
                          {
                            "label": null,
                            "type": "BreakStatement",
                          },
                        ],
                        "test": {
                          "argument": null,
                          "delegate": false,
                          "type": "YieldExpression",
                        },
                        "type": "SwitchCase",
                      },
                    ],
                    "discriminant": {
                      "type": "Literal",
                      "value": 1,
                    },
                    "type": "SwitchStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ClassBody",
      },
      "id": {
        "name": "C",
        "type": "Identifier",
      },
      "superClass": null,
      "type": "ClassDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * gen() { (yield * 3) + (yield * 4); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "argument": {
                  "type": "Literal",
                  "value": 3,
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "operator": "+",
              "right": {
                "argument": {
                  "type": "Literal",
                  "value": 4,
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "type": "BinaryExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gen",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * gen() { (yield * a) + (yield * b);; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "argument": {
                  "name": "a",
                  "type": "Identifier",
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "operator": "+",
              "right": {
                "argument": {
                  "name": "b",
                  "type": "Identifier",
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "type": "BinaryExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "type": "EmptyStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gen",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * gen() { yield * a; return } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 29,
            "expression": {
              "argument": {
                "end": 28,
                "name": "a",
                "range": [
                  27,
                  28,
                ],
                "start": 27,
                "type": "Identifier",
              },
              "delegate": true,
              "end": 28,
              "range": [
                19,
                28,
              ],
              "start": 19,
              "type": "YieldExpression",
            },
            "range": [
              19,
              29,
            ],
            "start": 19,
            "type": "ExpressionStatement",
          },
          {
            "argument": null,
            "end": 36,
            "range": [
              30,
              36,
            ],
            "start": 30,
            "type": "ReturnStatement",
          },
        ],
        "end": 38,
        "range": [
          17,
          38,
        ],
        "start": 17,
        "type": "BlockStatement",
      },
      "end": 38,
      "generator": true,
      "id": {
        "end": 14,
        "name": "gen",
        "range": [
          11,
          14,
        ],
        "start": 11,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        38,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 38,
  "range": [
    0,
    38,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * gen() { yield /* comment */ } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": null,
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gen",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * gen() { yield a; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "name": "a",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gen",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * gen() { yield, yield } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "expressions": [
                {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
                {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
              ],
              "type": "SequenceExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gen",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function * yield() { } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [],
        "end": 22,
        "range": [
          19,
          22,
        ],
        "start": 19,
        "type": "BlockStatement",
      },
      "end": 22,
      "generator": true,
      "id": {
        "end": 16,
        "name": "yield",
        "range": [
          11,
          16,
        ],
        "start": 11,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a() { (b) => b * yield; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "async": false,
              "body": {
                "left": {
                  "name": "b",
                  "type": "Identifier",
                },
                "operator": "*",
                "right": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "type": "BinaryExpression",
              },
              "expression": true,
              "generator": false,
              "params": [
                {
                  "name": "b",
                  "type": "Identifier",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a(){({get b(){yield}})} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "kind": "get",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [
                        {
                          "expression": {
                            "name": "yield",
                            "type": "Identifier",
                          },
                          "type": "ExpressionStatement",
                        },
                      ],
                      "type": "BlockStatement",
                    },
                    "generator": false,
                    "id": null,
                    "params": [],
                    "type": "FunctionExpression",
                  },
                },
              ],
              "type": "ObjectExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a(){yield ++a;} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "argument": {
                  "name": "a",
                  "type": "Identifier",
                },
                "operator": "++",
                "prefix": true,
                "type": "UpdateExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a(){yield ++a;} 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "argument": {
                  "name": "a",
                  "type": "Identifier",
                },
                "operator": "++",
                "prefix": true,
                "type": "UpdateExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a(){yield ~0} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 22,
            "expression": {
              "argument": {
                "argument": {
                  "end": 22,
                  "range": [
                    21,
                    22,
                  ],
                  "start": 21,
                  "type": "Literal",
                  "value": 0,
                },
                "end": 22,
                "operator": "~",
                "prefix": true,
                "range": [
                  20,
                  22,
                ],
                "start": 20,
                "type": "UnaryExpression",
              },
              "delegate": false,
              "end": 22,
              "range": [
                14,
                22,
              ],
              "start": 14,
              "type": "YieldExpression",
            },
            "range": [
              14,
              22,
            ],
            "start": 14,
            "type": "ExpressionStatement",
          },
        ],
        "end": 23,
        "range": [
          13,
          23,
        ],
        "start": 13,
        "type": "BlockStatement",
      },
      "end": 23,
      "generator": true,
      "id": {
        "end": 11,
        "name": "a",
        "range": [
          10,
          11,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a(){yield delete 0} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "argument": {
                  "type": "Literal",
                  "value": 0,
                },
                "operator": "delete",
                "prefix": true,
                "type": "UnaryExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *a(){yield void 0} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 26,
            "expression": {
              "argument": {
                "argument": {
                  "end": 26,
                  "range": [
                    25,
                    26,
                  ],
                  "start": 25,
                  "type": "Literal",
                  "value": 0,
                },
                "end": 26,
                "operator": "void",
                "prefix": true,
                "range": [
                  20,
                  26,
                ],
                "start": 20,
                "type": "UnaryExpression",
              },
              "delegate": false,
              "end": 26,
              "range": [
                14,
                26,
              ],
              "start": 14,
              "type": "YieldExpression",
            },
            "range": [
              14,
              26,
            ],
            "start": 14,
            "type": "ExpressionStatement",
          },
        ],
        "end": 27,
        "range": [
          13,
          27,
        ],
        "start": 13,
        "type": "BlockStatement",
      },
      "end": 27,
      "generator": true,
      "id": {
        "end": 11,
        "name": "a",
        "range": [
          10,
          11,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        27,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 27,
  "range": [
    0,
    27,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { (yield 1) ? yield 2 : yield 3; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "argument": {
                  "type": "Literal",
                  "value": 3,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "consequent": {
                "argument": {
                  "type": "Literal",
                  "value": 2,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "test": {
                "argument": {
                  "type": "Literal",
                  "value": 1,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { (yield 1) ? yield 2 : yield 3; } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "argument": {
                  "type": "Literal",
                  "value": 3,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "consequent": {
                "argument": {
                  "type": "Literal",
                  "value": 2,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "test": {
                "argument": {
                  "type": "Literal",
                  "value": 1,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { (yield x ** y) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 30,
            "expression": {
              "argument": {
                "end": 29,
                "left": {
                  "end": 24,
                  "name": "x",
                  "range": [
                    23,
                    24,
                  ],
                  "start": 23,
                  "type": "Identifier",
                },
                "operator": "**",
                "range": [
                  23,
                  29,
                ],
                "right": {
                  "end": 29,
                  "name": "y",
                  "range": [
                    28,
                    29,
                  ],
                  "start": 28,
                  "type": "Identifier",
                },
                "start": 23,
                "type": "BinaryExpression",
              },
              "delegate": false,
              "end": 29,
              "range": [
                17,
                29,
              ],
              "start": 17,
              "type": "YieldExpression",
            },
            "range": [
              16,
              30,
            ],
            "start": 16,
            "type": "ExpressionStatement",
          },
        ],
        "end": 32,
        "range": [
          14,
          32,
        ],
        "start": 14,
        "type": "BlockStatement",
      },
      "end": 32,
      "generator": true,
      "id": {
        "end": 11,
        "name": "f",
        "range": [
          10,
          11,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        32,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 32,
  "range": [
    0,
    32,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { 1 ? 1 : yield ; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "consequent": {
                "type": "Literal",
                "value": 1,
              },
              "test": {
                "type": "Literal",
                "value": 1,
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { 1 ? 2 : yield 3; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "argument": {
                  "type": "Literal",
                  "value": 3,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "consequent": {
                "type": "Literal",
                "value": 2,
              },
              "test": {
                "type": "Literal",
                "value": 1,
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { 1 ? yield : 1 ; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "type": "Literal",
                "value": 1,
              },
              "consequent": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "test": {
                "type": "Literal",
                "value": 1,
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { 1 ? yield 2 : 3; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "type": "Literal",
                "value": 3,
              },
              "consequent": {
                "argument": {
                  "type": "Literal",
                  "value": 2,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "test": {
                "type": "Literal",
                "value": 1,
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f() { yield 1 ? 2 : 3; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "alternate": {
                  "type": "Literal",
                  "value": 3,
                },
                "consequent": {
                  "type": "Literal",
                  "value": 2,
                },
                "test": {
                  "type": "Literal",
                  "value": 1,
                },
                "type": "ConditionalExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f(){  class x extends (yield y){}  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [],
              "type": "ClassBody",
            },
            "id": {
              "name": "x",
              "type": "Identifier",
            },
            "superClass": {
              "argument": {
                "name": "y",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ClassDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f(){  class x{[yield foo](a){}}  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "computed": true,
                  "key": {
                    "argument": {
                      "name": "foo",
                      "type": "Identifier",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "kind": "method",
                  "static": false,
                  "type": "MethodDefinition",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [],
                      "type": "BlockStatement",
                    },
                    "generator": false,
                    "id": null,
                    "params": [
                      {
                        "name": "a",
                        "type": "Identifier",
                      },
                    ],
                    "type": "FunctionExpression",
                  },
                },
              ],
              "type": "ClassBody",
            },
            "id": {
              "name": "x",
              "type": "Identifier",
            },
            "superClass": null,
            "type": "ClassDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f(){  return function(x=yield) {};  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": null,
              "params": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "FunctionExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f(){ async (yield) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f(){ delete ("x"[(yield)]) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "computed": true,
                "object": {
                  "type": "Literal",
                  "value": "x",
                },
                "optional": false,
                "property": {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "MemberExpression",
              },
              "operator": "delete",
              "prefix": true,
              "type": "UnaryExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f(){ delete (((((foo(yield)))))).bar } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "computed": false,
                "object": {
                  "arguments": [
                    {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                  ],
                  "callee": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "optional": false,
                "property": {
                  "name": "bar",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "operator": "delete",
              "prefix": true,
              "type": "UnaryExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f({x: x}) { function f({x: yield}) {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [
              {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "name": "yield",
                      "type": "Identifier",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [
        {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "x",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f({x: x}) { function f({x: yield}) {} } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [
              {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "name": "yield",
                      "type": "Identifier",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [
        {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "x",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *f1() {
  function g() {
    return yield / 1;
  }
} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "argument": {
                    "left": {
                      "name": "yield",
                      "type": "Identifier",
                    },
                    "operator": "/",
                    "right": {
                      "type": "Literal",
                      "value": 1,
                    },
                    "type": "BinaryExpression",
                  },
                  "type": "ReturnStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "g",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f1",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *foo() { () => {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "expression": false,
              "generator": false,
              "params": [],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *foo() { function b() {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *foo() { function b() {} function *b() {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { (x = x + foo(a, yield y)); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "operator": "+",
                "right": {
                  "arguments": [
                    {
                      "name": "a",
                      "type": "Identifier",
                    },
                    {
                      "argument": {
                        "name": "y",
                        "type": "Identifier",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                  ],
                  "callee": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "type": "BinaryExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { [...yield]; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "elements": [
                {
                  "argument": {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "SpreadElement",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { [...yield]; } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "elements": [
                {
                  "argument": {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "SpreadElement",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { async (x = x + foo(a, yield y)); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "operator": "+",
                    "right": {
                      "arguments": [
                        {
                          "name": "a",
                          "type": "Identifier",
                        },
                        {
                          "argument": {
                            "name": "y",
                            "type": "Identifier",
                          },
                          "delegate": false,
                          "type": "YieldExpression",
                        },
                      ],
                      "callee": {
                        "name": "foo",
                        "type": "Identifier",
                      },
                      "optional": false,
                      "type": "CallExpression",
                    },
                    "type": "BinaryExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { async (x = yield); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { function f(x = x + yield) {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "+",
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "BinaryExpression",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { function f(x = x + yield) {}; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "+",
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "BinaryExpression",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
          {
            "type": "EmptyStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { function f(x = yield) {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { function f(x = yield) {}; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "f",
              "type": "Identifier",
            },
            "params": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
          {
            "type": "EmptyStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { yield {...(x,y),}} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "properties": [
                  {
                    "argument": {
                      "expressions": [
                        {
                          "name": "x",
                          "type": "Identifier",
                        },
                        {
                          "name": "y",
                          "type": "Identifier",
                        },
                      ],
                      "type": "SequenceExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { yield ~x } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "operator": "~",
                "prefix": true,
                "type": "UnaryExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { yield class x {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "body": {
                  "body": [],
                  "type": "ClassBody",
                },
                "id": {
                  "name": "x",
                  "type": "Identifier",
                },
                "superClass": null,
                "type": "ClassExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() { yield yield } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() {x={     ...yield x,    };} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "argument": {
                      "argument": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() {x={     ...yield yield    };} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "argument": {
                      "argument": {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() {x={     ...yield yield,    };} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "argument": {
                      "argument": {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() {x={     ...yield,    };} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "argument": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() {yield {     ...yield yield    };} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "properties": [
                  {
                    "argument": {
                      "argument": {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g() {yield {     ...yield yield,    };} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "properties": [
                  {
                    "argument": {
                      "argument": {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "SpreadElement",
                  },
                ],
                "type": "ObjectExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ (x = [yield y]) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "elements": [
                  {
                    "argument": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                ],
                "type": "ArrayExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ (x = [yield]) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "elements": [
                  {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                ],
                "type": "ArrayExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ (x = {[yield y]: 1}) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "computed": true,
                    "key": {
                      "argument": {
                        "name": "y",
                        "type": "Identifier",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "type": "Literal",
                      "value": 1,
                    },
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ (x = {[yield]: 1}) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "computed": true,
                    "key": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "type": "Literal",
                      "value": 1,
                    },
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ async (x = [yield y]) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "elements": [
                      {
                        "argument": {
                          "name": "y",
                          "type": "Identifier",
                        },
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                    ],
                    "type": "ArrayExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ async (x = [yield]) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "elements": [
                      {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                    ],
                    "type": "ArrayExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ async (x = {[yield y]: 1}) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "properties": [
                      {
                        "computed": true,
                        "key": {
                          "argument": {
                            "name": "y",
                            "type": "Identifier",
                          },
                          "delegate": false,
                          "type": "YieldExpression",
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false,
                        "type": "Property",
                        "value": {
                          "type": "Literal",
                          "value": 1,
                        },
                      },
                    ],
                    "type": "ObjectExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ async (x = {[yield]: 1}) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "properties": [
                      {
                        "computed": true,
                        "key": {
                          "argument": null,
                          "delegate": false,
                          "type": "YieldExpression",
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false,
                        "type": "Property",
                        "value": {
                          "type": "Literal",
                          "value": 1,
                        },
                      },
                    ],
                    "type": "ObjectExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function *g(){ x + f(yield f); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "arguments": [
                  {
                    "argument": {
                      "name": "f",
                      "type": "Identifier",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                ],
                "callee": {
                  "name": "f",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "BinaryExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function a(){({*[yield](){}})} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 29,
            "expression": {
              "end": 28,
              "properties": [
                {
                  "computed": true,
                  "end": 27,
                  "key": {
                    "end": 22,
                    "name": "yield",
                    "range": [
                      17,
                      22,
                    ],
                    "start": 17,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": true,
                  "range": [
                    15,
                    27,
                  ],
                  "shorthand": false,
                  "start": 15,
                  "type": "Property",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [],
                      "end": 27,
                      "range": [
                        25,
                        27,
                      ],
                      "start": 25,
                      "type": "BlockStatement",
                    },
                    "end": 27,
                    "generator": true,
                    "id": null,
                    "params": [],
                    "range": [
                      23,
                      27,
                    ],
                    "start": 23,
                    "type": "FunctionExpression",
                  },
                },
              ],
              "range": [
                14,
                28,
              ],
              "start": 14,
              "type": "ObjectExpression",
            },
            "range": [
              13,
              29,
            ],
            "start": 13,
            "type": "ExpressionStatement",
          },
        ],
        "end": 30,
        "range": [
          12,
          30,
        ],
        "start": 12,
        "type": "BlockStatement",
      },
      "end": 30,
      "generator": false,
      "id": {
        "end": 10,
        "name": "a",
        "range": [
          9,
          10,
        ],
        "start": 9,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        30,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 30,
  "range": [
    0,
    30,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { class C { *yield() { } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "computed": false,
                  "key": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "kind": "method",
                  "static": false,
                  "type": "MethodDefinition",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [],
                      "type": "BlockStatement",
                    },
                    "generator": true,
                    "id": null,
                    "params": [],
                    "type": "FunctionExpression",
                  },
                },
              ],
              "type": "ClassBody",
            },
            "id": {
              "name": "C",
              "type": "Identifier",
            },
            "superClass": null,
            "type": "ClassDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { class C { yield() { } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "computed": false,
                  "key": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "kind": "method",
                  "static": false,
                  "type": "MethodDefinition",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [],
                      "type": "BlockStatement",
                    },
                    "generator": false,
                    "id": null,
                    "params": [],
                    "type": "FunctionExpression",
                  },
                },
              ],
              "type": "ClassBody",
            },
            "id": {
              "name": "C",
              "type": "Identifier",
            },
            "superClass": null,
            "type": "ClassDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { class C { yield() { } } } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "computed": false,
                  "end": 36,
                  "key": {
                    "end": 30,
                    "name": "yield",
                    "range": [
                      25,
                      30,
                    ],
                    "start": 25,
                    "type": "Identifier",
                  },
                  "kind": "method",
                  "range": [
                    25,
                    36,
                  ],
                  "start": 25,
                  "static": false,
                  "type": "MethodDefinition",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [],
                      "end": 36,
                      "range": [
                        33,
                        36,
                      ],
                      "start": 33,
                      "type": "BlockStatement",
                    },
                    "end": 36,
                    "generator": false,
                    "id": null,
                    "params": [],
                    "range": [
                      30,
                      36,
                    ],
                    "start": 30,
                    "type": "FunctionExpression",
                  },
                },
              ],
              "end": 38,
              "range": [
                23,
                38,
              ],
              "start": 23,
              "type": "ClassBody",
            },
            "end": 38,
            "id": {
              "end": 22,
              "name": "C",
              "range": [
                21,
                22,
              ],
              "start": 21,
              "type": "Identifier",
            },
            "range": [
              15,
              38,
            ],
            "start": 15,
            "superClass": null,
            "type": "ClassDeclaration",
          },
        ],
        "end": 40,
        "range": [
          13,
          40,
        ],
        "start": 13,
        "type": "BlockStatement",
      },
      "end": 40,
      "generator": false,
      "id": {
        "end": 10,
        "name": "f",
        "range": [
          9,
          10,
        ],
        "start": 9,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        40,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 40,
  "range": [
    0,
    40,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { const yield = 10; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "init": {
                  "type": "Literal",
                  "value": 10,
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "const",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { const yield = 10; } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "init": {
                  "type": "Literal",
                  "value": 10,
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "const",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { function* yield() { } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "yield",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { let yield; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "init": null,
                "type": "VariableDeclarator",
              },
            ],
            "kind": "let",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { var o = { *yield() { } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": true,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "async": false,
                        "body": {
                          "body": [],
                          "type": "BlockStatement",
                        },
                        "generator": true,
                        "id": null,
                        "params": [],
                        "type": "FunctionExpression",
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { var o = { yield: 10 } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "type": "Literal",
                        "value": 10,
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { var yield = 10; var o = { yield }; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "init": {
                  "type": "Literal",
                  "value": 10,
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": true,
                      "type": "Property",
                      "value": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f() { var yield = 10; var o = { yield }; } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "init": {
                  "type": "Literal",
                  "value": 10,
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": true,
                      "type": "Property",
                      "value": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){  return (x=yield) => x;  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "async": false,
              "body": {
                "name": "x",
                "type": "Identifier",
              },
              "expression": true,
              "generator": false,
              "params": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){  return function(x=yield) {};  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": null,
              "params": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "FunctionExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){  return function(x=yield) {};  } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": null,
              "params": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "FunctionExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){  x = {foo(a=yield){}}  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "foo",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": true,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "async": false,
                      "body": {
                        "body": [],
                        "type": "BlockStatement",
                      },
                      "generator": false,
                      "id": null,
                      "params": [
                        {
                          "left": {
                            "name": "a",
                            "type": "Identifier",
                          },
                          "right": {
                            "name": "yield",
                            "type": "Identifier",
                          },
                          "type": "AssignmentPattern",
                        },
                      ],
                      "type": "FunctionExpression",
                    },
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){  x = {foo(a=yield){}}  } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "foo",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": true,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "async": false,
                      "body": {
                        "body": [],
                        "type": "BlockStatement",
                      },
                      "generator": false,
                      "id": null,
                      "params": [
                        {
                          "left": {
                            "name": "a",
                            "type": "Identifier",
                          },
                          "right": {
                            "name": "yield",
                            "type": "Identifier",
                          },
                          "type": "AssignmentPattern",
                        },
                      ],
                      "type": "FunctionExpression",
                    },
                  },
                ],
                "type": "ObjectExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){ (x=yield) => x;  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "async": false,
              "body": {
                "name": "x",
                "type": "Identifier",
              },
              "expression": true,
              "generator": false,
              "params": [
                {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){ 5 + yield } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "type": "Literal",
                "value": 5,
              },
              "operator": "+",
              "right": {
                "name": "yield",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function f(){ a = function(x=yield) {};  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "a",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "async": false,
                "body": {
                  "body": [],
                  "type": "BlockStatement",
                },
                "generator": false,
                "id": null,
                "params": [
                  {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "yield",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                ],
                "type": "FunctionExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function fn(x = yield* yield) {} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "fn",
        "type": "Identifier",
      },
      "params": [
        {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "right": {
            "left": {
              "name": "yield",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "BinaryExpression",
          },
          "type": "AssignmentPattern",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function fn(x = yield* yield) {} 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "fn",
        "type": "Identifier",
      },
      "params": [
        {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "right": {
            "left": {
              "name": "yield",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "BinaryExpression",
          },
          "type": "AssignmentPattern",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { ({ get yield() { 1 } }) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "kind": "get",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [
                        {
                          "expression": {
                            "type": "Literal",
                            "value": 1,
                          },
                          "type": "ExpressionStatement",
                        },
                      ],
                      "type": "BlockStatement",
                    },
                    "generator": false,
                    "id": null,
                    "params": [],
                    "type": "FunctionExpression",
                  },
                },
              ],
              "type": "ObjectExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function * gen() { (yield) ? yield : yield } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "alternate": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "consequent": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "test": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "type": "ConditionalExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "gen",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function * gen() { yield * a; return } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "argument": {
                      "name": "a",
                      "type": "Identifier",
                    },
                    "delegate": true,
                    "type": "YieldExpression",
                  },
                  "type": "ExpressionStatement",
                },
                {
                  "argument": null,
                  "type": "ReturnStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "gen",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function * gen() { yield yield a; } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "argument": {
                      "argument": {
                        "name": "a",
                        "type": "Identifier",
                      },
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "gen",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function *a(){yield ++a;} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "argument": {
                      "argument": {
                        "name": "a",
                        "type": "Identifier",
                      },
                      "operator": "++",
                      "prefix": true,
                      "type": "UpdateExpression",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function *a(){yield delete 1}} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "argument": {
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                      },
                      "operator": "delete",
                      "prefix": true,
                      "type": "UnaryExpression",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function *b() {} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function *g() { yield ~x } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "argument": {
                      "argument": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "operator": "~",
                      "prefix": true,
                      "type": "UnaryExpression",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "g",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function a(){({*[yield](){}})} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "properties": [
                      {
                        "computed": true,
                        "key": {
                          "name": "yield",
                          "type": "Identifier",
                        },
                        "kind": "init",
                        "method": true,
                        "shorthand": false,
                        "type": "Property",
                        "value": {
                          "async": false,
                          "body": {
                            "body": [],
                            "type": "BlockStatement",
                          },
                          "generator": true,
                          "id": null,
                          "params": [],
                          "type": "FunctionExpression",
                        },
                      },
                    ],
                    "type": "ObjectExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function foo(yield) { } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "foo",
              "type": "Identifier",
            },
            "params": [
              {
                "name": "yield",
                "type": "Identifier",
              },
            ],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { function*a(){yield*a} } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "async": false,
            "body": {
              "body": [
                {
                  "expression": {
                    "argument": {
                      "name": "a",
                      "type": "Identifier",
                    },
                    "delegate": true,
                    "type": "YieldExpression",
                  },
                  "type": "ExpressionStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() { return ({ x: 42, g: function* (a) { yield this.x } }).g(0); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "arguments": [
                {
                  "end": 74,
                  "range": [
                    73,
                    74,
                  ],
                  "start": 73,
                  "type": "Literal",
                  "value": 0,
                },
              ],
              "callee": {
                "computed": false,
                "end": 72,
                "object": {
                  "end": 69,
                  "properties": [
                    {
                      "computed": false,
                      "end": 32,
                      "key": {
                        "end": 28,
                        "name": "x",
                        "range": [
                          27,
                          28,
                        ],
                        "start": 27,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        27,
                        32,
                      ],
                      "shorthand": false,
                      "start": 27,
                      "type": "Property",
                      "value": {
                        "end": 32,
                        "range": [
                          30,
                          32,
                        ],
                        "start": 30,
                        "type": "Literal",
                        "value": 42,
                      },
                    },
                    {
                      "computed": false,
                      "end": 67,
                      "key": {
                        "end": 35,
                        "name": "g",
                        "range": [
                          34,
                          35,
                        ],
                        "start": 34,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        34,
                        67,
                      ],
                      "shorthand": false,
                      "start": 34,
                      "type": "Property",
                      "value": {
                        "async": false,
                        "body": {
                          "body": [
                            {
                              "end": 65,
                              "expression": {
                                "argument": {
                                  "computed": false,
                                  "end": 65,
                                  "object": {
                                    "end": 63,
                                    "range": [
                                      59,
                                      63,
                                    ],
                                    "start": 59,
                                    "type": "ThisExpression",
                                  },
                                  "optional": false,
                                  "property": {
                                    "end": 65,
                                    "name": "x",
                                    "range": [
                                      64,
                                      65,
                                    ],
                                    "start": 64,
                                    "type": "Identifier",
                                  },
                                  "range": [
                                    59,
                                    65,
                                  ],
                                  "start": 59,
                                  "type": "MemberExpression",
                                },
                                "delegate": false,
                                "end": 65,
                                "range": [
                                  53,
                                  65,
                                ],
                                "start": 53,
                                "type": "YieldExpression",
                              },
                              "range": [
                                53,
                                65,
                              ],
                              "start": 53,
                              "type": "ExpressionStatement",
                            },
                          ],
                          "end": 67,
                          "range": [
                            51,
                            67,
                          ],
                          "start": 51,
                          "type": "BlockStatement",
                        },
                        "end": 67,
                        "generator": true,
                        "id": null,
                        "params": [
                          {
                            "end": 49,
                            "name": "a",
                            "range": [
                              48,
                              49,
                            ],
                            "start": 48,
                            "type": "Identifier",
                          },
                        ],
                        "range": [
                          37,
                          67,
                        ],
                        "start": 37,
                        "type": "FunctionExpression",
                      },
                    },
                  ],
                  "range": [
                    25,
                    69,
                  ],
                  "start": 25,
                  "type": "ObjectExpression",
                },
                "optional": false,
                "property": {
                  "end": 72,
                  "name": "g",
                  "range": [
                    71,
                    72,
                  ],
                  "start": 71,
                  "type": "Identifier",
                },
                "range": [
                  24,
                  72,
                ],
                "start": 24,
                "type": "MemberExpression",
              },
              "end": 75,
              "optional": false,
              "range": [
                24,
                75,
              ],
              "start": 24,
              "type": "CallExpression",
            },
            "end": 76,
            "range": [
              17,
              76,
            ],
            "start": 17,
            "type": "ReturnStatement",
          },
        ],
        "end": 78,
        "range": [
          15,
          78,
        ],
        "start": 15,
        "type": "BlockStatement",
      },
      "end": 78,
      "generator": false,
      "id": {
        "end": 12,
        "name": "foo",
        "range": [
          9,
          12,
        ],
        "start": 9,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        78,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 78,
  "range": [
    0,
    78,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function foo() {++yield; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "name": "yield",
                "type": "Identifier",
              },
              "operator": "++",
              "prefix": true,
              "type": "UpdateExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function yield(yield) { yield: yield (yield + yield(0)); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "expression": {
                "arguments": [
                  {
                    "left": {
                      "name": "yield",
                      "type": "Identifier",
                    },
                    "operator": "+",
                    "right": {
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": 0,
                        },
                      ],
                      "callee": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "optional": false,
                      "type": "CallExpression",
                    },
                    "type": "BinaryExpression",
                  },
                ],
                "callee": {
                  "name": "yield",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ExpressionStatement",
            },
            "label": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "LabeledStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "yield",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "yield",
          "type": "Identifier",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* a() { yield; function b({} = c) {} (d) => { }  } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": null,
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "params": [
              {
                "left": {
                  "properties": [],
                  "type": "ObjectPattern",
                },
                "right": {
                  "name": "c",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "FunctionDeclaration",
          },
          {
            "expression": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "expression": false,
              "generator": false,
              "params": [
                {
                  "name": "d",
                  "type": "Identifier",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* a(){({[yield]:a}=0)} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "properties": [
                  {
                    "computed": true,
                    "key": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false,
                    "type": "Property",
                    "value": {
                      "name": "a",
                      "type": "Identifier",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 0,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* a(){(class {[yield](){}})}; 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "body": {
                "body": [
                  {
                    "computed": true,
                    "key": {
                      "argument": null,
                      "delegate": false,
                      "type": "YieldExpression",
                    },
                    "kind": "method",
                    "static": false,
                    "type": "MethodDefinition",
                    "value": {
                      "async": false,
                      "body": {
                        "body": [],
                        "type": "BlockStatement",
                      },
                      "generator": false,
                      "id": null,
                      "params": [],
                      "type": "FunctionExpression",
                    },
                  },
                ],
                "type": "ClassBody",
              },
              "id": null,
              "superClass": null,
              "type": "ClassExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
    {
      "type": "EmptyStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* a(){yield a} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "name": "a",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* a(b, c, d) { "use strict"; if (yield null) for (const o in null()) throw this; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "directive": "use strict",
            "expression": {
              "type": "Literal",
              "value": "use strict",
            },
            "type": "ExpressionStatement",
          },
          {
            "alternate": null,
            "consequent": {
              "body": {
                "argument": {
                  "type": "ThisExpression",
                },
                "type": "ThrowStatement",
              },
              "left": {
                "declarations": [
                  {
                    "id": {
                      "name": "o",
                      "type": "Identifier",
                    },
                    "init": null,
                    "type": "VariableDeclarator",
                  },
                ],
                "kind": "const",
                "type": "VariableDeclaration",
              },
              "right": {
                "arguments": [],
                "callee": {
                  "type": "Literal",
                  "value": null,
                },
                "optional": false,
                "type": "CallExpression",
              },
              "type": "ForInStatement",
            },
            "test": {
              "argument": {
                "type": "Literal",
                "value": null,
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "IfStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "b",
          "type": "Identifier",
        },
        {
          "name": "c",
          "type": "Identifier",
        },
        {
          "name": "d",
          "type": "Identifier",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* a(b, c, d) { throw \`_":\${((yield* (6002.22)))}¿Z\${null}UâÑ?\${([])}â.Ò÷\${((\`m\`))}\`; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "expressions": [
                {
                  "argument": {
                    "type": "Literal",
                    "value": 6002.22,
                  },
                  "delegate": true,
                  "type": "YieldExpression",
                },
                {
                  "type": "Literal",
                  "value": null,
                },
                {
                  "elements": [],
                  "type": "ArrayExpression",
                },
                {
                  "expressions": [],
                  "quasis": [
                    {
                      "tail": true,
                      "type": "TemplateElement",
                      "value": {
                        "cooked": "m",
                        "raw": "m",
                      },
                    },
                  ],
                  "type": "TemplateLiteral",
                },
              ],
              "quasis": [
                {
                  "tail": false,
                  "type": "TemplateElement",
                  "value": {
                    "cooked": "_":",
                    "raw": "_":",
                  },
                },
                {
                  "tail": false,
                  "type": "TemplateElement",
                  "value": {
                    "cooked": "¿Z",
                    "raw": "¿Z",
                  },
                },
                {
                  "tail": false,
                  "type": "TemplateElement",
                  "value": {
                    "cooked": "UâÑ?",
                    "raw": "UâÑ?",
                  },
                },
                {
                  "tail": false,
                  "type": "TemplateElement",
                  "value": {
                    "cooked": "â.Ò÷",
                    "raw": "â.Ò÷",
                  },
                },
                {
                  "tail": true,
                  "type": "TemplateElement",
                  "value": {
                    "cooked": "",
                    "raw": "",
                  },
                },
              ],
              "type": "TemplateLiteral",
            },
            "type": "ThrowStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "b",
          "type": "Identifier",
        },
        {
          "name": "c",
          "type": "Identifier",
        },
        {
          "name": "d",
          "type": "Identifier",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* f(){ () => yield; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "async": false,
              "body": {
                "name": "yield",
                "type": "Identifier",
              },
              "expression": true,
              "generator": false,
              "params": [],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* f(){ call(yield x); } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "argument": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
              ],
              "callee": {
                "name": "call",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* f(){ yield; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": null,
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* fn() {
  () => yield;
  () => { yield };
} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "async": false,
              "body": {
                "name": "yield",
                "type": "Identifier",
              },
              "expression": true,
              "generator": false,
              "params": [],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "async": false,
              "body": {
                "body": [
                  {
                    "expression": {
                      "name": "yield",
                      "type": "Identifier",
                    },
                    "type": "ExpressionStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "expression": false,
              "generator": false,
              "params": [],
              "type": "ArrowFunctionExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "fn",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* foo(a, b, c, d) { yield a; yield b; yield c; yield d; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 36,
            "expression": {
              "argument": {
                "end": 35,
                "name": "a",
                "range": [
                  34,
                  35,
                ],
                "start": 34,
                "type": "Identifier",
              },
              "delegate": false,
              "end": 35,
              "range": [
                28,
                35,
              ],
              "start": 28,
              "type": "YieldExpression",
            },
            "range": [
              28,
              36,
            ],
            "start": 28,
            "type": "ExpressionStatement",
          },
          {
            "end": 45,
            "expression": {
              "argument": {
                "end": 44,
                "name": "b",
                "range": [
                  43,
                  44,
                ],
                "start": 43,
                "type": "Identifier",
              },
              "delegate": false,
              "end": 44,
              "range": [
                37,
                44,
              ],
              "start": 37,
              "type": "YieldExpression",
            },
            "range": [
              37,
              45,
            ],
            "start": 37,
            "type": "ExpressionStatement",
          },
          {
            "end": 54,
            "expression": {
              "argument": {
                "end": 53,
                "name": "c",
                "range": [
                  52,
                  53,
                ],
                "start": 52,
                "type": "Identifier",
              },
              "delegate": false,
              "end": 53,
              "range": [
                46,
                53,
              ],
              "start": 46,
              "type": "YieldExpression",
            },
            "range": [
              46,
              54,
            ],
            "start": 46,
            "type": "ExpressionStatement",
          },
          {
            "end": 63,
            "expression": {
              "argument": {
                "end": 62,
                "name": "d",
                "range": [
                  61,
                  62,
                ],
                "start": 61,
                "type": "Identifier",
              },
              "delegate": false,
              "end": 62,
              "range": [
                55,
                62,
              ],
              "start": 55,
              "type": "YieldExpression",
            },
            "range": [
              55,
              63,
            ],
            "start": 55,
            "type": "ExpressionStatement",
          },
        ],
        "end": 65,
        "range": [
          26,
          65,
        ],
        "start": 26,
        "type": "BlockStatement",
      },
      "end": 65,
      "generator": true,
      "id": {
        "end": 13,
        "name": "foo",
        "range": [
          10,
          13,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [
        {
          "end": 15,
          "name": "a",
          "range": [
            14,
            15,
          ],
          "start": 14,
          "type": "Identifier",
        },
        {
          "end": 18,
          "name": "b",
          "range": [
            17,
            18,
          ],
          "start": 17,
          "type": "Identifier",
        },
        {
          "end": 21,
          "name": "c",
          "range": [
            20,
            21,
          ],
          "start": 20,
          "type": "Identifier",
        },
        {
          "end": 24,
          "name": "d",
          "range": [
            23,
            24,
          ],
          "start": 23,
          "type": "Identifier",
        },
      ],
      "range": [
        0,
        65,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 65,
  "range": [
    0,
    65,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g() { exprValue = yield * {}; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "name": "exprValue",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "argument": {
                  "properties": [],
                  "type": "ObjectExpression",
                },
                "delegate": true,
                "type": "YieldExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g() { yield 1; try { yield 2; } catch (e) { yield e; } yield 3; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "end": 24,
            "expression": {
              "argument": {
                "end": 23,
                "range": [
                  22,
                  23,
                ],
                "start": 22,
                "type": "Literal",
                "value": 1,
              },
              "delegate": false,
              "end": 23,
              "range": [
                16,
                23,
              ],
              "start": 16,
              "type": "YieldExpression",
            },
            "range": [
              16,
              24,
            ],
            "start": 16,
            "type": "ExpressionStatement",
          },
          {
            "block": {
              "body": [
                {
                  "end": 39,
                  "expression": {
                    "argument": {
                      "end": 38,
                      "range": [
                        37,
                        38,
                      ],
                      "start": 37,
                      "type": "Literal",
                      "value": 2,
                    },
                    "delegate": false,
                    "end": 38,
                    "range": [
                      31,
                      38,
                    ],
                    "start": 31,
                    "type": "YieldExpression",
                  },
                  "range": [
                    31,
                    39,
                  ],
                  "start": 31,
                  "type": "ExpressionStatement",
                },
              ],
              "end": 41,
              "range": [
                29,
                41,
              ],
              "start": 29,
              "type": "BlockStatement",
            },
            "end": 64,
            "finalizer": null,
            "handler": {
              "body": {
                "body": [
                  {
                    "end": 62,
                    "expression": {
                      "argument": {
                        "end": 61,
                        "name": "e",
                        "range": [
                          60,
                          61,
                        ],
                        "start": 60,
                        "type": "Identifier",
                      },
                      "delegate": false,
                      "end": 61,
                      "range": [
                        54,
                        61,
                      ],
                      "start": 54,
                      "type": "YieldExpression",
                    },
                    "range": [
                      54,
                      62,
                    ],
                    "start": 54,
                    "type": "ExpressionStatement",
                  },
                ],
                "end": 64,
                "range": [
                  52,
                  64,
                ],
                "start": 52,
                "type": "BlockStatement",
              },
              "end": 64,
              "param": {
                "end": 50,
                "name": "e",
                "range": [
                  49,
                  50,
                ],
                "start": 49,
                "type": "Identifier",
              },
              "range": [
                42,
                64,
              ],
              "start": 42,
              "type": "CatchClause",
            },
            "range": [
              25,
              64,
            ],
            "start": 25,
            "type": "TryStatement",
          },
          {
            "end": 73,
            "expression": {
              "argument": {
                "end": 72,
                "range": [
                  71,
                  72,
                ],
                "start": 71,
                "type": "Literal",
                "value": 3,
              },
              "delegate": false,
              "end": 72,
              "range": [
                65,
                72,
              ],
              "start": 65,
              "type": "YieldExpression",
            },
            "range": [
              65,
              73,
            ],
            "start": 65,
            "type": "ExpressionStatement",
          },
        ],
        "end": 75,
        "range": [
          14,
          75,
        ],
        "start": 14,
        "type": "BlockStatement",
      },
      "end": 75,
      "generator": true,
      "id": {
        "end": 11,
        "name": "g",
        "range": [
          10,
          11,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        75,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 75,
  "range": [
    0,
    75,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g(){(class extends (yield) {});} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "body": {
                "body": [],
                "type": "ClassBody",
              },
              "id": null,
              "superClass": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ClassExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g(a, b, c, d) {
  arguments[0] = 32;
  arguments[1] = 54;
  arguments[2] = 333;
  yield a;
  yield b;
  yield c;
  yield d;
} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "left": {
                "computed": true,
                "object": {
                  "name": "arguments",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "type": "Literal",
                  "value": 0,
                },
                "type": "MemberExpression",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 32,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "left": {
                "computed": true,
                "object": {
                  "name": "arguments",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "type": "Literal",
                  "value": 1,
                },
                "type": "MemberExpression",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 54,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "left": {
                "computed": true,
                "object": {
                  "name": "arguments",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "type": "Literal",
                  "value": 2,
                },
                "type": "MemberExpression",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 333,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "name": "a",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "name": "b",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "name": "c",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "name": "d",
                "type": "Identifier",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "a",
          "type": "Identifier",
        },
        {
          "name": "b",
          "type": "Identifier",
        },
        {
          "name": "c",
          "type": "Identifier",
        },
        {
          "name": "d",
          "type": "Identifier",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g1() { (yield 1) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "type": "Literal",
                "value": 1,
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g1",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g2() { [yield 1] } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "elements": [
                {
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g2",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g4() { yield 1, yield 2; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "expressions": [
                {
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
                {
                  "argument": {
                    "type": "Literal",
                    "value": 2,
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
              ],
              "type": "SequenceExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g4",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g5() { (yield 1) ? yield 2 : yield 3; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "alternate": {
                "argument": {
                  "type": "Literal",
                  "value": 3,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "consequent": {
                "argument": {
                  "type": "Literal",
                  "value": 2,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "test": {
                "argument": {
                  "type": "Literal",
                  "value": 1,
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "ConditionalExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "g5",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g8() { for (var x = 0; x < 4; x++) { yield x; } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "end": 55,
                  "expression": {
                    "argument": {
                      "end": 54,
                      "name": "x",
                      "range": [
                        53,
                        54,
                      ],
                      "start": 53,
                      "type": "Identifier",
                    },
                    "delegate": false,
                    "end": 54,
                    "range": [
                      47,
                      54,
                    ],
                    "start": 47,
                    "type": "YieldExpression",
                  },
                  "range": [
                    47,
                    55,
                  ],
                  "start": 47,
                  "type": "ExpressionStatement",
                },
              ],
              "end": 57,
              "range": [
                45,
                57,
              ],
              "start": 45,
              "type": "BlockStatement",
            },
            "end": 57,
            "init": {
              "declarations": [
                {
                  "end": 31,
                  "id": {
                    "end": 27,
                    "name": "x",
                    "range": [
                      26,
                      27,
                    ],
                    "start": 26,
                    "type": "Identifier",
                  },
                  "init": {
                    "end": 31,
                    "range": [
                      30,
                      31,
                    ],
                    "start": 30,
                    "type": "Literal",
                    "value": 0,
                  },
                  "range": [
                    26,
                    31,
                  ],
                  "start": 26,
                  "type": "VariableDeclarator",
                },
              ],
              "end": 31,
              "kind": "var",
              "range": [
                22,
                31,
              ],
              "start": 22,
              "type": "VariableDeclaration",
            },
            "range": [
              17,
              57,
            ],
            "start": 17,
            "test": {
              "end": 38,
              "left": {
                "end": 34,
                "name": "x",
                "range": [
                  33,
                  34,
                ],
                "start": 33,
                "type": "Identifier",
              },
              "operator": "<",
              "range": [
                33,
                38,
              ],
              "right": {
                "end": 38,
                "range": [
                  37,
                  38,
                ],
                "start": 37,
                "type": "Literal",
                "value": 4,
              },
              "start": 33,
              "type": "BinaryExpression",
            },
            "type": "ForStatement",
            "update": {
              "argument": {
                "end": 41,
                "name": "x",
                "range": [
                  40,
                  41,
                ],
                "start": 40,
                "type": "Identifier",
              },
              "end": 43,
              "operator": "++",
              "prefix": false,
              "range": [
                40,
                43,
              ],
              "start": 40,
              "type": "UpdateExpression",
            },
          },
        ],
        "end": 59,
        "range": [
          15,
          59,
        ],
        "start": 15,
        "type": "BlockStatement",
      },
      "end": 59,
      "generator": true,
      "id": {
        "end": 12,
        "name": "g8",
        "range": [
          10,
          12,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        59,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 59,
  "range": [
    0,
    59,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g19() { var x = 1; yield x; with({x:2}) { yield x; } yield x; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "end": 27,
                "id": {
                  "end": 23,
                  "name": "x",
                  "range": [
                    22,
                    23,
                  ],
                  "start": 22,
                  "type": "Identifier",
                },
                "init": {
                  "end": 27,
                  "range": [
                    26,
                    27,
                  ],
                  "start": 26,
                  "type": "Literal",
                  "value": 1,
                },
                "range": [
                  22,
                  27,
                ],
                "start": 22,
                "type": "VariableDeclarator",
              },
            ],
            "end": 28,
            "kind": "var",
            "range": [
              18,
              28,
            ],
            "start": 18,
            "type": "VariableDeclaration",
          },
          {
            "end": 37,
            "expression": {
              "argument": {
                "end": 36,
                "name": "x",
                "range": [
                  35,
                  36,
                ],
                "start": 35,
                "type": "Identifier",
              },
              "delegate": false,
              "end": 36,
              "range": [
                29,
                36,
              ],
              "start": 29,
              "type": "YieldExpression",
            },
            "range": [
              29,
              37,
            ],
            "start": 29,
            "type": "ExpressionStatement",
          },
          {
            "body": {
              "body": [
                {
                  "end": 60,
                  "expression": {
                    "argument": {
                      "end": 59,
                      "name": "x",
                      "range": [
                        58,
                        59,
                      ],
                      "start": 58,
                      "type": "Identifier",
                    },
                    "delegate": false,
                    "end": 59,
                    "range": [
                      52,
                      59,
                    ],
                    "start": 52,
                    "type": "YieldExpression",
                  },
                  "range": [
                    52,
                    60,
                  ],
                  "start": 52,
                  "type": "ExpressionStatement",
                },
              ],
              "end": 62,
              "range": [
                50,
                62,
              ],
              "start": 50,
              "type": "BlockStatement",
            },
            "end": 62,
            "object": {
              "end": 48,
              "properties": [
                {
                  "computed": false,
                  "end": 47,
                  "key": {
                    "end": 45,
                    "name": "x",
                    "range": [
                      44,
                      45,
                    ],
                    "start": 44,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    44,
                    47,
                  ],
                  "shorthand": false,
                  "start": 44,
                  "type": "Property",
                  "value": {
                    "end": 47,
                    "range": [
                      46,
                      47,
                    ],
                    "start": 46,
                    "type": "Literal",
                    "value": 2,
                  },
                },
              ],
              "range": [
                43,
                48,
              ],
              "start": 43,
              "type": "ObjectExpression",
            },
            "range": [
              38,
              62,
            ],
            "start": 38,
            "type": "WithStatement",
          },
          {
            "end": 71,
            "expression": {
              "argument": {
                "end": 70,
                "name": "x",
                "range": [
                  69,
                  70,
                ],
                "start": 69,
                "type": "Identifier",
              },
              "delegate": false,
              "end": 70,
              "range": [
                63,
                70,
              ],
              "start": 63,
              "type": "YieldExpression",
            },
            "range": [
              63,
              71,
            ],
            "start": 63,
            "type": "ExpressionStatement",
          },
        ],
        "end": 73,
        "range": [
          16,
          73,
        ],
        "start": 16,
        "type": "BlockStatement",
      },
      "end": 73,
      "generator": true,
      "id": {
        "end": 13,
        "name": "g19",
        "range": [
          10,
          13,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        73,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 73,
  "range": [
    0,
    73,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* g25() {
  try {
    throw (yield (1 + (yield 2) + 3))
  } catch (e) {
    if (typeof e == 'object') throw e;
    return e + (yield (4 + (yield 5) + 6));
  }
} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "block": {
              "body": [
                {
                  "argument": {
                    "argument": {
                      "end": 61,
                      "left": {
                        "end": 57,
                        "left": {
                          "end": 45,
                          "range": [
                            44,
                            45,
                          ],
                          "start": 44,
                          "type": "Literal",
                          "value": 1,
                        },
                        "operator": "+",
                        "range": [
                          44,
                          57,
                        ],
                        "right": {
                          "argument": {
                            "end": 56,
                            "range": [
                              55,
                              56,
                            ],
                            "start": 55,
                            "type": "Literal",
                            "value": 2,
                          },
                          "delegate": false,
                          "end": 56,
                          "range": [
                            49,
                            56,
                          ],
                          "start": 49,
                          "type": "YieldExpression",
                        },
                        "start": 44,
                        "type": "BinaryExpression",
                      },
                      "operator": "+",
                      "range": [
                        44,
                        61,
                      ],
                      "right": {
                        "end": 61,
                        "range": [
                          60,
                          61,
                        ],
                        "start": 60,
                        "type": "Literal",
                        "value": 3,
                      },
                      "start": 44,
                      "type": "BinaryExpression",
                    },
                    "delegate": false,
                    "end": 62,
                    "range": [
                      37,
                      62,
                    ],
                    "start": 37,
                    "type": "YieldExpression",
                  },
                  "end": 63,
                  "range": [
                    30,
                    63,
                  ],
                  "start": 30,
                  "type": "ThrowStatement",
                },
              ],
              "end": 67,
              "range": [
                24,
                67,
              ],
              "start": 24,
              "type": "BlockStatement",
            },
            "end": 166,
            "finalizer": null,
            "handler": {
              "body": {
                "body": [
                  {
                    "alternate": null,
                    "consequent": {
                      "argument": {
                        "end": 117,
                        "name": "e",
                        "range": [
                          116,
                          117,
                        ],
                        "start": 116,
                        "type": "Identifier",
                      },
                      "end": 118,
                      "range": [
                        110,
                        118,
                      ],
                      "start": 110,
                      "type": "ThrowStatement",
                    },
                    "end": 118,
                    "range": [
                      84,
                      118,
                    ],
                    "start": 84,
                    "test": {
                      "end": 108,
                      "left": {
                        "argument": {
                          "end": 96,
                          "name": "e",
                          "range": [
                            95,
                            96,
                          ],
                          "start": 95,
                          "type": "Identifier",
                        },
                        "end": 96,
                        "operator": "typeof",
                        "prefix": true,
                        "range": [
                          88,
                          96,
                        ],
                        "start": 88,
                        "type": "UnaryExpression",
                      },
                      "operator": "==",
                      "range": [
                        88,
                        108,
                      ],
                      "right": {
                        "end": 108,
                        "range": [
                          100,
                          108,
                        ],
                        "start": 100,
                        "type": "Literal",
                        "value": "object",
                      },
                      "start": 88,
                      "type": "BinaryExpression",
                    },
                    "type": "IfStatement",
                  },
                  {
                    "argument": {
                      "end": 161,
                      "left": {
                        "end": 131,
                        "name": "e",
                        "range": [
                          130,
                          131,
                        ],
                        "start": 130,
                        "type": "Identifier",
                      },
                      "operator": "+",
                      "range": [
                        130,
                        161,
                      ],
                      "right": {
                        "argument": {
                          "end": 159,
                          "left": {
                            "end": 155,
                            "left": {
                              "end": 143,
                              "range": [
                                142,
                                143,
                              ],
                              "start": 142,
                              "type": "Literal",
                              "value": 4,
                            },
                            "operator": "+",
                            "range": [
                              142,
                              155,
                            ],
                            "right": {
                              "argument": {
                                "end": 154,
                                "range": [
                                  153,
                                  154,
                                ],
                                "start": 153,
                                "type": "Literal",
                                "value": 5,
                              },
                              "delegate": false,
                              "end": 154,
                              "range": [
                                147,
                                154,
                              ],
                              "start": 147,
                              "type": "YieldExpression",
                            },
                            "start": 142,
                            "type": "BinaryExpression",
                          },
                          "operator": "+",
                          "range": [
                            142,
                            159,
                          ],
                          "right": {
                            "end": 159,
                            "range": [
                              158,
                              159,
                            ],
                            "start": 158,
                            "type": "Literal",
                            "value": 6,
                          },
                          "start": 142,
                          "type": "BinaryExpression",
                        },
                        "delegate": false,
                        "end": 160,
                        "range": [
                          135,
                          160,
                        ],
                        "start": 135,
                        "type": "YieldExpression",
                      },
                      "start": 130,
                      "type": "BinaryExpression",
                    },
                    "end": 162,
                    "range": [
                      123,
                      162,
                    ],
                    "start": 123,
                    "type": "ReturnStatement",
                  },
                ],
                "end": 166,
                "range": [
                  78,
                  166,
                ],
                "start": 78,
                "type": "BlockStatement",
              },
              "end": 166,
              "param": {
                "end": 76,
                "name": "e",
                "range": [
                  75,
                  76,
                ],
                "start": 75,
                "type": "Identifier",
              },
              "range": [
                68,
                166,
              ],
              "start": 68,
              "type": "CatchClause",
            },
            "range": [
              20,
              166,
            ],
            "start": 20,
            "type": "TryStatement",
          },
        ],
        "end": 168,
        "range": [
          16,
          168,
        ],
        "start": 16,
        "type": "BlockStatement",
      },
      "end": 168,
      "generator": true,
      "id": {
        "end": 13,
        "name": "g25",
        "range": [
          10,
          13,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        0,
        168,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 168,
  "range": [
    0,
    168,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { class C { *yield() { } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "body": {
              "body": [
                {
                  "computed": false,
                  "key": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "kind": "method",
                  "static": false,
                  "type": "MethodDefinition",
                  "value": {
                    "async": false,
                    "body": {
                      "body": [],
                      "type": "BlockStatement",
                    },
                    "generator": true,
                    "id": null,
                    "params": [],
                    "type": "FunctionExpression",
                  },
                },
              ],
              "type": "ClassBody",
            },
            "id": {
              "name": "C",
              "type": "Identifier",
            },
            "superClass": null,
            "type": "ClassDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { foo[yield "foo"]; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "computed": true,
              "object": {
                "name": "foo",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "argument": {
                  "type": "Literal",
                  "value": "foo",
                },
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "MemberExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { foo[yield]; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "computed": true,
              "object": {
                "name": "foo",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "argument": null,
                "delegate": false,
                "type": "YieldExpression",
              },
              "type": "MemberExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { switch (1) { case yield "foo": break; } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "cases": [
              {
                "consequent": [
                  {
                    "label": null,
                    "type": "BreakStatement",
                  },
                ],
                "test": {
                  "argument": {
                    "type": "Literal",
                    "value": "foo",
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "SwitchCase",
              },
            ],
            "discriminant": {
              "type": "Literal",
              "value": 1,
            },
            "type": "SwitchStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { switch (1) { case yield: break; } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "cases": [
              {
                "consequent": [
                  {
                    "label": null,
                    "type": "BreakStatement",
                  },
                ],
                "test": {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "SwitchCase",
              },
            ],
            "discriminant": {
              "type": "Literal",
              "value": 1,
            },
            "type": "SwitchStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var a = yield "foo"; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "a",
                  "type": "Identifier",
                },
                "init": {
                  "argument": {
                    "type": "Literal",
                    "value": "foo",
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var a = yield* 'foo'; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "a",
                  "type": "Identifier",
                },
                "init": {
                  "argument": {
                    "type": "Literal",
                    "value": "foo",
                  },
                  "delegate": true,
                  "type": "YieldExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var a = yield; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "a",
                  "type": "Identifier",
                },
                "init": {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var fe = function yield() { } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "fe",
                  "type": "Identifier",
                },
                "init": {
                  "async": false,
                  "body": {
                    "body": [],
                    "type": "BlockStatement",
                  },
                  "generator": false,
                  "id": {
                    "name": "yield",
                    "type": "Identifier",
                  },
                  "params": [],
                  "type": "FunctionExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var o = { *yield() { } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": true,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "async": false,
                        "body": {
                          "body": [],
                          "type": "BlockStatement",
                        },
                        "generator": true,
                        "id": null,
                        "params": [],
                        "type": "FunctionExpression",
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var o = { yield() { } } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": true,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "async": false,
                        "body": {
                          "body": [],
                          "type": "BlockStatement",
                        },
                        "generator": false,
                        "id": null,
                        "params": [],
                        "type": "FunctionExpression",
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var o = { yield: 10 } } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "type": "Literal",
                        "value": 10,
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { var o = { yield: 10 } } 2`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "id": {
                  "name": "o",
                  "type": "Identifier",
                },
                "init": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "yield",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "type": "Literal",
                        "value": 10,
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "type": "VariableDeclarator",
              },
            ],
            "kind": "var",
            "type": "VariableDeclaration",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { yield "foo"; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "type": "Literal",
                "value": "foo",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { yield* 'foo'; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "type": "Literal",
                "value": "foo",
              },
              "delegate": true,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf() { yield, 10; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "expressions": [
                {
                  "argument": null,
                  "delegate": false,
                  "type": "YieldExpression",
                },
                {
                  "type": "Literal",
                  "value": 10,
                },
              ],
              "type": "SequenceExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* gf1 () {
    yield 10;
    yield 20;
    yield 30;

    function a() { }
    function b() { }
    function c() { }

    yield a();

    yield b() + (yield c());
} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": {
                "type": "Literal",
                "value": 10,
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "type": "Literal",
                "value": 20,
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "type": "Literal",
                "value": 30,
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "a",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "b",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": {
              "name": "c",
              "type": "Identifier",
            },
            "params": [],
            "type": "FunctionDeclaration",
          },
          {
            "expression": {
              "argument": {
                "arguments": [],
                "callee": {
                  "name": "a",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "argument": {
                "left": {
                  "arguments": [],
                  "callee": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "operator": "+",
                "right": {
                  "argument": {
                    "arguments": [],
                    "callee": {
                      "name": "c",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "type": "CallExpression",
                  },
                  "delegate": false,
                  "type": "YieldExpression",
                },
                "type": "BinaryExpression",
              },
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "gf1",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function* testGenerator(arg1) {
    var i = 100;
    var j = 1000;
    var k = 10000;
    yield { arg1: arg1++, i: ++i, j: j++, k: k++, p: ++p };
    yield { arg1: arg1++, i: ++i, j: j++, k: k++, p: ++p };
    yield { arg1: arg1++, i: ++i, j: j++, k: k++, p: ++p };
    yield { arg1: arg1++, i: ++i, j: j++, k: k++, p: ++p };
}

var gen = testGenerator(10);

function yieldOne() {
    var v1 = gen.next();
    var val = JSON.stringify(v1.value, undefined, '');
} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "end": 47,
                "id": {
                  "end": 41,
                  "name": "i",
                  "range": [
                    40,
                    41,
                  ],
                  "start": 40,
                  "type": "Identifier",
                },
                "init": {
                  "end": 47,
                  "range": [
                    44,
                    47,
                  ],
                  "raw": "100",
                  "start": 44,
                  "type": "Literal",
                  "value": 100,
                },
                "range": [
                  40,
                  47,
                ],
                "start": 40,
                "type": "VariableDeclarator",
              },
            ],
            "end": 48,
            "kind": "var",
            "range": [
              36,
              48,
            ],
            "start": 36,
            "type": "VariableDeclaration",
          },
          {
            "declarations": [
              {
                "end": 65,
                "id": {
                  "end": 58,
                  "name": "j",
                  "range": [
                    57,
                    58,
                  ],
                  "start": 57,
                  "type": "Identifier",
                },
                "init": {
                  "end": 65,
                  "range": [
                    61,
                    65,
                  ],
                  "raw": "1000",
                  "start": 61,
                  "type": "Literal",
                  "value": 1000,
                },
                "range": [
                  57,
                  65,
                ],
                "start": 57,
                "type": "VariableDeclarator",
              },
            ],
            "end": 66,
            "kind": "var",
            "range": [
              53,
              66,
            ],
            "start": 53,
            "type": "VariableDeclaration",
          },
          {
            "declarations": [
              {
                "end": 84,
                "id": {
                  "end": 76,
                  "name": "k",
                  "range": [
                    75,
                    76,
                  ],
                  "start": 75,
                  "type": "Identifier",
                },
                "init": {
                  "end": 84,
                  "range": [
                    79,
                    84,
                  ],
                  "raw": "10000",
                  "start": 79,
                  "type": "Literal",
                  "value": 10000,
                },
                "range": [
                  75,
                  84,
                ],
                "start": 75,
                "type": "VariableDeclarator",
              },
            ],
            "end": 85,
            "kind": "var",
            "range": [
              71,
              85,
            ],
            "start": 71,
            "type": "VariableDeclaration",
          },
          {
            "end": 145,
            "expression": {
              "argument": {
                "end": 144,
                "properties": [
                  {
                    "computed": false,
                    "end": 110,
                    "key": {
                      "end": 102,
                      "name": "arg1",
                      "range": [
                        98,
                        102,
                      ],
                      "start": 98,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      98,
                      110,
                    ],
                    "shorthand": false,
                    "start": 98,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 108,
                        "name": "arg1",
                        "range": [
                          104,
                          108,
                        ],
                        "start": 104,
                        "type": "Identifier",
                      },
                      "end": 110,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        104,
                        110,
                      ],
                      "start": 104,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 118,
                    "key": {
                      "end": 113,
                      "name": "i",
                      "range": [
                        112,
                        113,
                      ],
                      "start": 112,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      112,
                      118,
                    ],
                    "shorthand": false,
                    "start": 112,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 118,
                        "name": "i",
                        "range": [
                          117,
                          118,
                        ],
                        "start": 117,
                        "type": "Identifier",
                      },
                      "end": 118,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        115,
                        118,
                      ],
                      "start": 115,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 126,
                    "key": {
                      "end": 121,
                      "name": "j",
                      "range": [
                        120,
                        121,
                      ],
                      "start": 120,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      120,
                      126,
                    ],
                    "shorthand": false,
                    "start": 120,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 124,
                        "name": "j",
                        "range": [
                          123,
                          124,
                        ],
                        "start": 123,
                        "type": "Identifier",
                      },
                      "end": 126,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        123,
                        126,
                      ],
                      "start": 123,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 134,
                    "key": {
                      "end": 129,
                      "name": "k",
                      "range": [
                        128,
                        129,
                      ],
                      "start": 128,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      128,
                      134,
                    ],
                    "shorthand": false,
                    "start": 128,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 132,
                        "name": "k",
                        "range": [
                          131,
                          132,
                        ],
                        "start": 131,
                        "type": "Identifier",
                      },
                      "end": 134,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        131,
                        134,
                      ],
                      "start": 131,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 142,
                    "key": {
                      "end": 137,
                      "name": "p",
                      "range": [
                        136,
                        137,
                      ],
                      "start": 136,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      136,
                      142,
                    ],
                    "shorthand": false,
                    "start": 136,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 142,
                        "name": "p",
                        "range": [
                          141,
                          142,
                        ],
                        "start": 141,
                        "type": "Identifier",
                      },
                      "end": 142,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        139,
                        142,
                      ],
                      "start": 139,
                      "type": "UpdateExpression",
                    },
                  },
                ],
                "range": [
                  96,
                  144,
                ],
                "start": 96,
                "type": "ObjectExpression",
              },
              "delegate": false,
              "end": 144,
              "range": [
                90,
                144,
              ],
              "start": 90,
              "type": "YieldExpression",
            },
            "range": [
              90,
              145,
            ],
            "start": 90,
            "type": "ExpressionStatement",
          },
          {
            "end": 205,
            "expression": {
              "argument": {
                "end": 204,
                "properties": [
                  {
                    "computed": false,
                    "end": 170,
                    "key": {
                      "end": 162,
                      "name": "arg1",
                      "range": [
                        158,
                        162,
                      ],
                      "start": 158,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      158,
                      170,
                    ],
                    "shorthand": false,
                    "start": 158,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 168,
                        "name": "arg1",
                        "range": [
                          164,
                          168,
                        ],
                        "start": 164,
                        "type": "Identifier",
                      },
                      "end": 170,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        164,
                        170,
                      ],
                      "start": 164,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 178,
                    "key": {
                      "end": 173,
                      "name": "i",
                      "range": [
                        172,
                        173,
                      ],
                      "start": 172,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      172,
                      178,
                    ],
                    "shorthand": false,
                    "start": 172,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 178,
                        "name": "i",
                        "range": [
                          177,
                          178,
                        ],
                        "start": 177,
                        "type": "Identifier",
                      },
                      "end": 178,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        175,
                        178,
                      ],
                      "start": 175,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 186,
                    "key": {
                      "end": 181,
                      "name": "j",
                      "range": [
                        180,
                        181,
                      ],
                      "start": 180,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      180,
                      186,
                    ],
                    "shorthand": false,
                    "start": 180,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 184,
                        "name": "j",
                        "range": [
                          183,
                          184,
                        ],
                        "start": 183,
                        "type": "Identifier",
                      },
                      "end": 186,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        183,
                        186,
                      ],
                      "start": 183,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 194,
                    "key": {
                      "end": 189,
                      "name": "k",
                      "range": [
                        188,
                        189,
                      ],
                      "start": 188,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      188,
                      194,
                    ],
                    "shorthand": false,
                    "start": 188,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 192,
                        "name": "k",
                        "range": [
                          191,
                          192,
                        ],
                        "start": 191,
                        "type": "Identifier",
                      },
                      "end": 194,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        191,
                        194,
                      ],
                      "start": 191,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 202,
                    "key": {
                      "end": 197,
                      "name": "p",
                      "range": [
                        196,
                        197,
                      ],
                      "start": 196,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      196,
                      202,
                    ],
                    "shorthand": false,
                    "start": 196,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 202,
                        "name": "p",
                        "range": [
                          201,
                          202,
                        ],
                        "start": 201,
                        "type": "Identifier",
                      },
                      "end": 202,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        199,
                        202,
                      ],
                      "start": 199,
                      "type": "UpdateExpression",
                    },
                  },
                ],
                "range": [
                  156,
                  204,
                ],
                "start": 156,
                "type": "ObjectExpression",
              },
              "delegate": false,
              "end": 204,
              "range": [
                150,
                204,
              ],
              "start": 150,
              "type": "YieldExpression",
            },
            "range": [
              150,
              205,
            ],
            "start": 150,
            "type": "ExpressionStatement",
          },
          {
            "end": 265,
            "expression": {
              "argument": {
                "end": 264,
                "properties": [
                  {
                    "computed": false,
                    "end": 230,
                    "key": {
                      "end": 222,
                      "name": "arg1",
                      "range": [
                        218,
                        222,
                      ],
                      "start": 218,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      218,
                      230,
                    ],
                    "shorthand": false,
                    "start": 218,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 228,
                        "name": "arg1",
                        "range": [
                          224,
                          228,
                        ],
                        "start": 224,
                        "type": "Identifier",
                      },
                      "end": 230,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        224,
                        230,
                      ],
                      "start": 224,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 238,
                    "key": {
                      "end": 233,
                      "name": "i",
                      "range": [
                        232,
                        233,
                      ],
                      "start": 232,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      232,
                      238,
                    ],
                    "shorthand": false,
                    "start": 232,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 238,
                        "name": "i",
                        "range": [
                          237,
                          238,
                        ],
                        "start": 237,
                        "type": "Identifier",
                      },
                      "end": 238,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        235,
                        238,
                      ],
                      "start": 235,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 246,
                    "key": {
                      "end": 241,
                      "name": "j",
                      "range": [
                        240,
                        241,
                      ],
                      "start": 240,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      240,
                      246,
                    ],
                    "shorthand": false,
                    "start": 240,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 244,
                        "name": "j",
                        "range": [
                          243,
                          244,
                        ],
                        "start": 243,
                        "type": "Identifier",
                      },
                      "end": 246,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        243,
                        246,
                      ],
                      "start": 243,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 254,
                    "key": {
                      "end": 249,
                      "name": "k",
                      "range": [
                        248,
                        249,
                      ],
                      "start": 248,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      248,
                      254,
                    ],
                    "shorthand": false,
                    "start": 248,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 252,
                        "name": "k",
                        "range": [
                          251,
                          252,
                        ],
                        "start": 251,
                        "type": "Identifier",
                      },
                      "end": 254,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        251,
                        254,
                      ],
                      "start": 251,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 262,
                    "key": {
                      "end": 257,
                      "name": "p",
                      "range": [
                        256,
                        257,
                      ],
                      "start": 256,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      256,
                      262,
                    ],
                    "shorthand": false,
                    "start": 256,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 262,
                        "name": "p",
                        "range": [
                          261,
                          262,
                        ],
                        "start": 261,
                        "type": "Identifier",
                      },
                      "end": 262,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        259,
                        262,
                      ],
                      "start": 259,
                      "type": "UpdateExpression",
                    },
                  },
                ],
                "range": [
                  216,
                  264,
                ],
                "start": 216,
                "type": "ObjectExpression",
              },
              "delegate": false,
              "end": 264,
              "range": [
                210,
                264,
              ],
              "start": 210,
              "type": "YieldExpression",
            },
            "range": [
              210,
              265,
            ],
            "start": 210,
            "type": "ExpressionStatement",
          },
          {
            "end": 325,
            "expression": {
              "argument": {
                "end": 324,
                "properties": [
                  {
                    "computed": false,
                    "end": 290,
                    "key": {
                      "end": 282,
                      "name": "arg1",
                      "range": [
                        278,
                        282,
                      ],
                      "start": 278,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      278,
                      290,
                    ],
                    "shorthand": false,
                    "start": 278,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 288,
                        "name": "arg1",
                        "range": [
                          284,
                          288,
                        ],
                        "start": 284,
                        "type": "Identifier",
                      },
                      "end": 290,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        284,
                        290,
                      ],
                      "start": 284,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 298,
                    "key": {
                      "end": 293,
                      "name": "i",
                      "range": [
                        292,
                        293,
                      ],
                      "start": 292,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      292,
                      298,
                    ],
                    "shorthand": false,
                    "start": 292,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 298,
                        "name": "i",
                        "range": [
                          297,
                          298,
                        ],
                        "start": 297,
                        "type": "Identifier",
                      },
                      "end": 298,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        295,
                        298,
                      ],
                      "start": 295,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 306,
                    "key": {
                      "end": 301,
                      "name": "j",
                      "range": [
                        300,
                        301,
                      ],
                      "start": 300,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      300,
                      306,
                    ],
                    "shorthand": false,
                    "start": 300,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 304,
                        "name": "j",
                        "range": [
                          303,
                          304,
                        ],
                        "start": 303,
                        "type": "Identifier",
                      },
                      "end": 306,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        303,
                        306,
                      ],
                      "start": 303,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 314,
                    "key": {
                      "end": 309,
                      "name": "k",
                      "range": [
                        308,
                        309,
                      ],
                      "start": 308,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      308,
                      314,
                    ],
                    "shorthand": false,
                    "start": 308,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 312,
                        "name": "k",
                        "range": [
                          311,
                          312,
                        ],
                        "start": 311,
                        "type": "Identifier",
                      },
                      "end": 314,
                      "operator": "++",
                      "prefix": false,
                      "range": [
                        311,
                        314,
                      ],
                      "start": 311,
                      "type": "UpdateExpression",
                    },
                  },
                  {
                    "computed": false,
                    "end": 322,
                    "key": {
                      "end": 317,
                      "name": "p",
                      "range": [
                        316,
                        317,
                      ],
                      "start": 316,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      316,
                      322,
                    ],
                    "shorthand": false,
                    "start": 316,
                    "type": "Property",
                    "value": {
                      "argument": {
                        "end": 322,
                        "name": "p",
                        "range": [
                          321,
                          322,
                        ],
                        "start": 321,
                        "type": "Identifier",
                      },
                      "end": 322,
                      "operator": "++",
                      "prefix": true,
                      "range": [
                        319,
                        322,
                      ],
                      "start": 319,
                      "type": "UpdateExpression",
                    },
                  },
                ],
                "range": [
                  276,
                  324,
                ],
                "start": 276,
                "type": "ObjectExpression",
              },
              "delegate": false,
              "end": 324,
              "range": [
                270,
                324,
              ],
              "start": 270,
              "type": "YieldExpression",
            },
            "range": [
              270,
              325,
            ],
            "start": 270,
            "type": "ExpressionStatement",
          },
        ],
        "end": 327,
        "range": [
          30,
          327,
        ],
        "start": 30,
        "type": "BlockStatement",
      },
      "end": 327,
      "generator": true,
      "id": {
        "end": 23,
        "name": "testGenerator",
        "range": [
          10,
          23,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "params": [
        {
          "end": 28,
          "name": "arg1",
          "range": [
            24,
            28,
          ],
          "start": 24,
          "type": "Identifier",
        },
      ],
      "range": [
        0,
        327,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
    {
      "declarations": [
        {
          "end": 356,
          "id": {
            "end": 336,
            "name": "gen",
            "range": [
              333,
              336,
            ],
            "start": 333,
            "type": "Identifier",
          },
          "init": {
            "arguments": [
              {
                "end": 355,
                "range": [
                  353,
                  355,
                ],
                "raw": "10",
                "start": 353,
                "type": "Literal",
                "value": 10,
              },
            ],
            "callee": {
              "end": 352,
              "name": "testGenerator",
              "range": [
                339,
                352,
              ],
              "start": 339,
              "type": "Identifier",
            },
            "end": 356,
            "optional": false,
            "range": [
              339,
              356,
            ],
            "start": 339,
            "type": "CallExpression",
          },
          "range": [
            333,
            356,
          ],
          "start": 333,
          "type": "VariableDeclarator",
        },
      ],
      "end": 357,
      "kind": "var",
      "range": [
        329,
        357,
      ],
      "start": 329,
      "type": "VariableDeclaration",
    },
    {
      "async": false,
      "body": {
        "body": [
          {
            "declarations": [
              {
                "end": 404,
                "id": {
                  "end": 391,
                  "name": "v1",
                  "range": [
                    389,
                    391,
                  ],
                  "start": 389,
                  "type": "Identifier",
                },
                "init": {
                  "arguments": [],
                  "callee": {
                    "computed": false,
                    "end": 402,
                    "object": {
                      "end": 397,
                      "name": "gen",
                      "range": [
                        394,
                        397,
                      ],
                      "start": 394,
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "end": 402,
                      "name": "next",
                      "range": [
                        398,
                        402,
                      ],
                      "start": 398,
                      "type": "Identifier",
                    },
                    "range": [
                      394,
                      402,
                    ],
                    "start": 394,
                    "type": "MemberExpression",
                  },
                  "end": 404,
                  "optional": false,
                  "range": [
                    394,
                    404,
                  ],
                  "start": 394,
                  "type": "CallExpression",
                },
                "range": [
                  389,
                  404,
                ],
                "start": 389,
                "type": "VariableDeclarator",
              },
            ],
            "end": 405,
            "kind": "var",
            "range": [
              385,
              405,
            ],
            "start": 385,
            "type": "VariableDeclaration",
          },
          {
            "declarations": [
              {
                "end": 459,
                "id": {
                  "end": 417,
                  "name": "val",
                  "range": [
                    414,
                    417,
                  ],
                  "start": 414,
                  "type": "Identifier",
                },
                "init": {
                  "arguments": [
                    {
                      "computed": false,
                      "end": 443,
                      "object": {
                        "end": 437,
                        "name": "v1",
                        "range": [
                          435,
                          437,
                        ],
                        "start": 435,
                        "type": "Identifier",
                      },
                      "optional": false,
                      "property": {
                        "end": 443,
                        "name": "value",
                        "range": [
                          438,
                          443,
                        ],
                        "start": 438,
                        "type": "Identifier",
                      },
                      "range": [
                        435,
                        443,
                      ],
                      "start": 435,
                      "type": "MemberExpression",
                    },
                    {
                      "end": 454,
                      "name": "undefined",
                      "range": [
                        445,
                        454,
                      ],
                      "start": 445,
                      "type": "Identifier",
                    },
                    {
                      "end": 458,
                      "range": [
                        456,
                        458,
                      ],
                      "raw": "''",
                      "start": 456,
                      "type": "Literal",
                      "value": "",
                    },
                  ],
                  "callee": {
                    "computed": false,
                    "end": 434,
                    "object": {
                      "end": 424,
                      "name": "JSON",
                      "range": [
                        420,
                        424,
                      ],
                      "start": 420,
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "end": 434,
                      "name": "stringify",
                      "range": [
                        425,
                        434,
                      ],
                      "start": 425,
                      "type": "Identifier",
                    },
                    "range": [
                      420,
                      434,
                    ],
                    "start": 420,
                    "type": "MemberExpression",
                  },
                  "end": 459,
                  "optional": false,
                  "range": [
                    420,
                    459,
                  ],
                  "start": 420,
                  "type": "CallExpression",
                },
                "range": [
                  414,
                  459,
                ],
                "start": 414,
                "type": "VariableDeclarator",
              },
            ],
            "end": 460,
            "kind": "var",
            "range": [
              410,
              460,
            ],
            "start": 410,
            "type": "VariableDeclaration",
          },
        ],
        "end": 462,
        "range": [
          379,
          462,
        ],
        "start": 379,
        "type": "BlockStatement",
      },
      "end": 462,
      "generator": false,
      "id": {
        "end": 376,
        "name": "yieldOne",
        "range": [
          368,
          376,
        ],
        "start": 368,
        "type": "Identifier",
      },
      "params": [],
      "range": [
        359,
        462,
      ],
      "start": 359,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 462,
  "range": [
    0,
    462,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > function*a(){yield
a} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "argument": null,
              "delegate": false,
              "type": "YieldExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "a",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > let foo = function*() {
  yield* (function*() { yield 42; }());
  assertUnreachable();
} 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 88,
          "id": {
            "end": 7,
            "name": "foo",
            "range": [
              4,
              7,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "body": [
                {
                  "end": 63,
                  "expression": {
                    "argument": {
                      "arguments": [],
                      "callee": {
                        "async": false,
                        "body": {
                          "body": [
                            {
                              "end": 57,
                              "expression": {
                                "argument": {
                                  "end": 56,
                                  "range": [
                                    54,
                                    56,
                                  ],
                                  "start": 54,
                                  "type": "Literal",
                                  "value": 42,
                                },
                                "delegate": false,
                                "end": 56,
                                "range": [
                                  48,
                                  56,
                                ],
                                "start": 48,
                                "type": "YieldExpression",
                              },
                              "range": [
                                48,
                                57,
                              ],
                              "start": 48,
                              "type": "ExpressionStatement",
                            },
                          ],
                          "end": 59,
                          "range": [
                            46,
                            59,
                          ],
                          "start": 46,
                          "type": "BlockStatement",
                        },
                        "end": 59,
                        "generator": true,
                        "id": null,
                        "params": [],
                        "range": [
                          34,
                          59,
                        ],
                        "start": 34,
                        "type": "FunctionExpression",
                      },
                      "end": 61,
                      "optional": false,
                      "range": [
                        34,
                        61,
                      ],
                      "start": 34,
                      "type": "CallExpression",
                    },
                    "delegate": true,
                    "end": 62,
                    "range": [
                      26,
                      62,
                    ],
                    "start": 26,
                    "type": "YieldExpression",
                  },
                  "range": [
                    26,
                    63,
                  ],
                  "start": 26,
                  "type": "ExpressionStatement",
                },
                {
                  "end": 86,
                  "expression": {
                    "arguments": [],
                    "callee": {
                      "end": 83,
                      "name": "assertUnreachable",
                      "range": [
                        66,
                        83,
                      ],
                      "start": 66,
                      "type": "Identifier",
                    },
                    "end": 85,
                    "optional": false,
                    "range": [
                      66,
                      85,
                    ],
                    "start": 66,
                    "type": "CallExpression",
                  },
                  "range": [
                    66,
                    86,
                  ],
                  "start": 66,
                  "type": "ExpressionStatement",
                },
              ],
              "end": 88,
              "range": [
                22,
                88,
              ],
              "start": 22,
              "type": "BlockStatement",
            },
            "end": 88,
            "generator": true,
            "id": null,
            "params": [],
            "range": [
              10,
              88,
            ],
            "start": 10,
            "type": "FunctionExpression",
          },
          "range": [
            4,
            88,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 88,
      "kind": "let",
      "range": [
        0,
        88,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 88,
  "range": [
    0,
    88,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > try { } catch (yield) { } 1`] = `
{
  "body": [
    {
      "block": {
        "body": [],
        "type": "BlockStatement",
      },
      "finalizer": null,
      "handler": {
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "param": {
          "name": "yield",
          "type": "Identifier",
        },
        "type": "CatchClause",
      },
      "type": "TryStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > var foo = yield = 1; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "foo",
            "type": "Identifier",
          },
          "init": {
            "left": {
              "name": "yield",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "type": "Literal",
              "value": 1,
            },
            "type": "AssignmentExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > var gfe = function* () { switch (1) { case yield: break; } } 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "gfe",
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "body": [
                {
                  "cases": [
                    {
                      "consequent": [
                        {
                          "label": null,
                          "type": "BreakStatement",
                        },
                      ],
                      "test": {
                        "argument": null,
                        "delegate": false,
                        "type": "YieldExpression",
                      },
                      "type": "SwitchCase",
                    },
                  ],
                  "discriminant": {
                    "type": "Literal",
                    "value": 1,
                  },
                  "type": "SwitchStatement",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": true,
            "id": null,
            "params": [],
            "type": "FunctionExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > var o = { *gf() { switch (1) { case yield: break; } } } 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "o",
            "type": "Identifier",
          },
          "init": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "gf",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": true,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "async": false,
                  "body": {
                    "body": [
                      {
                        "cases": [
                          {
                            "consequent": [
                              {
                                "label": null,
                                "type": "BreakStatement",
                              },
                            ],
                            "test": {
                              "argument": null,
                              "delegate": false,
                              "type": "YieldExpression",
                            },
                            "type": "SwitchCase",
                          },
                        ],
                        "discriminant": {
                          "type": "Literal",
                          "value": 1,
                        },
                        "type": "SwitchStatement",
                      },
                    ],
                    "type": "BlockStatement",
                  },
                  "generator": true,
                  "id": null,
                  "params": [],
                  "type": "FunctionExpression",
                },
              },
            ],
            "type": "ObjectExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > var o = { *gf() { switch (1) { case yield: break; } } } 2`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "o",
            "type": "Identifier",
          },
          "init": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "gf",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": true,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "async": false,
                  "body": {
                    "body": [
                      {
                        "cases": [
                          {
                            "consequent": [
                              {
                                "label": null,
                                "type": "BreakStatement",
                              },
                            ],
                            "test": {
                              "argument": null,
                              "delegate": false,
                              "type": "YieldExpression",
                            },
                            "type": "SwitchCase",
                          },
                        ],
                        "discriminant": {
                          "type": "Literal",
                          "value": 1,
                        },
                        "type": "SwitchStatement",
                      },
                    ],
                    "type": "BlockStatement",
                  },
                  "generator": true,
                  "id": null,
                  "params": [],
                  "type": "FunctionExpression",
                },
              },
            ],
            "type": "ObjectExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield  => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "yield",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield * 2; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "yield",
          "type": "Identifier",
        },
        "operator": "*",
        "right": {
          "type": "Literal",
          "value": 2,
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield *= x; 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 10,
        "left": {
          "end": 5,
          "name": "yield",
          "range": [
            0,
            5,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "*=",
        "range": [
          0,
          10,
        ],
        "right": {
          "end": 10,
          "name": "x",
          "range": [
            9,
            10,
          ],
          "start": 9,
          "type": "Identifier",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield => yield ? foo : bar 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "alternate": {
            "name": "bar",
            "type": "Identifier",
          },
          "consequent": {
            "name": "foo",
            "type": "Identifier",
          },
          "test": {
            "name": "yield",
            "type": "Identifier",
          },
          "type": "ConditionalExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "yield",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield 1`] = `
{
  "body": [
    {
      "expression": {
        "name": "yield",
        "type": "Identifier",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield(100) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "type": "Literal",
            "value": 100,
          },
        ],
        "callee": {
          "name": "yield",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield: 34 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "type": "Literal",
          "value": 34,
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "yield",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield: foo  => {} 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "expression": false,
          "generator": false,
          "params": [
            {
              "name": "foo",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "yield",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield: foo 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "yield",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Yield > Expressions - Yield (pass) > yield[100] 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": true,
        "object": {
          "name": "yield",
          "type": "Identifier",
        },
        "optional": false,
        "property": {
          "type": "Literal",
          "value": 100,
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
