// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Expressions - Binary > Expressions - Binary (pass) > ++x ** y 1`] = `
{
  "body": [
    {
      "end": 8,
      "expression": {
        "end": 8,
        "left": {
          "argument": {
            "end": 3,
            "name": "x",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          "end": 3,
          "operator": "++",
          "prefix": true,
          "range": [
            0,
            3,
          ],
          "start": 0,
          "type": "UpdateExpression",
        },
        "operator": "**",
        "range": [
          0,
          8,
        ],
        "right": {
          "end": 8,
          "name": "y",
          "range": [
            7,
            8,
          ],
          "start": 7,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        8,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 8,
  "range": [
    0,
    8,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > -(x ** y) 1`] = `
{
  "body": [
    {
      "end": 9,
      "expression": {
        "argument": {
          "end": 8,
          "left": {
            "end": 3,
            "name": "x",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          "operator": "**",
          "range": [
            2,
            8,
          ],
          "right": {
            "end": 8,
            "name": "y",
            "range": [
              7,
              8,
            ],
            "start": 7,
            "type": "Identifier",
          },
          "start": 2,
          "type": "BinaryExpression",
        },
        "end": 9,
        "operator": "-",
        "prefix": true,
        "range": [
          0,
          9,
        ],
        "start": 0,
        "type": "UnaryExpression",
      },
      "range": [
        0,
        9,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 9,
  "range": [
    0,
    9,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > 1+2; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "type": "Literal",
          "value": 1,
        },
        "operator": "+",
        "right": {
          "type": "Literal",
          "value": 2,
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a && b && c 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 11,
        "left": {
          "end": 6,
          "left": {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
          "operator": "&&",
          "range": [
            0,
            6,
          ],
          "right": {
            "end": 6,
            "name": "b",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "start": 0,
          "type": "LogicalExpression",
        },
        "operator": "&&",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "name": "c",
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a && b || c 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "&&",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "LogicalExpression",
        },
        "operator": "||",
        "right": {
          "name": "c",
          "type": "Identifier",
        },
        "type": "LogicalExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a == b != c === d !== e 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "end": 23,
        "left": {
          "end": 17,
          "left": {
            "end": 11,
            "left": {
              "end": 6,
              "left": {
                "end": 1,
                "name": "a",
                "range": [
                  0,
                  1,
                ],
                "start": 0,
                "type": "Identifier",
              },
              "operator": "==",
              "range": [
                0,
                6,
              ],
              "right": {
                "end": 6,
                "name": "b",
                "range": [
                  5,
                  6,
                ],
                "start": 5,
                "type": "Identifier",
              },
              "start": 0,
              "type": "BinaryExpression",
            },
            "operator": "!=",
            "range": [
              0,
              11,
            ],
            "right": {
              "end": 11,
              "name": "c",
              "range": [
                10,
                11,
              ],
              "start": 10,
              "type": "Identifier",
            },
            "start": 0,
            "type": "BinaryExpression",
          },
          "operator": "===",
          "range": [
            0,
            17,
          ],
          "right": {
            "end": 17,
            "name": "d",
            "range": [
              16,
              17,
            ],
            "start": 16,
            "type": "Identifier",
          },
          "start": 0,
          "type": "BinaryExpression",
        },
        "operator": "!==",
        "range": [
          0,
          23,
        ],
        "right": {
          "end": 23,
          "name": "e",
          "range": [
            22,
            23,
          ],
          "start": 22,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a ^ b | c 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "loc": {
              "end": {
                "column": 1,
                "line": 1,
              },
              "start": {
                "column": 0,
                "line": 1,
              },
            },
            "name": "a",
            "type": "Identifier",
          },
          "loc": {
            "end": {
              "column": 5,
              "line": 1,
            },
            "start": {
              "column": 0,
              "line": 1,
            },
          },
          "operator": "^",
          "right": {
            "loc": {
              "end": {
                "column": 5,
                "line": 1,
              },
              "start": {
                "column": 4,
                "line": 1,
              },
            },
            "name": "b",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "loc": {
          "end": {
            "column": 9,
            "line": 1,
          },
          "start": {
            "column": 0,
            "line": 1,
          },
        },
        "operator": "|",
        "right": {
          "loc": {
            "end": {
              "column": 9,
              "line": 1,
            },
            "start": {
              "column": 8,
              "line": 1,
            },
          },
          "name": "c",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "loc": {
        "end": {
          "column": 9,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "type": "ExpressionStatement",
    },
  ],
  "loc": {
    "end": {
      "column": 9,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a || b && c 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "loc": {
            "end": {
              "column": 1,
              "line": 1,
            },
            "start": {
              "column": 0,
              "line": 1,
            },
          },
          "name": "a",
          "type": "Identifier",
        },
        "loc": {
          "end": {
            "column": 11,
            "line": 1,
          },
          "start": {
            "column": 0,
            "line": 1,
          },
        },
        "operator": "||",
        "right": {
          "left": {
            "loc": {
              "end": {
                "column": 6,
                "line": 1,
              },
              "start": {
                "column": 5,
                "line": 1,
              },
            },
            "name": "b",
            "type": "Identifier",
          },
          "loc": {
            "end": {
              "column": 11,
              "line": 1,
            },
            "start": {
              "column": 5,
              "line": 1,
            },
          },
          "operator": "&&",
          "right": {
            "loc": {
              "end": {
                "column": 11,
                "line": 1,
              },
              "start": {
                "column": 10,
                "line": 1,
              },
            },
            "name": "c",
            "type": "Identifier",
          },
          "type": "LogicalExpression",
        },
        "type": "LogicalExpression",
      },
      "loc": {
        "end": {
          "column": 11,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "type": "ExpressionStatement",
    },
  ],
  "loc": {
    "end": {
      "column": 11,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a || b || c 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 11,
        "left": {
          "end": 6,
          "left": {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
          "operator": "||",
          "range": [
            0,
            6,
          ],
          "right": {
            "end": 6,
            "name": "b",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "start": 0,
          "type": "LogicalExpression",
        },
        "operator": "||",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "name": "c",
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a=b+=c-=d**=e*=f/=g%=h<<=i>>=j>>>=k&=l^=m|=n 1`] = `
{
  "body": [
    {
      "end": 44,
      "expression": {
        "end": 44,
        "left": {
          "end": 1,
          "name": "a",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          44,
        ],
        "right": {
          "end": 44,
          "left": {
            "end": 3,
            "name": "b",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          "operator": "+=",
          "range": [
            2,
            44,
          ],
          "right": {
            "end": 44,
            "left": {
              "end": 6,
              "name": "c",
              "range": [
                5,
                6,
              ],
              "start": 5,
              "type": "Identifier",
            },
            "operator": "-=",
            "range": [
              5,
              44,
            ],
            "right": {
              "end": 44,
              "left": {
                "end": 9,
                "name": "d",
                "range": [
                  8,
                  9,
                ],
                "start": 8,
                "type": "Identifier",
              },
              "operator": "**=",
              "range": [
                8,
                44,
              ],
              "right": {
                "end": 44,
                "left": {
                  "end": 13,
                  "name": "e",
                  "range": [
                    12,
                    13,
                  ],
                  "start": 12,
                  "type": "Identifier",
                },
                "operator": "*=",
                "range": [
                  12,
                  44,
                ],
                "right": {
                  "end": 44,
                  "left": {
                    "end": 16,
                    "name": "f",
                    "range": [
                      15,
                      16,
                    ],
                    "start": 15,
                    "type": "Identifier",
                  },
                  "operator": "/=",
                  "range": [
                    15,
                    44,
                  ],
                  "right": {
                    "end": 44,
                    "left": {
                      "end": 19,
                      "name": "g",
                      "range": [
                        18,
                        19,
                      ],
                      "start": 18,
                      "type": "Identifier",
                    },
                    "operator": "%=",
                    "range": [
                      18,
                      44,
                    ],
                    "right": {
                      "end": 44,
                      "left": {
                        "end": 22,
                        "name": "h",
                        "range": [
                          21,
                          22,
                        ],
                        "start": 21,
                        "type": "Identifier",
                      },
                      "operator": "<<=",
                      "range": [
                        21,
                        44,
                      ],
                      "right": {
                        "end": 44,
                        "left": {
                          "end": 26,
                          "name": "i",
                          "range": [
                            25,
                            26,
                          ],
                          "start": 25,
                          "type": "Identifier",
                        },
                        "operator": ">>=",
                        "range": [
                          25,
                          44,
                        ],
                        "right": {
                          "end": 44,
                          "left": {
                            "end": 30,
                            "name": "j",
                            "range": [
                              29,
                              30,
                            ],
                            "start": 29,
                            "type": "Identifier",
                          },
                          "operator": ">>>=",
                          "range": [
                            29,
                            44,
                          ],
                          "right": {
                            "end": 44,
                            "left": {
                              "end": 35,
                              "name": "k",
                              "range": [
                                34,
                                35,
                              ],
                              "start": 34,
                              "type": "Identifier",
                            },
                            "operator": "&=",
                            "range": [
                              34,
                              44,
                            ],
                            "right": {
                              "end": 44,
                              "left": {
                                "end": 38,
                                "name": "l",
                                "range": [
                                  37,
                                  38,
                                ],
                                "start": 37,
                                "type": "Identifier",
                              },
                              "operator": "^=",
                              "range": [
                                37,
                                44,
                              ],
                              "right": {
                                "end": 44,
                                "left": {
                                  "end": 41,
                                  "name": "m",
                                  "range": [
                                    40,
                                    41,
                                  ],
                                  "start": 40,
                                  "type": "Identifier",
                                },
                                "operator": "|=",
                                "range": [
                                  40,
                                  44,
                                ],
                                "right": {
                                  "end": 44,
                                  "name": "n",
                                  "range": [
                                    43,
                                    44,
                                  ],
                                  "start": 43,
                                  "type": "Identifier",
                                },
                                "start": 40,
                                "type": "AssignmentExpression",
                              },
                              "start": 37,
                              "type": "AssignmentExpression",
                            },
                            "start": 34,
                            "type": "AssignmentExpression",
                          },
                          "start": 29,
                          "type": "AssignmentExpression",
                        },
                        "start": 25,
                        "type": "AssignmentExpression",
                      },
                      "start": 21,
                      "type": "AssignmentExpression",
                    },
                    "start": 18,
                    "type": "AssignmentExpression",
                  },
                  "start": 15,
                  "type": "AssignmentExpression",
                },
                "start": 12,
                "type": "AssignmentExpression",
              },
              "start": 8,
              "type": "AssignmentExpression",
            },
            "start": 5,
            "type": "AssignmentExpression",
          },
          "start": 2,
          "type": "AssignmentExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        44,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 44,
  "range": [
    0,
    44,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > a|=b^=c&=d>>>=e>>=f<<=g%=h/=i*=j**=k-=l+=m=n 1`] = `
{
  "body": [
    {
      "end": 44,
      "expression": {
        "end": 44,
        "left": {
          "end": 1,
          "name": "a",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "|=",
        "range": [
          0,
          44,
        ],
        "right": {
          "end": 44,
          "left": {
            "end": 4,
            "name": "b",
            "range": [
              3,
              4,
            ],
            "start": 3,
            "type": "Identifier",
          },
          "operator": "^=",
          "range": [
            3,
            44,
          ],
          "right": {
            "end": 44,
            "left": {
              "end": 7,
              "name": "c",
              "range": [
                6,
                7,
              ],
              "start": 6,
              "type": "Identifier",
            },
            "operator": "&=",
            "range": [
              6,
              44,
            ],
            "right": {
              "end": 44,
              "left": {
                "end": 10,
                "name": "d",
                "range": [
                  9,
                  10,
                ],
                "start": 9,
                "type": "Identifier",
              },
              "operator": ">>>=",
              "range": [
                9,
                44,
              ],
              "right": {
                "end": 44,
                "left": {
                  "end": 15,
                  "name": "e",
                  "range": [
                    14,
                    15,
                  ],
                  "start": 14,
                  "type": "Identifier",
                },
                "operator": ">>=",
                "range": [
                  14,
                  44,
                ],
                "right": {
                  "end": 44,
                  "left": {
                    "end": 19,
                    "name": "f",
                    "range": [
                      18,
                      19,
                    ],
                    "start": 18,
                    "type": "Identifier",
                  },
                  "operator": "<<=",
                  "range": [
                    18,
                    44,
                  ],
                  "right": {
                    "end": 44,
                    "left": {
                      "end": 23,
                      "name": "g",
                      "range": [
                        22,
                        23,
                      ],
                      "start": 22,
                      "type": "Identifier",
                    },
                    "operator": "%=",
                    "range": [
                      22,
                      44,
                    ],
                    "right": {
                      "end": 44,
                      "left": {
                        "end": 26,
                        "name": "h",
                        "range": [
                          25,
                          26,
                        ],
                        "start": 25,
                        "type": "Identifier",
                      },
                      "operator": "/=",
                      "range": [
                        25,
                        44,
                      ],
                      "right": {
                        "end": 44,
                        "left": {
                          "end": 29,
                          "name": "i",
                          "range": [
                            28,
                            29,
                          ],
                          "start": 28,
                          "type": "Identifier",
                        },
                        "operator": "*=",
                        "range": [
                          28,
                          44,
                        ],
                        "right": {
                          "end": 44,
                          "left": {
                            "end": 32,
                            "name": "j",
                            "range": [
                              31,
                              32,
                            ],
                            "start": 31,
                            "type": "Identifier",
                          },
                          "operator": "**=",
                          "range": [
                            31,
                            44,
                          ],
                          "right": {
                            "end": 44,
                            "left": {
                              "end": 36,
                              "name": "k",
                              "range": [
                                35,
                                36,
                              ],
                              "start": 35,
                              "type": "Identifier",
                            },
                            "operator": "-=",
                            "range": [
                              35,
                              44,
                            ],
                            "right": {
                              "end": 44,
                              "left": {
                                "end": 39,
                                "name": "l",
                                "range": [
                                  38,
                                  39,
                                ],
                                "start": 38,
                                "type": "Identifier",
                              },
                              "operator": "+=",
                              "range": [
                                38,
                                44,
                              ],
                              "right": {
                                "end": 44,
                                "left": {
                                  "end": 42,
                                  "name": "m",
                                  "range": [
                                    41,
                                    42,
                                  ],
                                  "start": 41,
                                  "type": "Identifier",
                                },
                                "operator": "=",
                                "range": [
                                  41,
                                  44,
                                ],
                                "right": {
                                  "end": 44,
                                  "name": "n",
                                  "range": [
                                    43,
                                    44,
                                  ],
                                  "start": 43,
                                  "type": "Identifier",
                                },
                                "start": 41,
                                "type": "AssignmentExpression",
                              },
                              "start": 38,
                              "type": "AssignmentExpression",
                            },
                            "start": 35,
                            "type": "AssignmentExpression",
                          },
                          "start": 31,
                          "type": "AssignmentExpression",
                        },
                        "start": 28,
                        "type": "AssignmentExpression",
                      },
                      "start": 25,
                      "type": "AssignmentExpression",
                    },
                    "start": 22,
                    "type": "AssignmentExpression",
                  },
                  "start": 18,
                  "type": "AssignmentExpression",
                },
                "start": 14,
                "type": "AssignmentExpression",
              },
              "start": 9,
              "type": "AssignmentExpression",
            },
            "start": 6,
            "type": "AssignmentExpression",
          },
          "start": 3,
          "type": "AssignmentExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        44,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 44,
  "range": [
    0,
    44,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > b && c == d 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 11,
        "left": {
          "end": 1,
          "name": "b",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "&&",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "left": {
            "end": 6,
            "name": "c",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "operator": "==",
          "range": [
            5,
            11,
          ],
          "right": {
            "end": 11,
            "name": "d",
            "range": [
              10,
              11,
            ],
            "start": 10,
            "type": "Identifier",
          },
          "start": 5,
          "type": "BinaryExpression",
        },
        "start": 0,
        "type": "LogicalExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > var a = {b: 'u' + 1 } 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 21,
          "id": {
            "end": 5,
            "loc": {
              "end": {
                "column": 5,
                "line": 1,
              },
              "start": {
                "column": 4,
                "line": 1,
              },
            },
            "name": "a",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "init": {
            "end": 21,
            "loc": {
              "end": {
                "column": 21,
                "line": 1,
              },
              "start": {
                "column": 8,
                "line": 1,
              },
            },
            "properties": [
              {
                "computed": false,
                "end": 19,
                "key": {
                  "end": 10,
                  "loc": {
                    "end": {
                      "column": 10,
                      "line": 1,
                    },
                    "start": {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "name": "b",
                  "range": [
                    9,
                    10,
                  ],
                  "start": 9,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": {
                  "end": {
                    "column": 19,
                    "line": 1,
                  },
                  "start": {
                    "column": 9,
                    "line": 1,
                  },
                },
                "method": false,
                "range": [
                  9,
                  19,
                ],
                "shorthand": false,
                "start": 9,
                "type": "Property",
                "value": {
                  "end": 19,
                  "left": {
                    "end": 15,
                    "loc": {
                      "end": {
                        "column": 15,
                        "line": 1,
                      },
                      "start": {
                        "column": 12,
                        "line": 1,
                      },
                    },
                    "range": [
                      12,
                      15,
                    ],
                    "start": 12,
                    "type": "Literal",
                    "value": "u",
                  },
                  "loc": {
                    "end": {
                      "column": 19,
                      "line": 1,
                    },
                    "start": {
                      "column": 12,
                      "line": 1,
                    },
                  },
                  "operator": "+",
                  "range": [
                    12,
                    19,
                  ],
                  "right": {
                    "end": 19,
                    "loc": {
                      "end": {
                        "column": 19,
                        "line": 1,
                      },
                      "start": {
                        "column": 18,
                        "line": 1,
                      },
                    },
                    "range": [
                      18,
                      19,
                    ],
                    "start": 18,
                    "type": "Literal",
                    "value": 1,
                  },
                  "start": 12,
                  "type": "BinaryExpression",
                },
              },
            ],
            "range": [
              8,
              21,
            ],
            "start": 8,
            "type": "ObjectExpression",
          },
          "loc": {
            "end": {
              "column": 21,
              "line": 1,
            },
            "start": {
              "column": 4,
              "line": 1,
            },
          },
          "range": [
            4,
            21,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 21,
      "kind": "var",
      "loc": {
        "end": {
          "column": 21,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        21,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 21,
  "loc": {
    "end": {
      "column": 21,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    21,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > x * y % z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "%",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > x + y * z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "+",
        "right": {
          "left": {
            "name": "y",
            "type": "Identifier",
          },
          "operator": "*",
          "right": {
            "name": "z",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > x - y + z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "-",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "+",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Binary > Expressions - Binary (pass) > x in y 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "in",
        "right": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
