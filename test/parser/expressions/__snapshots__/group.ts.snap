// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Expressions - Group > Expressions - Group (fail) > "use strict"; ({ arguments } = a); 1`] = `
"SyntaxError [1:31-1:32]: Invalid left-hand side in assignment
> 1 | "use strict"; ({ arguments } = a);
    |                                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > "use strict"; (a, arguments) => {} 1`] = `
"SyntaxError [1:29-1:31]: The left-hand side of the arrow can only be destructed through assignment
> 1 | "use strict"; (a, arguments) => {}
    |                              ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > "use strict"; (arguments = a) => {} 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | "use strict"; (arguments = a) => {}
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > "use strict"; (arguments = a) 1`] = `
"SyntaxError [1:25-1:26]: Invalid left-hand side in assignment
> 1 | "use strict"; (arguments = a)
    |                          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > "use strict"; (arguments) => {} 1`] = `
"SyntaxError [1:26-1:28]: The left-hand side of the arrow can only be destructed through assignment
> 1 | "use strict"; (arguments) => {}
    |                           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > '(...(...('z')) 1`] = `
"SyntaxError [1:11-1:12]: Unexpected token: 'identifier'
> 1 | '(...(...('z'))
    |            ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > '(...(...1)) 1`] = `
"SyntaxError [1:0-1:12]: Unterminated string literal
> 1 | '(...(...1))
    | ^^^^^^^^^^^^ Unterminated string literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > '(...(...z)) 1`] = `
"SyntaxError [1:0-1:12]: Unterminated string literal
> 1 | '(...(...z))
    | ^^^^^^^^^^^^ Unterminated string literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ( ({x: 1}) ) => {}; 1`] = `
"SyntaxError [1:13-1:15]: Unexpected token: '=>'
> 1 | ( ({x: 1}) ) => {};
    |              ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ( ({x: 1}) = y ) => {} 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in assignment
> 1 | ( ({x: 1}) = y ) => {}
    |            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ( (x) ) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | ( (x) ) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ( (x) = y ) => {} 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ( (x) = y ) => {}
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ( { get x() {} } = 0) 1`] = `
"SyntaxError [1:19-1:20]: Invalid left-hand side in assignment
> 1 | ( { get x() {} } = 0)
    |                    ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ("a") = "b" 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ("a") = "b"
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (()) => 0 1`] = `
"SyntaxError [1:3-1:4]: Expected '=>'
> 1 | (()) => 0
    |    ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((...'z')) 1`] = `
"SyntaxError [1:8-1:9]: Invalid rest argument
> 1 | ((...'z'))
    |         ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((...z)) 1`] = `
"SyntaxError [1:7-1:8]: Expected '=>'
> 1 | ((...z))
    |        ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (([x])=y in z); 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | (([x])=y in z);
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (({x:y}) += x) 1`] = `
"SyntaxError [1:9-1:11]: Invalid left-hand side in assignment
> 1 | (({x:y}) += x)
    |          ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x)) => 0 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | ((x)) => 0
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x, y)) => 0 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | ((x, y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x, y), z) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y), z) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x, y), z) => 0 2`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y), z) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x, y, z)) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x, z) => y) = {} 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | ((x, z) => y) = {}
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ((x={15: (await foo)}) => x 1`] = `
"SyntaxError [1:16-1:19]: Expected ')'
> 1 | ((x={15: (await foo)}) => x
    |                 ^^^ Expected ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ()
 1`] = `
"SyntaxError [1:2-2:0]: No line break is allowed after '=>'
> 1 | ()
    |   ^
> 2 |
    | ^ No line break is allowed after '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ()
=> 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | ()
> 2 | =>
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ()
=>a 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | ()
> 2 | =>a
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > () 1`] = `
"SyntaxError [1:1-1:2]: Expected '=>'
> 1 | ()
    |  ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > () 2`] = `
"SyntaxError [1:1-1:2]: Expected '=>'
> 1 | ()
    |  ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (); 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ();
    |   ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (++x) => x; 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | (++x) => x;
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (++x, y) => x 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (++x, y) => x
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (,) => {} 1`] = `
"SyntaxError [1:1-1:2]: Unexpected token: ','
> 1 | (,) => {}
    |  ^ Unexpected token: ','"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...); 1`] = `
"SyntaxError [1:4-1:5]: The rest operator is missing an argument
> 1 | (...);
    |     ^ The rest operator is missing an argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (..., x) 1`] = `
"SyntaxError [1:4-1:5]: Unexpected token: ','
> 1 | (..., x)
    |     ^ Unexpected token: ','"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...[a) = a 1`] = `
"SyntaxError [1:6-1:7]: Expected ']'
> 1 | (...[a) = a
    |       ^ Expected ']'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...[a]) = a 1`] = `
"SyntaxError [1:9-1:10]: Expected '=>'
> 1 | (...[a]) = a
    |          ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...[a]) =>  1`] = `
"SyntaxError [1:11-1:12]: Unexpected token: 'end of source'
> 1 | (...[a]) => 
    |            ^ Unexpected token: 'end of source'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...[a]) 1`] = `
"SyntaxError [1:7-1:8]: Expected '=>'
> 1 | (...[a])
    |        ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...[a],) 1`] = `
"SyntaxError [1:7-1:8]: Invalid rest argument
> 1 | (...[a],)
    |        ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...[a]a) = a 1`] = `
"SyntaxError [1:7-1:8]: Invalid rest argument
> 1 | (...[a]a) = a
    |        ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...{a: b}.c = []) 1`] = `
"SyntaxError [1:17-1:18]: Expected '=>'
> 1 | (...{a: b}.c = [])
    |                  ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...a = b) => b 1`] = `
"SyntaxError [1:9-1:10]: Invalid rest argument
> 1 | (...a = b) => b
    |          ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...a) = a 1`] = `
"SyntaxError [1:7-1:8]: Expected '=>'
> 1 | (...a) = a
    |        ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...rest - a) => b 1`] = `
"SyntaxError [1:12-1:13]: Invalid rest argument
> 1 | (...rest - a) => b
    |             ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...x = y) => x 1`] = `
"SyntaxError [1:9-1:10]: Invalid rest argument
> 1 | (...x = y) => x
    |          ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...x); 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | (...x);
    |       ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...x); 2`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | (...x);
    |       ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (...x, y) => x 1`] = `
"SyntaxError [1:5-1:6]: Invalid rest argument
> 1 | (...x, y) => x
    |      ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (/x/) => x 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | (/x/) => x
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (/x/) => x 2`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | (/x/) => x
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([...[[][][]] = x); 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: ']'
> 1 | ([...[[][][]] = x);
    |          ^ Unexpected token: ']'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([...{a = b} = c]) => d; 1`] = `
"SyntaxError [1:19-1:21]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([...{a = b} = c]) => d;
    |                    ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([...a, ,] = [...a, ,]) 1`] = `
"SyntaxError [1:13-1:14]: Invalid left-hand side in assignment
> 1 | ([...a, ,] = [...a, ,])
    |              ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([...a.b]) => c 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([...a.b]) => c
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([...x.y]) => z 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([...x.y]) => z
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0 1`] = `
"SyntaxError [1:50-1:52]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0
    |                                                   ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([[].length]) => x; 1`] = `
"SyntaxError [1:14-1:16]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([[].length]) => x;
    |               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{a:b[0]}])=>0 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{a:b[0]}])=>0
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}.z] = obj) 1`] = `
"SyntaxError [1:9-1:10]: Invalid destructuring assignment target
> 1 | ([{x = y}.z] = obj)
    |          ^ Invalid destructuring assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}.z]) 1`] = `
"SyntaxError [1:9-1:10]: Invalid destructuring assignment target
> 1 | ([{x = y}.z])
    |          ^ Invalid destructuring assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}.z]) 2`] = `
"SyntaxError [1:9-1:10]: Invalid destructuring assignment target
> 1 | ([{x = y}.z])
    |          ^ Invalid destructuring assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}]) 1`] = `
"SyntaxError [1:10-1:11]: Expected '=>'
> 1 | ([{x = y}])
    |           ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}]).z 1`] = `
"SyntaxError [1:11-1:12]: Expected '=>'
> 1 | ([{x = y}]).z
    |            ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}].z = obj) 1`] = `
"SyntaxError [1:10-1:11]: Pattern can not have a tail
> 1 | ([{x = y}].z = obj)
    |           ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}].z) => obj 1`] = `
"SyntaxError [1:10-1:11]: Pattern can not have a tail
> 1 | ([{x = y}].z) => obj
    |           ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([{x = y}].z) 1`] = `
"SyntaxError [1:10-1:11]: Pattern can not have a tail
> 1 | ([{x = y}].z)
    |           ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a 
/b/]); 1`] = `
"SyntaxError [2:3-2:4]: Unexpected token: ']'
  1 | ([a 
> 2 | /b/]);
    |    ^ Unexpected token: ']'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a + b] = x) => a; 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in assignment
> 1 | ([a + b] = x) => a;
    |            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a + b] = x); 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in assignment
> 1 | ([a + b] = x);
    |            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a.a]) => 42 1`] = `
"SyntaxError [1:8-1:10]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([a.a]) => 42
    |         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a]) = [] 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ([a]) = []
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a]) = 0 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ([a]) = 0
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([a]) = x 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ([a]) = x
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([b]) = b; 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ([b]) = b;
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([b]) = b; 2`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ([b]) = b;
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([x, y]) = z; 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | ([x, y]) = z;
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([x.y = a] = (...z)) 1`] = `
"SyntaxError [1:19-1:20]: Expected '=>'
> 1 | ([x.y = a] = (...z))
    |                    ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([x.y]=z) => z 1`] = `
"SyntaxError [1:10-1:12]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([x.y]=z) => z
    |           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([x]++) 1`] = `
"SyntaxError [1:4-1:6]: Invalid increment/decrement operand
> 1 | ([x]++)
    |     ^^ Invalid increment/decrement operand"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([x]=await y)=>z 1`] = `
"SyntaxError [1:11-1:12]: Expected ')'
> 1 | ([x]=await y)=>z
    |            ^ Expected ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ([x]=await y)=>z 2`] = `
"SyntaxError [1:11-1:12]: Expected ')'
> 1 | ([x]=await y)=>z
    |            ^ Expected ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (\`a\`) => b; 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | (\`a\`) => b;
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ (x = yield) = {}; }) 1`] = `
"SyntaxError [1:3-1:4]: Unexpected token: '('
> 1 | ({ (x = yield) = {}; })
    |    ^ Unexpected token: '('"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ ...{a} } = {}) 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | ({ ...{a} } = {})
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ a: (a = d) } = {}) 1`] = `
"SyntaxError [1:18-1:19]: Invalid left-hand side in assignment
> 1 | ({ a: (a = d) } = {})
    |                   ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ if } = a); 1`] = `
"SyntaxError [1:6-1:7]: Invalid keyword
> 1 | ({ if } = a);
    |       ^ Invalid keyword"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ obj:20 }) = 42 1`] = `
"SyntaxError [1:13-1:14]: Invalid left-hand side in assignment
> 1 | ({ obj:20 }) = 42
    |              ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ x = 123 }); 1`] = `
"SyntaxError [1:13-1:14]: Expected '=>'
> 1 | ({ x = 123 });
    |              ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ x: f() } = a); 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | ({ x: f() } = a);
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ x: new f } = a); 1`] = `
"SyntaxError [1:16-1:17]: Invalid left-hand side in assignment
> 1 | ({ x: new f } = a);
    |                 ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ x: x }) = a; 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in assignment
> 1 | ({ x: x }) = a;
    |            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({"a"} = 0) 1`] = `
"SyntaxError [1:5-1:6]: Object literal keys that are strings or numbers must be a method or have a colon
> 1 | ({"a"} = 0)
    |      ^ Object literal keys that are strings or numbers must be a method or have a colon"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({"foo": [x].foo()}=y); 1`] = `
"SyntaxError [1:20-1:21]: Invalid left-hand side in assignment
> 1 | ({"foo": [x].foo()}=y);
    |                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({(a)} = 0) 1`] = `
"SyntaxError [1:2-1:3]: Unexpected token: '('
> 1 | ({(a)} = 0)
    |   ^ Unexpected token: '('"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({**=f(){}}) 1`] = `
"SyntaxError [1:2-1:5]: Unexpected token: '**='
> 1 | ({**=f(){}})
    |   ^^^ Unexpected token: '**='"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({**f(){}}) 1`] = `
"SyntaxError [1:2-1:4]: Unexpected token: '**'
> 1 | ({**f(){}})
    |   ^^ Unexpected token: '**'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({*=f(){}}) 1`] = `
"SyntaxError [1:2-1:4]: Unexpected token: '*='
> 1 | ({*=f(){}})
    |   ^^ Unexpected token: '*='"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({*ident x(){}}) 1`] = `
"SyntaxError [1:9-1:10]: 'identifier' can not be generator method
> 1 | ({*ident x(){}})
    |          ^ 'identifier' can not be generator method"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({*ident: x}) 1`] = `
"SyntaxError [1:8-1:9]: 'identifier' can not be generator method
> 1 | ({*ident: x})
    |         ^ 'identifier' can not be generator method"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({*set x(){}}) 1`] = `
"SyntaxError [1:7-1:8]: 'set' can not be generator method
> 1 | ({*set x(){}})
    |        ^ 'set' can not be generator method"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({,a,} = 0) 1`] = `
"SyntaxError [1:2-1:3]: Unexpected token: ','
> 1 | ({,a,} = 0)
    |   ^ Unexpected token: ','"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({...(x) }) => {} 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...(x) }) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({...[x] }) => {} 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...[x] }) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({...{x} }) => {} 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...{x} }) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({...x.y} = z) => z 1`] = `
"SyntaxError [1:15-1:17]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...x.y} = z) => z
    |                ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({...x.y}) => z 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...x.y}) => z
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({[foo]() {}} = y) 1`] = `
"SyntaxError [1:16-1:17]: Invalid left-hand side in assignment
> 1 | ({[foo]() {}} = y)
    |                 ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({[foo]: a + b} = baz) 1`] = `
"SyntaxError [1:18-1:21]: Invalid left-hand side in assignment
> 1 | ({[foo]: a + b} = baz)
    |                   ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({[foo]: a + b}) => baz 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({[foo]: a + b}) => baz
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({[foo]: bar()} = baz) 1`] = `
"SyntaxError [1:18-1:21]: Invalid left-hand side in assignment
> 1 | ({[foo]: bar()} = baz)
    |                   ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({[foo]: bar()}) => baz 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({[foo]: bar()}) => baz
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({[x](){}} = z); 1`] = `
"SyntaxError [1:13-1:14]: Invalid left-hand side in assignment
> 1 | ({[x](){}} = z);
    |              ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({0} = 0) 1`] = `
"SyntaxError [1:3-1:4]: Object literal keys that are strings or numbers must be a method or have a colon
> 1 | ({0} = 0)
    |    ^ Object literal keys that are strings or numbers must be a method or have a colon"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({15: 15.foo()}=x) 1`] = `
"SyntaxError [1:6-1:9]: No identifiers allowed directly after numeric literal
> 1 | ({15: 15.foo()}=x)
    |       ^^^ No identifiers allowed directly after numeric literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({15: 15.foo}=x) 1`] = `
"SyntaxError [1:6-1:9]: No identifiers allowed directly after numeric literal
> 1 | ({15: 15.foo}=x)
    |       ^^^ No identifiers allowed directly after numeric literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a = 0}); 1`] = `
"SyntaxError [1:9-1:10]: Expected '=>'
> 1 | ({a = 0});
    |          ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a = 0}, {a = 0}, 0) => 0 1`] = `
"SyntaxError [1:22-1:24]: Unexpected token: '=>'
> 1 | ({a = 0}, {a = 0}, 0) => 0
    |                       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a = 5}) 1`] = `
"SyntaxError [1:8-1:9]: Expected '=>'
> 1 | ({a = 5})
    |         ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a, ...b, c} = {}) 1`] = `
"SyntaxError [1:16-1:17]: Invalid left-hand side in assignment
> 1 | ({a, ...b, c} = {})
    |                 ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a, b}) = {a: 1, b:2}; 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | ({a, b}) = {a: 1, b:2};
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a,,} = 0) 1`] = `
"SyntaxError [1:4-1:5]: Unexpected token: ','
> 1 | ({a,,} = 0)
    |     ^ Unexpected token: ','"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a,,a} = 0) 1`] = `
"SyntaxError [1:4-1:5]: Unexpected token: ','
> 1 | ({a,,a} = 0)
    |     ^ Unexpected token: ','"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a,b}) = {a:2,b:3} 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | ({a,b}) = {a:2,b:3}
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a.b} = 0) 1`] = `
"SyntaxError [1:3-1:4]: Unexpected character after object literal property name
> 1 | ({a.b} = 0)
    |    ^ Unexpected character after object literal property name"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: (1) = x }) 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | ({a: (1) = x })
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = "y"}}).z 1`] = `
"SyntaxError [1:16-1:17]: Expected '=>'
> 1 | ({a: {x = "y"}}).z
    |                 ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = y}.z}) 1`] = `
"SyntaxError [1:12-1:13]: Invalid destructuring assignment target
> 1 | ({a: {x = y}.z})
    |             ^ Invalid destructuring assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = y}}) 1`] = `
"SyntaxError [1:13-1:14]: Expected '=>'
> 1 | ({a: {x = y}})
    |              ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = y}}).z 1`] = `
"SyntaxError [1:14-1:15]: Expected '=>'
> 1 | ({a: {x = y}}).z
    |               ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = y}}.z = obj) 1`] = `
"SyntaxError [1:13-1:14]: Pattern can not have a tail
> 1 | ({a: {x = y}}.z = obj)
    |              ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = y}}.z) => obj 1`] = `
"SyntaxError [1:13-1:14]: Pattern can not have a tail
> 1 | ({a: {x = y}}.z) => obj
    |              ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: {x = y}}.z) 1`] = `
"SyntaxError [1:13-1:14]: Pattern can not have a tail
> 1 | ({a: {x = y}}.z)
    |              ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: 1 = x }) 1`] = `
"SyntaxError [1:7-1:8]: Invalid left-hand side in assignment
> 1 | ({a: 1 = x })
    |        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: 1} = []); 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | ({a: 1} = []);
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: b += 0} = {}) 1`] = `
"SyntaxError [1:15-1:16]: Invalid destructuring assignment target
> 1 | ({a: b += 0} = {})
    |                ^ Invalid destructuring assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a: this} = 0); 1`] = `
"SyntaxError [1:13-1:14]: Invalid left-hand side in assignment
> 1 | ({a: this} = 0);
    |              ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a:(a,y) = 0} = 1) 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | ({a:(a,y) = 0} = 1)
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a:(b = 0)} = 1) 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in assignment
> 1 | ({a:(b = 0)} = 1)
    |                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a:b[0]})=>0 1`] = `
"SyntaxError [1:10-1:12]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({a:b[0]})=>0
    |           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a:for} = 0) 1`] = `
"SyntaxError [1:4-1:7]: Unexpected token: 'for'
> 1 | ({a:for} = 0)
    |     ^^^ Unexpected token: 'for'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a:function} = 0) 1`] = `
"SyntaxError [1:12-1:13]: Expected '('
> 1 | ({a:function} = 0)
    |             ^ Expected '('"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a:this}=0) 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | ({a:this}=0)
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a} += 0); 1`] = `
"SyntaxError [1:5-1:7]: Invalid left-hand side in assignment
> 1 | ({a} += 0);
    |      ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a}) = 0 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ({a}) = 0
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a}) = 1 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ({a}) = 1
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({a}) = 2; 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ({a}) = 2;
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({async **=f(){}}) 1`] = `
"SyntaxError [1:8-1:11]: Unexpected character after object literal property name
> 1 | ({async **=f(){}})
    |         ^^^ Unexpected character after object literal property name"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({async *=f(){}}) 1`] = `
"SyntaxError [1:8-1:10]: Unexpected character after object literal property name
> 1 | ({async *=f(){}})
    |         ^^ Unexpected character after object literal property name"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({b, c, d, ...{a} } = {}) 1`] = `
"SyntaxError [1:22-1:23]: Invalid left-hand side in assignment
> 1 | ({b, c, d, ...{a} } = {})
    |                       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({b}) = b; 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ({b}) = b;
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({foo: {} += x}) 1`] = `
"SyntaxError [1:10-1:12]: Invalid left-hand side in assignment
> 1 | ({foo: {} += x})
    |           ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({foo: {}.bar() + x} = x) 1`] = `
"SyntaxError [1:23-1:24]: Invalid left-hand side in assignment
> 1 | ({foo: {}.bar() + x} = x)
    |                        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({foo: {}.bar()} = x) 1`] = `
"SyntaxError [1:19-1:20]: Invalid left-hand side in assignment
> 1 | ({foo: {}.bar()} = x)
    |                    ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({foo: {x:y} += x}) 1`] = `
"SyntaxError [1:13-1:15]: Invalid left-hand side in assignment
> 1 | ({foo: {x:y} += x})
    |              ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({function} = 0) 1`] = `
"SyntaxError [1:10-1:11]: Invalid keyword
> 1 | ({function} = 0)
    |           ^ Invalid keyword"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({get a(){}})=0 1`] = `
"SyntaxError [1:13-1:14]: Invalid left-hand side in assignment
> 1 | ({get a(){}})=0
    |              ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({get p(...[]) {}}) 1`] = `
"SyntaxError [1:8-1:11]: Getter functions must have exactly no arguments
> 1 | ({get p(...[]) {}})
    |         ^^^ Getter functions must have exactly no arguments"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: [foo, bar] += x}) 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in assignment
> 1 | ({ident: [foo, bar] += x})
    |                     ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: [foo, bar] += x}) 2`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in assignment
> 1 | ({ident: [foo, bar] += x})
    |                     ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: [foo, bar].join("")}) => x 1`] = `
"SyntaxError [1:31-1:33]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({ident: [foo, bar].join("")}) => x
    |                                ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: [foo, bar]/x/g}) => x 1`] = `
"SyntaxError [1:26-1:28]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({ident: [foo, bar]/x/g}) => x
    |                           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: [foo, bar]/x}) => x 1`] = `
"SyntaxError [1:24-1:26]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({ident: [foo, bar]/x}) => x
    |                         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: {x}.join("")}) => x 1`] = `
"SyntaxError [1:24-1:26]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({ident: {x}.join("")}) => x
    |                         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: {x}/x/g}) => x 1`] = `
"SyntaxError [1:19-1:21]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({ident: {x}/x/g}) => x
    |                    ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({ident: {x}/x}) => x 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({ident: {x}/x}) => x
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({set p(...[]) {}}) 1`] = `
"SyntaxError [1:8-1:11]: Setter function argument must not be a rest parameter
> 1 | ({set p(...[]) {}})
    |         ^^^ Setter function argument must not be a rest parameter"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({var} = 0) 1`] = `
"SyntaxError [1:5-1:6]: Invalid keyword
> 1 | ({var} = 0)
    |      ^ Invalid keyword"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x = y}) 1`] = `
"SyntaxError [1:8-1:9]: Expected '=>'
> 1 | ({x = y})
    |         ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x = y}).z 1`] = `
"SyntaxError [1:9-1:10]: Expected '=>'
> 1 | ({x = y}).z
    |          ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x = y}.z = obj) 1`] = `
"SyntaxError [1:8-1:9]: Pattern can not have a tail
> 1 | ({x = y}.z = obj)
    |         ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x = y}.z) => obj 1`] = `
"SyntaxError [1:8-1:9]: Pattern can not have a tail
> 1 | ({x = y}.z) => obj
    |         ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x = y}.z) 1`] = `
"SyntaxError [1:8-1:9]: Pattern can not have a tail
> 1 | ({x = y}.z)
    |         ^ Pattern can not have a tail"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x, y}) = {} 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | ({x, y}) = {}
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x, y}) = z; 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | ({x, y}) = z;
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x: 15.foo()} = x) 1`] = `
"SyntaxError [1:5-1:8]: No identifiers allowed directly after numeric literal
> 1 | ({x: 15.foo()} = x)
    |      ^^^ No identifiers allowed directly after numeric literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x: 15.foo} = x) 1`] = `
"SyntaxError [1:5-1:8]: No identifiers allowed directly after numeric literal
> 1 | ({x: 15.foo} = x)
    |      ^^^ No identifiers allowed directly after numeric literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x:{1:y()=x},x:{7:3}})>x 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | ({x:{1:y()=x},x:{7:3}})>x
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x:y} += x) 1`] = `
"SyntaxError [1:7-1:9]: Invalid left-hand side in assignment
> 1 | ({x:y} += x)
    |        ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x}) = {x: 1}; 1`] = `
"SyntaxError [1:6-1:7]: Invalid left-hand side in assignment
> 1 | ({x}) = {x: 1};
    |       ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ({x})=y 1`] = `
"SyntaxError [1:5-1:6]: Invalid left-hand side in assignment
> 1 | ({x})=y
    |      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (-a, b) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (-a, b) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (0, {a = 0}) = 0 1`] = `
"SyntaxError [1:11-1:12]: Invalid shorthand property initializer
> 1 | (0, {a = 0}) = 0
    |            ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (1) = (y) = x 1`] = `
"SyntaxError [1:4-1:5]: Invalid left-hand side in assignment
> 1 | (1) = (y) = x
    |     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (1) = x 1`] = `
"SyntaxError [1:4-1:5]: Invalid left-hand side in assignment
> 1 | (1) = x
    |     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (1) = x 2`] = `
"SyntaxError [1:4-1:5]: Invalid left-hand side in assignment
> 1 | (1) = x
    |     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (1) = y = x 1`] = `
"SyntaxError [1:4-1:5]: Invalid left-hand side in assignment
> 1 | (1) = y = x
    |     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (32) => {} 1`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (32) => {}
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a 
/b/); 1`] = `
"SyntaxError [2:3-2:4]: Unexpected token: ')'
  1 | (a 
> 2 | /b/);
    |    ^ Unexpected token: ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a + b) => {} 1`] = `
"SyntaxError [1:8-1:10]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a + b) => {}
    |         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a + b, c) => {} 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a + b, c) => {}
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a = b) = c; 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | (a = b) = c;
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a = b)++; 1`] = `
"SyntaxError [1:7-1:9]: Invalid increment/decrement operand
> 1 | (a = b)++;
    |        ^^ Invalid increment/decrement operand"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a++) => {} 1`] = `
"SyntaxError [1:6-1:8]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a++) => {}
    |       ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a++, b) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a++, b) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, (b)) => 42 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (a, (b)) => 42
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, ...b - 10) => b 1`] = `
"SyntaxError [1:13-1:14]: Invalid rest argument
> 1 | (a, ...b - 10) => b
    |              ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, -b) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (a, -b) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, 32) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (a, 32) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, b) = c 1`] = `
"SyntaxError [1:7-1:8]: Invalid left-hand side in assignment
> 1 | (a, b) = c
    |        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, b++) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, b++) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, foo ? bar : baz) => {} 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, foo ? bar : baz) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a, if) => {} 1`] = `
"SyntaxError [1:4-1:6]: Unexpected token: 'if'
> 1 | (a, if) => {}
    |     ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a,b)+=2 1`] = `
"SyntaxError [1:5-1:7]: Invalid left-hand side in assignment
> 1 | (a,b)+=2
    |      ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a,b)=(c,d); 1`] = `
"SyntaxError [1:5-1:6]: Invalid left-hand side in assignment
> 1 | (a,b)=(c,d);
    |      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a,b)=2 1`] = `
"SyntaxError [1:5-1:6]: Invalid left-hand side in assignment
> 1 | (a,b)=2
    |      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a.b, c) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a.b, c) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a=/i/) = /i/ 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | (a=/i/) = /i/
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a=1)+=2 1`] = `
"SyntaxError [1:5-1:7]: Invalid left-hand side in assignment
> 1 | (a=1)+=2
    |      ^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (a=1)=2 1`] = `
"SyntaxError [1:5-1:6]: Invalid left-hand side in assignment
> 1 | (a=1)=2
    |      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (async (x, z) => y) = {} 1`] = `
"SyntaxError [1:20-1:21]: Invalid left-hand side in assignment
> 1 | (async (x, z) => y) = {}
    |                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (async x => y) = {} 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in assignment
> 1 | (async x => y) = {}
    |                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (await) = 1 1`] = `
"SyntaxError [1:1-1:6]: Can not use \`await\` as identifier in module or async func
> 1 | (await) = 1
    |  ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (c, a.b) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (c, a.b) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (c, a['b']) => {} 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (c, a['b']) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (c, a['b']) => {} 2`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (c, a['b']) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (foo ? bar : baz) => {} 1`] = `
"SyntaxError [1:18-1:20]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (foo ? bar : baz) => {}
    |                   ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (foo ? bar : baz, a) => {} 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (foo ? bar : baz, a) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (if) => {} 1`] = `
"SyntaxError [1:1-1:3]: Unexpected token: 'if'
> 1 | (if) => {}
    |  ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x = (await) = f) => {} 1`] = `
"SyntaxError [1:6-1:11]: Can not use \`await\` as identifier in module or async func
> 1 | (x = (await) = f) => {}
    |       ^^^^^ Can not use \`await\` as identifier in module or async func"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x = (yield) = f) => {} 1`] = `
"SyntaxError [1:6-1:11]: 'yield' may not be used as an identifier in this context
> 1 | (x = (yield) = f) => {}
    |       ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x = delete ((yield) = f)) => {} 1`] = `
"SyntaxError [1:14-1:19]: 'yield' may not be used as an identifier in this context
> 1 | (x = delete ((yield) = f)) => {}
    |               ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x = x) = x; 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | (x = x) = x;
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x = y) = z;  1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | (x = y) = z; 
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x => y) = {} 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | (x => y) = {}
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x) = (1) = z 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | (x) = (1) = z
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, (y)) => 0 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (x, (y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, (y, z)) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | (x, (y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, ...); 1`] = `
"SyntaxError [1:7-1:8]: The rest operator is missing an argument
> 1 | (x, ...);
    |        ^ The rest operator is missing an argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, ...y, z) => x 1`] = `
"SyntaxError [1:8-1:9]: Invalid rest argument
> 1 | (x, ...y, z) => x
    |         ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, ...y, z) => x 2`] = `
"SyntaxError [1:8-1:9]: Invalid rest argument
> 1 | (x, ...y, z) => x
    |         ^ Invalid rest argument"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, /x/g) => x 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | (x, /x/g) => x
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x, /x/g) => x 2`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | (x, /x/g) => x
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x={"y": await z}) => t 1`] = `
"SyntaxError [1:15-1:16]: Expected '}'
> 1 | (x={"y": await z}) => t
    |                ^ Expected '}'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x={200: await z}) => t 1`] = `
"SyntaxError [1:15-1:16]: Expected '}'
> 1 | (x={200: await z}) => t
    |                ^ Expected '}'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x={a:await f})=>x 1`] = `
"SyntaxError [1:12-1:13]: Expected '}'
> 1 | (x={a:await f})=>x
    |             ^ Expected '}'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x--) => x; 1`] = `
"SyntaxError [1:6-1:8]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (x--) => x;
    |       ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (x--, y) => x; 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (x--, y) => x;
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (y) = (1) = x 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | (y) = (1) = x
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > (yield) = 1; 1`] = `
"SyntaxError [1:1-1:6]: 'yield' may not be used as an identifier in this context
> 1 | (yield) = 1;
    |  ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ) => {} 1`] = `
"SyntaxError [1:0-1:1]: Unexpected token: ')'
> 1 | ) => {}
    | ^ Unexpected token: ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > , => {} 1`] = `
"SyntaxError [1:0-1:1]: Unexpected token: ','
> 1 | , => {}
    | ^ Unexpected token: ','"
`;

exports[`Expressions - Group > Expressions - Group (fail) > ...x => x 1`] = `
"SyntaxError [1:0-1:3]: Unexpected token: '...'
> 1 | ...x => x
    | ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > => {} 1`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | => {}
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > => 0 1`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | => 0
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > => 1`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | =>
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [({x: 1}) = y] = []; 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | [({x: 1}) = y] = [];
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [(a = 0)] = 1 1`] = `
"SyntaxError [1:12-1:13]: Invalid left-hand side in assignment
> 1 | [(a = 0)] = 1
    |             ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [[1]] = []; 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | [[1]] = [];
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [] => {} 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | [] => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{"x" = y}].z = obj 1`] = `
"SyntaxError [1:6-1:7]: Object literal keys that are strings or numbers must be a method or have a colon
> 1 | [{"x" = y}].z = obj
    |       ^ Object literal keys that are strings or numbers must be a method or have a colon"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = "y"}].z = obj 1`] = `
"SyntaxError [1:11-1:12]: Invalid shorthand property initializer
> 1 | [{x = "y"}].z = obj
    |            ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}.z] = obj 1`] = `
"SyntaxError [1:8-1:9]: Invalid destructuring assignment target
> 1 | [{x = y}.z] = obj
    |         ^ Invalid destructuring assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}] 1`] = `
"SyntaxError [1:8-1:9]: Invalid shorthand property initializer
> 1 | [{x = y}]
    |         ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}] in z 1`] = `
"SyntaxError [1:10-1:12]: Invalid shorthand property initializer
> 1 | [{x = y}] in z
    |           ^^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}].z = "obj" 1`] = `
"SyntaxError [1:9-1:10]: Invalid shorthand property initializer
> 1 | [{x = y}].z = "obj"
    |          ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}].z = obj 1`] = `
"SyntaxError [1:9-1:10]: Invalid shorthand property initializer
> 1 | [{x = y}].z = obj
    |          ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}].z => obj 1`] = `
"SyntaxError [1:9-1:10]: Invalid shorthand property initializer
> 1 | [{x = y}].z => obj
    |          ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [{x = y}].z 1`] = `
"SyntaxError [1:9-1:10]: Invalid shorthand property initializer
> 1 | [{x = y}].z
    |          ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > [a += b] = [] 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in assignment
> 1 | [a += b] = []
    |            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > \`a\` = b; 1`] = `
"SyntaxError [1:4-1:5]: Invalid left-hand side in assignment
> 1 | \`a\` = b;
    |     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > \`a\`++; 1`] = `
"SyntaxError [1:3-1:5]: Invalid increment/decrement operand
> 1 | \`a\`++;
    |    ^^ Invalid increment/decrement operand"
`;

exports[`Expressions - Group > Expressions - Group (fail) > {} => {} 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | {} => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > {a, b} = {a: 1, b: 2} 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: '='
> 1 | {a, b} = {a: 1, b: 2}
    |        ^ Unexpected token: '='"
`;

exports[`Expressions - Group > Expressions - Group (fail) > {x, y} = z; 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: '='
> 1 | {x, y} = z;
    |        ^ Unexpected token: '='"
`;

exports[`Expressions - Group > Expressions - Group (fail) > -(5) ** 6; 1`] = `
"SyntaxError [1:5-1:7]: Unary expressions as the left operand of an exponentiation expression must be disambiguated with parentheses
> 1 | -(5) ** 6;
    |      ^^ Unary expressions as the left operand of an exponentiation expression must be disambiguated with parentheses"
`;

exports[`Expressions - Group > Expressions - Group (fail) > 0, {a = 0}) => 0 1`] = `
"SyntaxError [1:10-1:11]: Invalid shorthand property initializer
> 1 | 0, {a = 0}) => 0
    |           ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Group > Expressions - Group (fail) > 32 => {} 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | 32 => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a (...[a]) = a 1`] = `
"SyntaxError [1:11-1:12]: Invalid left-hand side in assignment
> 1 | a (...[a]) = a
    |            ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a + b => {} 1`] = `
"SyntaxError [1:6-1:8]: \`=>\` is an invalid assignment target
> 1 | a + b => {}
    |       ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a = (...[a]) = 1`] = `
"SyntaxError [1:13-1:14]: Expected '=>'
> 1 | a = (...[a]) =
    |              ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a = (...[a]) = 2`] = `
"SyntaxError [1:13-1:14]: Expected '=>'
> 1 | a = (...[a]) =
    |              ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a = (...[a]) = a 1`] = `
"SyntaxError [1:13-1:14]: Expected '=>'
> 1 | a = (...[a]) = a
    |              ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a = (...[a]) 1`] = `
"SyntaxError [1:11-1:12]: Expected '=>'
> 1 | a = (...[a])
    |            ^ Expected '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > a++ => {} 1`] = `
"SyntaxError [1:4-1:6]: Unexpected token: '=>'
> 1 | a++ => {}
    |     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async ({} + 1) => x; 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | async ({} + 1) => x;
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async (a, ...b=fail) => a; 1`] = `
"SyntaxError [1:21-1:23]: Invalid left-hand side in async arrow
> 1 | async (a, ...b=fail) => a;
    |                      ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async (foo = yield x) => foo 1`] = `
"SyntaxError [1:19-1:20]: Expected ')'
> 1 | async (foo = yield x) => foo
    |                    ^ Expected ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async (foo = yield x) 1`] = `
"SyntaxError [1:19-1:20]: Expected ')'
> 1 | async (foo = yield x)
    |                    ^ Expected ')'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async (x = (await) = f) => {} 1`] = `
"SyntaxError [1:24-1:26]: Await expression not allowed in formal parameter
> 1 | async (x = (await) = f) => {}
    |                         ^^ Await expression not allowed in formal parameter"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async("foo".bar) => x 1`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async("foo".bar) => x
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async("foo".bar) => x 2`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async("foo".bar) => x
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Group > Expressions - Group (fail) > async([].x) => x; 1`] = `
"SyntaxError [1:12-1:14]: Invalid left-hand side in async arrow
> 1 | async([].x) => x;
    |             ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Group > Expressions - Group (fail) > for (([x])=y in z); 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | for (([x])=y in z);
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > for ([{x = y}] ;;); 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in for-loop
> 1 | for ([{x = y}] ;;);
    |                ^ Invalid left-hand side in for-loop"
`;

exports[`Expressions - Group > Expressions - Group (fail) > for (\`a\` of b); 1`] = `
"SyntaxError [1:9-1:11]: Invalid left-hand side in for-of
> 1 | for (\`a\` of b);
    |          ^^ Invalid left-hand side in for-of"
`;

exports[`Expressions - Group > Expressions - Group (fail) > for (new.target in b); 1`] = `
"SyntaxError [1:9-1:15]: new.target only allowed within functions or static blocks
> 1 | for (new.target in b);
    |          ^^^^^^ new.target only allowed within functions or static blocks"
`;

exports[`Expressions - Group > Expressions - Group (fail) > function *f(){ (yield) = 1; } 1`] = `
"SyntaxError [1:23-1:24]: Invalid left-hand side in assignment
> 1 | function *f(){ (yield) = 1; }
    |                        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > function *f(){ yield = 1; } 1`] = `
"SyntaxError [1:21-1:22]: Invalid left-hand side in assignment
> 1 | function *f(){ yield = 1; }
    |                      ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > function *f(x = (yield) = f) {} 1`] = `
"SyntaxError [1:22-1:23]: Yield expression not allowed in formal parameter
> 1 | function *f(x = (yield) = f) {}
    |                       ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Group > Expressions - Group (fail) > function *f(x = delete ((yield) = f)) {} 1`] = `
"SyntaxError [1:30-1:31]: Yield expression not allowed in formal parameter
> 1 | function *f(x = delete ((yield) = f)) {}
    |                               ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Group > Expressions - Group (fail) > if => {} 1`] = `
"SyntaxError [1:3-1:5]: Expected '('
> 1 | if => {}
    |    ^^ Expected '('"
`;

exports[`Expressions - Group > Expressions - Group (fail) > let [({x: 1}) = y] = []; 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | let [({x: 1}) = y] = [];
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > let [({x: 1})] = []; 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let [({x: 1})] = [];
    |                ^ The binding declaration is not destructible"
`;

exports[`Expressions - Group > Expressions - Group (fail) > return => {} 1`] = `
"SyntaxError [1:0-1:6]: Illegal return statement
> 1 | return => {}
    | ^^^^^^ Illegal return statement"
`;

exports[`Expressions - Group > Expressions - Group (fail) > var [({x: 1}) = y] = []; 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | var [({x: 1}) = y] = [];
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > var [({x: 1})] = []; 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | var [({x: 1})] = [];
    |                ^ The binding declaration is not destructible"
`;

exports[`Expressions - Group > Expressions - Group (fail) > var {(a)} = 0 1`] = `
"SyntaxError [1:5-1:6]: Unexpected token: '('
> 1 | var {(a)} = 0
    |      ^ Unexpected token: '('"
`;

exports[`Expressions - Group > Expressions - Group (fail) > var {a:(b)} = 0 1`] = `
"SyntaxError [1:12-1:13]: The binding declaration is not destructible
> 1 | var {a:(b)} = 0
    |             ^ The binding declaration is not destructible"
`;

exports[`Expressions - Group > Expressions - Group (fail) > x = ({}) = b 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | x = ({}) = b
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > x = {x: 15.foo()} = x 1`] = `
"SyntaxError [1:8-1:11]: No identifiers allowed directly after numeric literal
> 1 | x = {x: 15.foo()} = x
    |         ^^^ No identifiers allowed directly after numeric literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > x = {x: 15.foo} = x 1`] = `
"SyntaxError [1:8-1:11]: No identifiers allowed directly after numeric literal
> 1 | x = {x: 15.foo} = x
    |         ^^^ No identifiers allowed directly after numeric literal"
`;

exports[`Expressions - Group > Expressions - Group (fail) > x, [foo + y, bar] = doo; 1`] = `
"SyntaxError [1:20-1:23]: Invalid left-hand side in assignment
> 1 | x, [foo + y, bar] = doo;
    |                     ^^^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > x, {a: {a: 1} = []}; 1`] = `
"SyntaxError [1:16-1:17]: Invalid left-hand side in assignment
> 1 | x, {a: {a: 1} = []};
    |                 ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > y = (1) = x 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | y = (1) = x
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Group > Expressions - Group (fail) > y, ...x => x 1`] = `
"SyntaxError [1:3-1:6]: Unexpected token: '...'
> 1 | y, ...x => x
    |    ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Group > Expressions - Group (pass) >  async(...[destruct]) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "elements": [
                {
                  "name": "destruct",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > "use strict"; ({ x: a, x: b } = q); 1`] = `
{
  "body": [
    {
      "directive": "use strict",
      "expression": {
        "type": "Literal",
        "value": "use strict",
      },
      "type": "ExpressionStatement",
    },
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "a",
                "type": "Identifier",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "b",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "q",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > "use strict"; (await = "foo") 1`] = `
{
  "body": [
    {
      "directive": "use strict",
      "expression": {
        "type": "Literal",
        "value": "use strict",
      },
      "type": "ExpressionStatement",
    },
    {
      "expression": {
        "left": {
          "name": "await",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": "foo",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > "use strict"; (await) = 1 1`] = `
{
  "body": [
    {
      "directive": "use strict",
      "expression": {
        "type": "Literal",
        "value": "use strict",
      },
      "type": "ExpressionStatement",
    },
    {
      "expression": {
        "left": {
          "name": "await",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ( () => x ) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ("a") 1`] = `
{
  "body": [
    {
      "expression": {
        "type": "Literal",
        "value": "a",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ("a","b","c","d","e","f") 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "type": "Literal",
            "value": "a",
          },
          {
            "type": "Literal",
            "value": "b",
          },
          {
            "type": "Literal",
            "value": "c",
          },
          {
            "type": "Literal",
            "value": "d",
          },
          {
            "type": "Literal",
            "value": "e",
          },
          {
            "type": "Literal",
            "value": "f",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((((((((((((((((((((((((((((((((((((((((((((((((((0)))))))))))))))))))))))))))))))))))))))))))))))))) 1`] = `
{
  "body": [
    {
      "expression": {
        "type": "Literal",
        "value": 0,
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((((((((((((((((((((((((((((((((((((((((a)))))))))))))))))))))))))))))))))))))))) 1`] = `
{
  "body": [
    {
      "expression": {
        "name": "a",
        "type": "Identifier",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((((((((((x)))))))))); 1`] = `
{
  "body": [
    {
      "end": 22,
      "expression": {
        "end": 11,
        "name": "x",
        "range": [
          10,
          11,
        ],
        "start": 10,
        "type": "Identifier",
      },
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((a)) = 0 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 0,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((a))((a)) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "callee": {
          "name": "a",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((a))() 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [],
        "callee": {
          "name": "a",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((a,a),(a,a)) 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "expressions": [
              {
                "name": "a",
                "type": "Identifier",
              },
              {
                "name": "a",
                "type": "Identifier",
              },
            ],
            "type": "SequenceExpression",
          },
          {
            "expressions": [
              {
                "name": "a",
                "type": "Identifier",
              },
              {
                "name": "a",
                "type": "Identifier",
              },
            ],
            "type": "SequenceExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ((x)); 1`] = `
{
  "body": [
    {
      "end": 6,
      "expression": {
        "end": 3,
        "name": "x",
        "range": [
          2,
          3,
        ],
        "start": 2,
        "type": "Identifier",
      },
      "range": [
        0,
        6,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "range": [
    0,
    6,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (++/[^\\x0f+-\\x6d+$-)-]/giuy[(0[true] = {})]) 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "computed": true,
          "object": {
            "regex": {
              "flags": "giuy",
              "pattern": "[^\\x0f+-\\x6d+$-)-]",
            },
            "type": "Literal",
            "value": /\\[\\^\\\\x0f\\+-\\\\x6d\\+\\$-\\)-\\]/giuy,
          },
          "optional": false,
          "property": {
            "left": {
              "computed": true,
              "object": {
                "type": "Literal",
                "value": 0,
              },
              "optional": false,
              "property": {
                "type": "Literal",
                "value": true,
              },
              "type": "MemberExpression",
            },
            "operator": "=",
            "right": {
              "properties": [],
              "type": "ObjectExpression",
            },
            "type": "AssignmentExpression",
          },
          "type": "MemberExpression",
        },
        "operator": "++",
        "prefix": true,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (++x); 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "++",
        "prefix": true,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (++x, y); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "++",
            "prefix": true,
            "type": "UpdateExpression",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (...[destruct]) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "elements": [
                {
                  "name": "destruct",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (...{destruct}) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "destruct",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "destruct",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (...x) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ (foo.bar) ] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "computed": false,
              "object": {
                "name": "foo",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "name": "bar",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ ...(a) ] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "argument": {
                "name": "a",
                "type": "Identifier",
              },
              "type": "RestElement",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ [ foo().x = 10 ] = {} ] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "elements": [
                  {
                    "left": {
                      "computed": false,
                      "object": {
                        "arguments": [],
                        "callee": {
                          "name": "foo",
                          "type": "Identifier",
                        },
                        "optional": false,
                        "type": "CallExpression",
                      },
                      "optional": false,
                      "property": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "type": "MemberExpression",
                    },
                    "right": {
                      "type": "Literal",
                      "value": 10,
                    },
                    "type": "AssignmentPattern",
                  },
                ],
                "type": "ArrayPattern",
              },
              "right": {
                "properties": [],
                "type": "ObjectExpression",
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ [ foo().x = 10 ] = {} ] = z = {}); 2`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "elements": [
                  {
                    "left": {
                      "computed": false,
                      "object": {
                        "arguments": [],
                        "callee": {
                          "name": "foo",
                          "type": "Identifier",
                        },
                        "optional": false,
                        "type": "CallExpression",
                      },
                      "optional": false,
                      "property": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "type": "MemberExpression",
                    },
                    "right": {
                      "type": "Literal",
                      "value": 10,
                    },
                    "type": "AssignmentPattern",
                  },
                ],
                "type": "ArrayPattern",
              },
              "right": {
                "properties": [],
                "type": "ObjectExpression",
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ foo()[x] = 10 ] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "computed": true,
                "object": {
                  "arguments": [],
                  "callee": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "optional": false,
                "property": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "right": {
                "type": "Literal",
                "value": 10,
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ foo()[x] = 10 ] = z = {}); 2`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "computed": true,
                "object": {
                  "arguments": [],
                  "callee": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "optional": false,
                "property": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "right": {
                "type": "Literal",
                "value": 10,
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ x.y = 10 ] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "computed": false,
                "object": {
                  "name": "x",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "right": {
                "type": "Literal",
                "value": 10,
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([ x[y] = 10 ] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "computed": true,
                "object": {
                  "name": "x",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "right": {
                "type": "Literal",
                "value": 10,
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([(({ x } = { x: 1 }) => x).a] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "computed": false,
              "object": {
                "async": false,
                "body": {
                  "name": "x",
                  "type": "Identifier",
                },
                "expression": true,
                "generator": false,
                "params": [
                  {
                    "left": {
                      "properties": [
                        {
                          "computed": false,
                          "key": {
                            "name": "x",
                            "type": "Identifier",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true,
                          "type": "Property",
                          "value": {
                            "name": "x",
                            "type": "Identifier",
                          },
                        },
                      ],
                      "type": "ObjectPattern",
                    },
                    "right": {
                      "properties": [
                        {
                          "computed": false,
                          "key": {
                            "name": "x",
                            "type": "Identifier",
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false,
                          "type": "Property",
                          "value": {
                            "type": "Literal",
                            "value": 1,
                          },
                        },
                      ],
                      "type": "ObjectExpression",
                    },
                    "type": "AssignmentPattern",
                  },
                ],
                "type": "ArrowFunctionExpression",
              },
              "optional": false,
              "property": {
                "name": "a",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([(x),,(y)] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
            null,
            {
              "name": "y",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([(x)] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x+=y]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+=",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x+y]);  1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x+y]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x, ...y]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
          {
            "argument": {
              "name": "y",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x, y]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x.y] = z) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "argument": {
                "computed": false,
                "object": {
                  "name": "x",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "type": "RestElement",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x=y]);  1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x=y]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x]) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([...x]); 2`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([[x, y] = z]); 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "elements": [
          {
            "end": 12,
            "left": {
              "elements": [
                {
                  "end": 4,
                  "name": "x",
                  "range": [
                    3,
                    4,
                  ],
                  "start": 3,
                  "type": "Identifier",
                },
                {
                  "end": 7,
                  "name": "y",
                  "range": [
                    6,
                    7,
                  ],
                  "start": 6,
                  "type": "Identifier",
                },
              ],
              "end": 8,
              "range": [
                2,
                8,
              ],
              "start": 2,
              "type": "ArrayPattern",
            },
            "operator": "=",
            "range": [
              2,
              12,
            ],
            "right": {
              "end": 12,
              "name": "z",
              "range": [
                11,
                12,
              ],
              "start": 11,
              "type": "Identifier",
            },
            "start": 2,
            "type": "AssignmentExpression",
          },
        ],
        "end": 13,
        "range": [
          1,
          13,
        ],
        "start": 1,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([].length) = y 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 15,
        "left": {
          "computed": false,
          "end": 10,
          "object": {
            "elements": [],
            "end": 3,
            "range": [
              1,
              3,
            ],
            "start": 1,
            "type": "ArrayExpression",
          },
          "optional": false,
          "property": {
            "end": 10,
            "name": "length",
            "range": [
              4,
              10,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "range": [
            1,
            10,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          15,
        ],
        "right": {
          "end": 15,
          "name": "y",
          "range": [
            14,
            15,
          ],
          "start": 14,
          "type": "Identifier",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([].x); 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": false,
        "object": {
          "elements": [],
          "type": "ArrayExpression",
        },
        "optional": false,
        "property": {
          "name": "x",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([{}]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "properties": [],
            "type": "ObjectExpression",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([a / b]); 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "elements": [
          {
            "end": 7,
            "left": {
              "end": 3,
              "name": "a",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "operator": "/",
            "range": [
              2,
              7,
            ],
            "right": {
              "end": 7,
              "name": "b",
              "range": [
                6,
                7,
              ],
              "start": 6,
              "type": "Identifier",
            },
            "start": 2,
            "type": "BinaryExpression",
          },
        ],
        "end": 8,
        "range": [
          1,
          8,
        ],
        "start": 1,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([a = b].foo = x) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": false,
          "object": {
            "elements": [
              {
                "left": {
                  "name": "a",
                  "type": "Identifier",
                },
                "operator": "=",
                "right": {
                  "name": "b",
                  "type": "Identifier",
                },
                "type": "AssignmentExpression",
              },
            ],
            "type": "ArrayExpression",
          },
          "optional": false,
          "property": {
            "name": "foo",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "=",
        "right": {
          "name": "x",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([a.b] = x); 1`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 10,
        "left": {
          "elements": [
            {
              "computed": false,
              "end": 5,
              "object": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "end": 5,
                "name": "b",
                "range": [
                  4,
                  5,
                ],
                "start": 4,
                "type": "Identifier",
              },
              "range": [
                2,
                5,
              ],
              "start": 2,
              "type": "MemberExpression",
            },
          ],
          "end": 6,
          "range": [
            1,
            6,
          ],
          "start": 1,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          1,
          10,
        ],
        "right": {
          "end": 10,
          "name": "x",
          "range": [
            9,
            10,
          ],
          "start": 9,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([a=[b.c]=d]) => e; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "e",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "left": {
                  "name": "a",
                  "type": "Identifier",
                },
                "right": {
                  "left": {
                    "elements": [
                      {
                        "computed": false,
                        "object": {
                          "name": "b",
                          "type": "Identifier",
                        },
                        "optional": false,
                        "property": {
                          "name": "c",
                          "type": "Identifier",
                        },
                        "type": "MemberExpression",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                  "operator": "=",
                  "right": {
                    "name": "d",
                    "type": "Identifier",
                  },
                  "type": "AssignmentExpression",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([a] = b) => c; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "c",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "elements": [
                {
                  "name": "a",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "right": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([a]) => b; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "b",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "name": "a",
                "type": "Identifier",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([b] = b); 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "end": 8,
        "left": {
          "elements": [
            {
              "end": 3,
              "name": "b",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
          ],
          "end": 4,
          "range": [
            1,
            4,
          ],
          "start": 1,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          1,
          8,
        ],
        "right": {
          "end": 8,
          "name": "b",
          "range": [
            7,
            8,
          ],
          "start": 7,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([delete foo.bar]); 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "argument": {
              "computed": false,
              "object": {
                "name": "foo",
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "name": "bar",
                "type": "Identifier",
              },
              "type": "MemberExpression",
            },
            "operator": "delete",
            "prefix": true,
            "type": "UnaryExpression",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([delete foo.bar]); 2`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "elements": [
          {
            "argument": {
              "computed": false,
              "end": 16,
              "object": {
                "end": 12,
                "name": "foo",
                "range": [
                  9,
                  12,
                ],
                "start": 9,
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "end": 16,
                "name": "bar",
                "range": [
                  13,
                  16,
                ],
                "start": 13,
                "type": "Identifier",
              },
              "range": [
                9,
                16,
              ],
              "start": 9,
              "type": "MemberExpression",
            },
            "end": 16,
            "operator": "delete",
            "prefix": true,
            "range": [
              2,
              16,
            ],
            "start": 2,
            "type": "UnaryExpression",
          },
        ],
        "end": 17,
        "range": [
          1,
          17,
        ],
        "start": 1,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([target()[targetKey()]] = x); 1`] = `
{
  "body": [
    {
      "end": 30,
      "expression": {
        "end": 28,
        "left": {
          "elements": [
            {
              "computed": true,
              "end": 23,
              "object": {
                "arguments": [],
                "callee": {
                  "end": 8,
                  "name": "target",
                  "range": [
                    2,
                    8,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "end": 10,
                "optional": false,
                "range": [
                  2,
                  10,
                ],
                "start": 2,
                "type": "CallExpression",
              },
              "optional": false,
              "property": {
                "arguments": [],
                "callee": {
                  "end": 20,
                  "name": "targetKey",
                  "range": [
                    11,
                    20,
                  ],
                  "start": 11,
                  "type": "Identifier",
                },
                "end": 22,
                "optional": false,
                "range": [
                  11,
                  22,
                ],
                "start": 11,
                "type": "CallExpression",
              },
              "range": [
                2,
                23,
              ],
              "start": 2,
              "type": "MemberExpression",
            },
          ],
          "end": 24,
          "range": [
            1,
            24,
          ],
          "start": 1,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          1,
          28,
        ],
        "right": {
          "end": 28,
          "name": "x",
          "range": [
            27,
            28,
          ],
          "start": 27,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        30,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 30,
  "range": [
    0,
    30,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([target()[targetKey(a=b)]] = x); 1`] = `
{
  "body": [
    {
      "end": 33,
      "expression": {
        "end": 31,
        "left": {
          "elements": [
            {
              "computed": true,
              "end": 26,
              "object": {
                "arguments": [],
                "callee": {
                  "end": 8,
                  "name": "target",
                  "range": [
                    2,
                    8,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "end": 10,
                "optional": false,
                "range": [
                  2,
                  10,
                ],
                "start": 2,
                "type": "CallExpression",
              },
              "optional": false,
              "property": {
                "arguments": [
                  {
                    "end": 24,
                    "left": {
                      "end": 22,
                      "name": "a",
                      "range": [
                        21,
                        22,
                      ],
                      "start": 21,
                      "type": "Identifier",
                    },
                    "operator": "=",
                    "range": [
                      21,
                      24,
                    ],
                    "right": {
                      "end": 24,
                      "name": "b",
                      "range": [
                        23,
                        24,
                      ],
                      "start": 23,
                      "type": "Identifier",
                    },
                    "start": 21,
                    "type": "AssignmentExpression",
                  },
                ],
                "callee": {
                  "end": 20,
                  "name": "targetKey",
                  "range": [
                    11,
                    20,
                  ],
                  "start": 11,
                  "type": "Identifier",
                },
                "end": 25,
                "optional": false,
                "range": [
                  11,
                  25,
                ],
                "start": 11,
                "type": "CallExpression",
              },
              "range": [
                2,
                26,
              ],
              "start": 2,
              "type": "MemberExpression",
            },
          ],
          "end": 27,
          "range": [
            1,
            27,
          ],
          "start": 1,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          1,
          31,
        ],
        "right": {
          "end": 31,
          "name": "x",
          "range": [
            30,
            31,
          ],
          "start": 30,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        33,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 33,
  "range": [
    0,
    33,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x, y] = z); 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "end": 11,
        "left": {
          "elements": [
            {
              "end": 3,
              "name": "x",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
            {
              "end": 6,
              "name": "y",
              "range": [
                5,
                6,
              ],
              "start": 5,
              "type": "Identifier",
            },
          ],
          "end": 7,
          "range": [
            1,
            7,
          ],
          "start": 1,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          1,
          11,
        ],
        "right": {
          "end": 11,
          "name": "z",
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x,,...z] = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
            null,
            {
              "argument": {
                "name": "z",
                "type": "Identifier",
              },
              "type": "RestElement",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x] = y,) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "elements": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "right": {
              "name": "y",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x],) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "name": "x",
                "type": "Identifier",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x].foo) = x 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": false,
          "object": {
            "elements": [
              {
                "name": "x",
                "type": "Identifier",
              },
            ],
            "type": "ArrayExpression",
          },
          "optional": false,
          "property": {
            "name": "foo",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "=",
        "right": {
          "name": "x",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x].foo) 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": false,
        "object": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
          ],
          "type": "ArrayExpression",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ([x].length) = y 1`] = `
{
  "body": [
    {
      "end": 16,
      "expression": {
        "end": 16,
        "left": {
          "computed": false,
          "end": 11,
          "object": {
            "elements": [
              {
                "end": 3,
                "name": "x",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
            ],
            "end": 4,
            "range": [
              1,
              4,
            ],
            "start": 1,
            "type": "ArrayExpression",
          },
          "optional": false,
          "property": {
            "end": 11,
            "name": "length",
            "range": [
              5,
              11,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "range": [
            1,
            11,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          16,
        ],
        "right": {
          "end": 16,
          "name": "y",
          "range": [
            15,
            16,
          ],
          "start": 15,
          "type": "Identifier",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        16,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "range": [
    0,
    16,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({
    a,
    a:a,
    a:a=a,
    [a]:{a},
    a:some_call()[a],
    a:this.a
} = 0); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "a",
                "type": "Identifier",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "a",
                "type": "Identifier",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "left": {
                  "name": "a",
                  "type": "Identifier",
                },
                "right": {
                  "name": "a",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            },
            {
              "computed": true,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "a",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": true,
                    "type": "Property",
                    "value": {
                      "name": "a",
                      "type": "Identifier",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": true,
                "object": {
                  "arguments": [],
                  "callee": {
                    "name": "some_call",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "optional": false,
                "property": {
                  "name": "a",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": false,
                "object": {
                  "type": "ThisExpression",
                },
                "optional": false,
                "property": {
                  "name": "a",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 0,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ a: (b) } = {}) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "b",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "properties": [],
          "type": "ObjectExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ a: 1 }).a === 1 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "end": 18,
        "left": {
          "computed": false,
          "end": 12,
          "object": {
            "end": 9,
            "properties": [
              {
                "computed": false,
                "end": 7,
                "key": {
                  "end": 4,
                  "name": "a",
                  "range": [
                    3,
                    4,
                  ],
                  "start": 3,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  3,
                  7,
                ],
                "shorthand": false,
                "start": 3,
                "type": "Property",
                "value": {
                  "end": 7,
                  "range": [
                    6,
                    7,
                  ],
                  "start": 6,
                  "type": "Literal",
                  "value": 1,
                },
              },
            ],
            "range": [
              1,
              9,
            ],
            "start": 1,
            "type": "ObjectExpression",
          },
          "optional": false,
          "property": {
            "end": 12,
            "name": "a",
            "range": [
              11,
              12,
            ],
            "start": 11,
            "type": "Identifier",
          },
          "range": [
            0,
            12,
          ],
          "start": 0,
          "type": "MemberExpression",
        },
        "operator": "===",
        "range": [
          0,
          18,
        ],
        "right": {
          "end": 18,
          "range": [
            17,
            18,
          ],
          "start": 17,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ q } = { x = 10 } = {}); 1`] = `
{
  "body": [
    {
      "end": 26,
      "expression": {
        "end": 24,
        "left": {
          "end": 6,
          "properties": [
            {
              "computed": false,
              "end": 4,
              "key": {
                "end": 4,
                "name": "q",
                "range": [
                  3,
                  4,
                ],
                "start": 3,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                3,
                4,
              ],
              "shorthand": true,
              "start": 3,
              "type": "Property",
              "value": {
                "end": 4,
                "name": "q",
                "range": [
                  3,
                  4,
                ],
                "start": 3,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            6,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          24,
        ],
        "right": {
          "end": 24,
          "left": {
            "end": 19,
            "properties": [
              {
                "computed": false,
                "end": 17,
                "key": {
                  "end": 12,
                  "name": "x",
                  "range": [
                    11,
                    12,
                  ],
                  "start": 11,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  11,
                  17,
                ],
                "shorthand": true,
                "start": 11,
                "type": "Property",
                "value": {
                  "end": 17,
                  "left": {
                    "end": 12,
                    "name": "x",
                    "range": [
                      11,
                      12,
                    ],
                    "start": 11,
                    "type": "Identifier",
                  },
                  "range": [
                    11,
                    17,
                  ],
                  "right": {
                    "end": 17,
                    "range": [
                      15,
                      17,
                    ],
                    "start": 15,
                    "type": "Literal",
                    "value": 10,
                  },
                  "start": 11,
                  "type": "AssignmentPattern",
                },
              },
            ],
            "range": [
              9,
              19,
            ],
            "start": 9,
            "type": "ObjectPattern",
          },
          "operator": "=",
          "range": [
            9,
            24,
          ],
          "right": {
            "end": 24,
            "properties": [],
            "range": [
              22,
              24,
            ],
            "start": 22,
            "type": "ObjectExpression",
          },
          "start": 9,
          "type": "AssignmentExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ responseText: text } = res) 1`] = `
{
  "body": [
    {
      "end": 30,
      "expression": {
        "end": 29,
        "left": {
          "end": 23,
          "properties": [
            {
              "computed": false,
              "end": 21,
              "key": {
                "end": 15,
                "name": "responseText",
                "range": [
                  3,
                  15,
                ],
                "start": 3,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                3,
                21,
              ],
              "shorthand": false,
              "start": 3,
              "type": "Property",
              "value": {
                "end": 21,
                "name": "text",
                "range": [
                  17,
                  21,
                ],
                "start": 17,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            23,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          29,
        ],
        "right": {
          "end": 29,
          "name": "res",
          "range": [
            26,
            29,
          ],
          "start": 26,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        30,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 30,
  "range": [
    0,
    30,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x : { foo: foo().y } }); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "x",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "computed": false,
                    "object": {
                      "arguments": [],
                      "callee": {
                        "name": "foo",
                        "type": "Identifier",
                      },
                      "optional": false,
                      "type": "CallExpression",
                    },
                    "optional": false,
                    "property": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "type": "MemberExpression",
                  },
                },
              ],
              "type": "ObjectExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x : foo()[y] } = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": true,
                "object": {
                  "arguments": [],
                  "callee": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "optional": false,
                "property": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x : y } = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "y",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x = 10 } = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "type": "Literal",
                  "value": 10,
                },
                "type": "AssignmentPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "properties": [],
          "type": "ObjectExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x = 123 } = a); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "type": "Literal",
                  "value": 123,
                },
                "type": "AssignmentPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x } = { x: 3 }); 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "end": 17,
        "left": {
          "end": 6,
          "properties": [
            {
              "computed": false,
              "end": 4,
              "key": {
                "end": 4,
                "name": "x",
                "range": [
                  3,
                  4,
                ],
                "start": 3,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                3,
                4,
              ],
              "shorthand": true,
              "start": 3,
              "type": "Property",
              "value": {
                "end": 4,
                "name": "x",
                "range": [
                  3,
                  4,
                ],
                "start": 3,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            6,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          17,
        ],
        "right": {
          "end": 17,
          "properties": [
            {
              "computed": false,
              "end": 15,
              "key": {
                "end": 12,
                "name": "x",
                "range": [
                  11,
                  12,
                ],
                "start": 11,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                11,
                15,
              ],
              "shorthand": false,
              "start": 11,
              "type": "Property",
              "value": {
                "end": 15,
                "range": [
                  14,
                  15,
                ],
                "start": 14,
                "type": "Literal",
                "value": 3,
              },
            },
          ],
          "range": [
            9,
            17,
          ],
          "start": 9,
          "type": "ObjectExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x } = a); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "x",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x: (y) } = a); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "y",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x: x } = a); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "x",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ x: y.z } = a) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": false,
                "object": {
                  "name": "y",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "z",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({"a b c": bar}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "type": "Literal",
              "value": "a b c",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "name": "bar",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({*"str"(){}}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "type": "Literal",
              "value": "str",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({*[expr](){}}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": true,
            "key": {
              "name": "expr",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({*15(){}}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "type": "Literal",
              "value": 15,
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({*20(){}}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "type": "Literal",
              "value": 20,
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({*ident(){}}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "ident",
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "shorthand": false,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": true,
              "id": null,
              "params": [],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({...x+=y}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+=",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({...x+y}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({...x, ...y}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
          {
            "argument": {
              "name": "y",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({...x, y}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "SpreadElement",
          },
          {
            "computed": false,
            "key": {
              "name": "y",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": true,
            "type": "Property",
            "value": {
              "name": "y",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({...x.y} = z)  1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "argument": {
                "computed": false,
                "object": {
                  "name": "x",
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "type": "RestElement",
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({...x=y}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "argument": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "SpreadElement",
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[expr]:expr}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": true,
            "key": {
              "name": "expr",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "name": "expr",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[foo()] : (z)} = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": true,
              "key": {
                "arguments": [],
                "callee": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "z",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[foo()] : foo().bar} = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": true,
              "key": {
                "arguments": [],
                "callee": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": false,
                "object": {
                  "arguments": [],
                  "callee": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "type": "CallExpression",
                },
                "optional": false,
                "property": {
                  "name": "bar",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[foo()] : z} = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": true,
              "key": {
                "arguments": [],
                "callee": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "optional": false,
                "type": "CallExpression",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "z",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[foo]: bar} = baz) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "loc": {
            "end": {
              "column": 13,
              "line": 1,
            },
            "start": {
              "column": 1,
              "line": 1,
            },
          },
          "properties": [
            {
              "computed": true,
              "key": {
                "loc": {
                  "end": {
                    "column": 6,
                    "line": 1,
                  },
                  "start": {
                    "column": 3,
                    "line": 1,
                  },
                },
                "name": "foo",
                "type": "Identifier",
              },
              "kind": "init",
              "loc": {
                "end": {
                  "column": 12,
                  "line": 1,
                },
                "start": {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "loc": {
                  "end": {
                    "column": 12,
                    "line": 1,
                  },
                  "start": {
                    "column": 9,
                    "line": 1,
                  },
                },
                "name": "bar",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "loc": {
          "end": {
            "column": 19,
            "line": 1,
          },
          "start": {
            "column": 1,
            "line": 1,
          },
        },
        "operator": "=",
        "right": {
          "loc": {
            "end": {
              "column": 19,
              "line": 1,
            },
            "start": {
              "column": 16,
              "line": 1,
            },
          },
          "name": "baz",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "loc": {
        "end": {
          "column": 20,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "type": "ExpressionStatement",
    },
  ],
  "loc": {
    "end": {
      "column": 20,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[foo]: bar}) => baz 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "baz",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": true,
                "key": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "bar",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[foo]: x} = y) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": true,
              "key": {
                "name": "foo",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "x",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[x](){}}); 1`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 10,
        "properties": [
          {
            "computed": true,
            "end": 9,
            "key": {
              "end": 4,
              "name": "x",
              "range": [
                3,
                4,
              ],
              "start": 3,
              "type": "Identifier",
            },
            "kind": "init",
            "method": true,
            "range": [
              2,
              9,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "async": false,
              "body": {
                "body": [],
                "end": 9,
                "range": [
                  7,
                  9,
                ],
                "start": 7,
                "type": "BlockStatement",
              },
              "end": 9,
              "generator": false,
              "id": null,
              "params": [],
              "range": [
                5,
                9,
              ],
              "start": 5,
              "type": "FunctionExpression",
            },
          },
        ],
        "range": [
          1,
          10,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[x]: y}) => z; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "z",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": true,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "y",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[x]:y} = z); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": true,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "name": "y",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[x]:y} = z); 2`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "end": 12,
        "left": {
          "end": 8,
          "properties": [
            {
              "computed": true,
              "end": 7,
              "key": {
                "end": 4,
                "name": "x",
                "range": [
                  3,
                  4,
                ],
                "start": 3,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                7,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 7,
                "name": "y",
                "range": [
                  6,
                  7,
                ],
                "start": 6,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            8,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          12,
        ],
        "right": {
          "end": 12,
          "name": "z",
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[x]:y}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": true,
            "key": {
              "name": "x",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "name": "y",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({[x]:y}); 2`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "end": 8,
        "properties": [
          {
            "computed": true,
            "end": 7,
            "key": {
              "end": 4,
              "name": "x",
              "range": [
                3,
                4,
              ],
              "start": 3,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              7,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 7,
              "name": "y",
              "range": [
                6,
                7,
              ],
              "start": 6,
              "type": "Identifier",
            },
          },
        ],
        "range": [
          1,
          8,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({} + 1); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [],
          "type": "ObjectExpression",
        },
        "operator": "+",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({} = 0); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 0,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({}.length) = z 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 15,
        "left": {
          "computed": false,
          "end": 10,
          "object": {
            "end": 3,
            "properties": [],
            "range": [
              1,
              3,
            ],
            "start": 1,
            "type": "ObjectExpression",
          },
          "optional": false,
          "property": {
            "end": 10,
            "name": "length",
            "range": [
              4,
              10,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "range": [
            1,
            10,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          15,
        ],
        "right": {
          "end": 15,
          "name": "z",
          "range": [
            14,
            15,
          ],
          "start": 14,
          "type": "Identifier",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({200:exp}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "type": "Literal",
              "value": 200,
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "name": "exp",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({Foo} = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "Foo",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "Foo",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "properties": [],
          "type": "ObjectExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a, b} = {a: 1, b: 2}); 1`] = `
{
  "body": [
    {
      "end": 24,
      "expression": {
        "end": 22,
        "left": {
          "end": 7,
          "properties": [
            {
              "computed": false,
              "end": 3,
              "key": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                3,
              ],
              "shorthand": true,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
            },
            {
              "computed": false,
              "end": 6,
              "key": {
                "end": 6,
                "name": "b",
                "range": [
                  5,
                  6,
                ],
                "start": 5,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                5,
                6,
              ],
              "shorthand": true,
              "start": 5,
              "type": "Property",
              "value": {
                "end": 6,
                "name": "b",
                "range": [
                  5,
                  6,
                ],
                "start": 5,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            7,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          22,
        ],
        "right": {
          "end": 22,
          "properties": [
            {
              "computed": false,
              "end": 15,
              "key": {
                "end": 12,
                "name": "a",
                "range": [
                  11,
                  12,
                ],
                "start": 11,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                11,
                15,
              ],
              "shorthand": false,
              "start": 11,
              "type": "Property",
              "value": {
                "end": 15,
                "range": [
                  14,
                  15,
                ],
                "start": 14,
                "type": "Literal",
                "value": 1,
              },
            },
            {
              "computed": false,
              "end": 21,
              "key": {
                "end": 18,
                "name": "b",
                "range": [
                  17,
                  18,
                ],
                "start": 17,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                17,
                21,
              ],
              "shorthand": false,
              "start": 17,
              "type": "Property",
              "value": {
                "end": 21,
                "range": [
                  20,
                  21,
                ],
                "start": 20,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "range": [
            10,
            22,
          ],
          "start": 10,
          "type": "ObjectExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        24,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 24,
  "range": [
    0,
    24,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a: {x = y}} = z) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": true,
                    "type": "Property",
                    "value": {
                      "left": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "right": {
                        "name": "y",
                        "type": "Identifier",
                      },
                      "type": "AssignmentPattern",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a: {x = y}}) => z 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "z",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "a",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": true,
                      "type": "Property",
                      "value": {
                        "left": {
                          "name": "x",
                          "type": "Identifier",
                        },
                        "right": {
                          "name": "y",
                          "type": "Identifier",
                        },
                        "type": "AssignmentPattern",
                      },
                    },
                  ],
                  "type": "ObjectPattern",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:((((a1))))} = {a:20}) 1`] = `
{
  "body": [
    {
      "end": 25,
      "expression": {
        "end": 24,
        "left": {
          "end": 15,
          "properties": [
            {
              "computed": false,
              "end": 14,
              "key": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                14,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 10,
                "name": "a1",
                "range": [
                  8,
                  10,
                ],
                "start": 8,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            15,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          24,
        ],
        "right": {
          "end": 24,
          "properties": [
            {
              "computed": false,
              "end": 23,
              "key": {
                "end": 20,
                "name": "a",
                "range": [
                  19,
                  20,
                ],
                "start": 19,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                19,
                23,
              ],
              "shorthand": false,
              "start": 19,
              "type": "Property",
              "value": {
                "end": 23,
                "range": [
                  21,
                  23,
                ],
                "start": 21,
                "type": "Literal",
                "value": 20,
              },
            },
          ],
          "range": [
            18,
            24,
          ],
          "start": 18,
          "type": "ObjectExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        25,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 25,
  "range": [
    0,
    25,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:(b = 0)}) 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "end": 12,
        "properties": [
          {
            "computed": false,
            "end": 11,
            "key": {
              "end": 3,
              "name": "a",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              11,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 10,
              "left": {
                "end": 6,
                "name": "b",
                "range": [
                  5,
                  6,
                ],
                "start": 5,
                "type": "Identifier",
              },
              "operator": "=",
              "range": [
                5,
                10,
              ],
              "right": {
                "end": 10,
                "range": [
                  9,
                  10,
                ],
                "start": 9,
                "type": "Literal",
                "value": 0,
              },
              "start": 5,
              "type": "AssignmentExpression",
            },
          },
        ],
        "range": [
          1,
          12,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:(b) = 0} = 1) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "left": {
                  "name": "b",
                  "type": "Identifier",
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                },
                "type": "AssignmentPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:(b) = c} = 1) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "left": {
                  "name": "b",
                  "type": "Identifier",
                },
                "right": {
                  "name": "c",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:(b) = c}) 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "a",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "left": {
                "name": "b",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "name": "c",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:(b)} = 0) 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "end": 12,
        "left": {
          "end": 8,
          "properties": [
            {
              "computed": false,
              "end": 7,
              "key": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                7,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 6,
                "name": "b",
                "range": [
                  5,
                  6,
                ],
                "start": 5,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            8,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          12,
        ],
        "right": {
          "end": 12,
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Literal",
          "value": 0,
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:(b.c)} = 0) 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 14,
        "left": {
          "end": 10,
          "properties": [
            {
              "computed": false,
              "end": 9,
              "key": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                9,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "computed": false,
                "end": 8,
                "object": {
                  "end": 6,
                  "name": "b",
                  "range": [
                    5,
                    6,
                  ],
                  "start": 5,
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "end": 8,
                  "name": "c",
                  "range": [
                    7,
                    8,
                  ],
                  "start": 7,
                  "type": "Identifier",
                },
                "range": [
                  5,
                  8,
                ],
                "start": 5,
                "type": "MemberExpression",
              },
            },
          ],
          "range": [
            1,
            10,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          14,
        ],
        "right": {
          "end": 14,
          "range": [
            13,
            14,
          ],
          "start": 13,
          "type": "Literal",
          "value": 0,
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:a1 = r1 = 44} = {}) 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "end": 22,
        "left": {
          "end": 17,
          "properties": [
            {
              "computed": false,
              "end": 16,
              "key": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                16,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 16,
                "left": {
                  "end": 6,
                  "name": "a1",
                  "range": [
                    4,
                    6,
                  ],
                  "start": 4,
                  "type": "Identifier",
                },
                "range": [
                  4,
                  16,
                ],
                "right": {
                  "end": 16,
                  "left": {
                    "end": 11,
                    "name": "r1",
                    "range": [
                      9,
                      11,
                    ],
                    "start": 9,
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "range": [
                    9,
                    16,
                  ],
                  "right": {
                    "end": 16,
                    "range": [
                      14,
                      16,
                    ],
                    "start": 14,
                    "type": "Literal",
                    "value": 44,
                  },
                  "start": 9,
                  "type": "AssignmentExpression",
                },
                "start": 4,
                "type": "AssignmentPattern",
              },
            },
          ],
          "range": [
            1,
            17,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          22,
        ],
        "right": {
          "end": 22,
          "properties": [],
          "range": [
            20,
            22,
          ],
          "start": 20,
          "type": "ObjectExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a:a1 = r1} = {}) 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "end": 17,
        "left": {
          "end": 12,
          "properties": [
            {
              "computed": false,
              "end": 11,
              "key": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                11,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 11,
                "left": {
                  "end": 6,
                  "name": "a1",
                  "range": [
                    4,
                    6,
                  ],
                  "start": 4,
                  "type": "Identifier",
                },
                "range": [
                  4,
                  11,
                ],
                "right": {
                  "end": 11,
                  "name": "r1",
                  "range": [
                    9,
                    11,
                  ],
                  "start": 9,
                  "type": "Identifier",
                },
                "start": 4,
                "type": "AssignmentPattern",
              },
            },
          ],
          "range": [
            1,
            12,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          17,
        ],
        "right": {
          "end": 17,
          "properties": [],
          "range": [
            15,
            17,
          ],
          "start": 15,
          "type": "ObjectExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a} + foo) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "a",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "a",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectExpression",
        },
        "operator": "+",
        "right": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a} = b,) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "a",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "right": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({a},) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "a",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "a",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({b} = b); 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "end": 8,
        "left": {
          "end": 4,
          "properties": [
            {
              "computed": false,
              "end": 3,
              "key": {
                "end": 3,
                "name": "b",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                3,
              ],
              "shorthand": true,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 3,
                "name": "b",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            4,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          8,
        ],
        "right": {
          "end": 8,
          "name": "b",
          "range": [
            7,
            8,
          ],
          "start": 7,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({foo, bar} = {foo: 0, bar: 1}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "foo",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "foo",
                "type": "Identifier",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "bar",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "bar",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "foo",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "type": "Literal",
                "value": 0,
              },
            },
            {
              "computed": false,
              "key": {
                "name": "bar",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "type": "Literal",
                "value": 1,
              },
            },
          ],
          "type": "ObjectExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({foo: true / false}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "foo",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": false,
            "type": "Property",
            "value": {
              "left": {
                "type": "Literal",
                "value": true,
              },
              "operator": "/",
              "right": {
                "type": "Literal",
                "value": false,
              },
              "type": "BinaryExpression",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: [foo, bar] + x}) 1`] = `
{
  "body": [
    {
      "end": 25,
      "expression": {
        "end": 24,
        "properties": [
          {
            "computed": false,
            "end": 23,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              23,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 23,
              "left": {
                "elements": [
                  {
                    "end": 13,
                    "name": "foo",
                    "range": [
                      10,
                      13,
                    ],
                    "start": 10,
                    "type": "Identifier",
                  },
                  {
                    "end": 18,
                    "name": "bar",
                    "range": [
                      15,
                      18,
                    ],
                    "start": 15,
                    "type": "Identifier",
                  },
                ],
                "end": 19,
                "range": [
                  9,
                  19,
                ],
                "start": 9,
                "type": "ArrayExpression",
              },
              "operator": "+",
              "range": [
                9,
                23,
              ],
              "right": {
                "end": 23,
                "name": "x",
                "range": [
                  22,
                  23,
                ],
                "start": 22,
                "type": "Identifier",
              },
              "start": 9,
              "type": "BinaryExpression",
            },
          },
        ],
        "range": [
          1,
          24,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        25,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 25,
  "range": [
    0,
    25,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: [foo, bar].join("")}) 1`] = `
{
  "body": [
    {
      "end": 30,
      "expression": {
        "end": 29,
        "properties": [
          {
            "computed": false,
            "end": 28,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              28,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "arguments": [
                {
                  "end": 27,
                  "range": [
                    25,
                    27,
                  ],
                  "start": 25,
                  "type": "Literal",
                  "value": "",
                },
              ],
              "callee": {
                "computed": false,
                "end": 24,
                "object": {
                  "elements": [
                    {
                      "end": 13,
                      "name": "foo",
                      "range": [
                        10,
                        13,
                      ],
                      "start": 10,
                      "type": "Identifier",
                    },
                    {
                      "end": 18,
                      "name": "bar",
                      "range": [
                        15,
                        18,
                      ],
                      "start": 15,
                      "type": "Identifier",
                    },
                  ],
                  "end": 19,
                  "range": [
                    9,
                    19,
                  ],
                  "start": 9,
                  "type": "ArrayExpression",
                },
                "optional": false,
                "property": {
                  "end": 24,
                  "name": "join",
                  "range": [
                    20,
                    24,
                  ],
                  "start": 20,
                  "type": "Identifier",
                },
                "range": [
                  9,
                  24,
                ],
                "start": 9,
                "type": "MemberExpression",
              },
              "end": 28,
              "optional": false,
              "range": [
                9,
                28,
              ],
              "start": 9,
              "type": "CallExpression",
            },
          },
        ],
        "range": [
          1,
          29,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        30,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 30,
  "range": [
    0,
    30,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: {x: y}.join("")}) 1`] = `
{
  "body": [
    {
      "end": 26,
      "expression": {
        "end": 25,
        "properties": [
          {
            "computed": false,
            "end": 24,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              24,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "arguments": [
                {
                  "end": 23,
                  "range": [
                    21,
                    23,
                  ],
                  "start": 21,
                  "type": "Literal",
                  "value": "",
                },
              ],
              "callee": {
                "computed": false,
                "end": 20,
                "object": {
                  "end": 15,
                  "properties": [
                    {
                      "computed": false,
                      "end": 14,
                      "key": {
                        "end": 11,
                        "name": "x",
                        "range": [
                          10,
                          11,
                        ],
                        "start": 10,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        10,
                        14,
                      ],
                      "shorthand": false,
                      "start": 10,
                      "type": "Property",
                      "value": {
                        "end": 14,
                        "name": "y",
                        "range": [
                          13,
                          14,
                        ],
                        "start": 13,
                        "type": "Identifier",
                      },
                    },
                  ],
                  "range": [
                    9,
                    15,
                  ],
                  "start": 9,
                  "type": "ObjectExpression",
                },
                "optional": false,
                "property": {
                  "end": 20,
                  "name": "join",
                  "range": [
                    16,
                    20,
                  ],
                  "start": 16,
                  "type": "Identifier",
                },
                "range": [
                  9,
                  20,
                ],
                "start": 9,
                "type": "MemberExpression",
              },
              "end": 24,
              "optional": false,
              "range": [
                9,
                24,
              ],
              "start": 9,
              "type": "CallExpression",
            },
          },
        ],
        "range": [
          1,
          25,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: {x: y}}) 1`] = `
{
  "body": [
    {
      "end": 17,
      "expression": {
        "end": 16,
        "properties": [
          {
            "computed": false,
            "end": 15,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              15,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 15,
              "properties": [
                {
                  "computed": false,
                  "end": 14,
                  "key": {
                    "end": 11,
                    "name": "x",
                    "range": [
                      10,
                      11,
                    ],
                    "start": 10,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    10,
                    14,
                  ],
                  "shorthand": false,
                  "start": 10,
                  "type": "Property",
                  "value": {
                    "end": 14,
                    "name": "y",
                    "range": [
                      13,
                      14,
                    ],
                    "start": 13,
                    "type": "Identifier",
                  },
                },
              ],
              "range": [
                9,
                15,
              ],
              "start": 9,
              "type": "ObjectExpression",
            },
          },
        ],
        "range": [
          1,
          16,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        17,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: {x:y}/x/g}) 1`] = `
{
  "body": [
    {
      "end": 20,
      "expression": {
        "end": 19,
        "properties": [
          {
            "computed": false,
            "end": 18,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              18,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 18,
              "left": {
                "end": 16,
                "left": {
                  "end": 14,
                  "properties": [
                    {
                      "computed": false,
                      "end": 13,
                      "key": {
                        "end": 11,
                        "name": "x",
                        "range": [
                          10,
                          11,
                        ],
                        "start": 10,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        10,
                        13,
                      ],
                      "shorthand": false,
                      "start": 10,
                      "type": "Property",
                      "value": {
                        "end": 13,
                        "name": "y",
                        "range": [
                          12,
                          13,
                        ],
                        "start": 12,
                        "type": "Identifier",
                      },
                    },
                  ],
                  "range": [
                    9,
                    14,
                  ],
                  "start": 9,
                  "type": "ObjectExpression",
                },
                "operator": "/",
                "range": [
                  9,
                  16,
                ],
                "right": {
                  "end": 16,
                  "name": "x",
                  "range": [
                    15,
                    16,
                  ],
                  "start": 15,
                  "type": "Identifier",
                },
                "start": 9,
                "type": "BinaryExpression",
              },
              "operator": "/",
              "range": [
                9,
                18,
              ],
              "right": {
                "end": 18,
                "name": "g",
                "range": [
                  17,
                  18,
                ],
                "start": 17,
                "type": "Identifier",
              },
              "start": 9,
              "type": "BinaryExpression",
            },
          },
        ],
        "range": [
          1,
          19,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        20,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 20,
  "range": [
    0,
    20,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: {x:y}/x}) 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "end": 17,
        "properties": [
          {
            "computed": false,
            "end": 16,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              16,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 16,
              "left": {
                "end": 14,
                "properties": [
                  {
                    "computed": false,
                    "end": 13,
                    "key": {
                      "end": 11,
                      "name": "x",
                      "range": [
                        10,
                        11,
                      ],
                      "start": 10,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      10,
                      13,
                    ],
                    "shorthand": false,
                    "start": 10,
                    "type": "Property",
                    "value": {
                      "end": 13,
                      "name": "y",
                      "range": [
                        12,
                        13,
                      ],
                      "start": 12,
                      "type": "Identifier",
                    },
                  },
                ],
                "range": [
                  9,
                  14,
                ],
                "start": 9,
                "type": "ObjectExpression",
              },
              "operator": "/",
              "range": [
                9,
                16,
              ],
              "right": {
                "end": 16,
                "name": "x",
                "range": [
                  15,
                  16,
                ],
                "start": 15,
                "type": "Identifier",
              },
              "start": 9,
              "type": "BinaryExpression",
            },
          },
        ],
        "range": [
          1,
          17,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({ident: {x}}) 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "end": 13,
        "properties": [
          {
            "computed": false,
            "end": 12,
            "key": {
              "end": 7,
              "name": "ident",
              "range": [
                2,
                7,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              12,
            ],
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 12,
              "properties": [
                {
                  "computed": false,
                  "end": 11,
                  "key": {
                    "end": 11,
                    "name": "x",
                    "range": [
                      10,
                      11,
                    ],
                    "start": 10,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    10,
                    11,
                  ],
                  "shorthand": true,
                  "start": 10,
                  "type": "Property",
                  "value": {
                    "end": 11,
                    "name": "x",
                    "range": [
                      10,
                      11,
                    ],
                    "start": 10,
                    "type": "Identifier",
                  },
                },
              ],
              "range": [
                9,
                12,
              ],
              "start": 9,
              "type": "ObjectExpression",
            },
          },
        ],
        "range": [
          1,
          13,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x = 42, y = 15} = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "type": "Literal",
                  "value": 42,
                },
                "type": "AssignmentPattern",
              },
            },
            {
              "computed": false,
              "key": {
                "name": "y",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "left": {
                  "name": "y",
                  "type": "Identifier",
                },
                "right": {
                  "type": "Literal",
                  "value": 15,
                },
                "type": "AssignmentPattern",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x, ...y}) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "x",
                  "type": "Identifier",
                },
              },
              {
                "argument": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x: ((y, z) => z)["x"]} = z = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": false,
              "type": "Property",
              "value": {
                "computed": true,
                "object": {
                  "async": false,
                  "body": {
                    "name": "z",
                    "type": "Identifier",
                  },
                  "expression": true,
                  "generator": false,
                  "params": [
                    {
                      "name": "y",
                      "type": "Identifier",
                    },
                    {
                      "name": "z",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrowFunctionExpression",
                },
                "optional": false,
                "property": {
                  "type": "Literal",
                  "value": "x",
                },
                "type": "MemberExpression",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "z",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x: y}.length) = z 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "end": 19,
        "left": {
          "computed": false,
          "end": 14,
          "object": {
            "end": 7,
            "properties": [
              {
                "computed": false,
                "end": 6,
                "key": {
                  "end": 3,
                  "name": "x",
                  "range": [
                    2,
                    3,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  2,
                  6,
                ],
                "shorthand": false,
                "start": 2,
                "type": "Property",
                "value": {
                  "end": 6,
                  "name": "y",
                  "range": [
                    5,
                    6,
                  ],
                  "start": 5,
                  "type": "Identifier",
                },
              },
            ],
            "range": [
              1,
              7,
            ],
            "start": 1,
            "type": "ObjectExpression",
          },
          "optional": false,
          "property": {
            "end": 14,
            "name": "length",
            "range": [
              8,
              14,
            ],
            "start": 8,
            "type": "Identifier",
          },
          "range": [
            1,
            14,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          19,
        ],
        "right": {
          "end": 19,
          "name": "z",
          "range": [
            18,
            19,
          ],
          "start": 18,
          "type": "Identifier",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x:z = 1, x1:y = 20} = {}); 1`] = `
{
  "body": [
    {
      "end": 28,
      "expression": {
        "end": 26,
        "left": {
          "end": 21,
          "properties": [
            {
              "computed": false,
              "end": 9,
              "key": {
                "end": 3,
                "name": "x",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                9,
              ],
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 9,
                "left": {
                  "end": 5,
                  "name": "z",
                  "range": [
                    4,
                    5,
                  ],
                  "start": 4,
                  "type": "Identifier",
                },
                "range": [
                  4,
                  9,
                ],
                "right": {
                  "end": 9,
                  "range": [
                    8,
                    9,
                  ],
                  "start": 8,
                  "type": "Literal",
                  "value": 1,
                },
                "start": 4,
                "type": "AssignmentPattern",
              },
            },
            {
              "computed": false,
              "end": 20,
              "key": {
                "end": 13,
                "name": "x1",
                "range": [
                  11,
                  13,
                ],
                "start": 11,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                11,
                20,
              ],
              "shorthand": false,
              "start": 11,
              "type": "Property",
              "value": {
                "end": 20,
                "left": {
                  "end": 15,
                  "name": "y",
                  "range": [
                    14,
                    15,
                  ],
                  "start": 14,
                  "type": "Identifier",
                },
                "range": [
                  14,
                  20,
                ],
                "right": {
                  "end": 20,
                  "range": [
                    18,
                    20,
                  ],
                  "start": 18,
                  "type": "Literal",
                  "value": 20,
                },
                "start": 14,
                "type": "AssignmentPattern",
              },
            },
          ],
          "range": [
            1,
            21,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          26,
        ],
        "right": {
          "end": 26,
          "properties": [],
          "range": [
            24,
            26,
          ],
          "start": 24,
          "type": "ObjectExpression",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        28,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 28,
  "range": [
    0,
    28,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x} = y); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "properties": [
            {
              "computed": false,
              "key": {
                "name": "x",
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "shorthand": true,
              "type": "Property",
              "value": {
                "name": "x",
                "type": "Identifier",
              },
            },
          ],
          "type": "ObjectPattern",
        },
        "operator": "=",
        "right": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x} = y); 2`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "end": 8,
        "left": {
          "end": 4,
          "properties": [
            {
              "computed": false,
              "end": 3,
              "key": {
                "end": 3,
                "name": "x",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                2,
                3,
              ],
              "shorthand": true,
              "start": 2,
              "type": "Property",
              "value": {
                "end": 3,
                "name": "x",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            1,
            4,
          ],
          "start": 1,
          "type": "ObjectPattern",
        },
        "operator": "=",
        "range": [
          1,
          8,
        ],
        "right": {
          "end": 8,
          "name": "y",
          "range": [
            7,
            8,
          ],
          "start": 7,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > ({x}); 1`] = `
{
  "body": [
    {
      "end": 6,
      "expression": {
        "end": 4,
        "properties": [
          {
            "computed": false,
            "end": 3,
            "key": {
              "end": 3,
              "name": "x",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "range": [
              2,
              3,
            ],
            "shorthand": true,
            "start": 2,
            "type": "Property",
            "value": {
              "end": 3,
              "name": "x",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
          },
        ],
        "range": [
          1,
          4,
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "range": [
        0,
        6,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "range": [
    0,
    6,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (0, "b", x); 1`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 10,
        "expressions": [
          {
            "end": 2,
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Literal",
            "value": 0,
          },
          {
            "end": 7,
            "range": [
              4,
              7,
            ],
            "start": 4,
            "type": "Literal",
            "value": "b",
          },
          {
            "end": 10,
            "name": "x",
            "range": [
              9,
              10,
            ],
            "start": 9,
            "type": "Identifier",
          },
        ],
        "range": [
          1,
          10,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (0, a) 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "type": "Literal",
            "value": 0,
          },
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (1) + (2  ) + 3 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "type": "Literal",
            "value": 1,
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "value": 2,
          },
          "type": "BinaryExpression",
        },
        "operator": "+",
        "right": {
          "type": "Literal",
          "value": 3,
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (1) 1`] = `
{
  "body": [
    {
      "expression": {
        "type": "Literal",
        "value": 1,
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (1, a, b); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "type": "Literal",
            "value": 1,
          },
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "name": "b",
            "type": "Identifier",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a / b); 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "/",
        "right": {
          "name": "b",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a / b); 2`] = `
{
  "body": [
    {
      "end": 8,
      "expression": {
        "end": 6,
        "left": {
          "end": 2,
          "name": "a",
          "range": [
            1,
            2,
          ],
          "start": 1,
          "type": "Identifier",
        },
        "operator": "/",
        "range": [
          1,
          6,
        ],
        "right": {
          "end": 6,
          "name": "b",
          "range": [
            5,
            6,
          ],
          "start": 5,
          "type": "Identifier",
        },
        "start": 1,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        8,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 8,
  "range": [
    0,
    8,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a = 1, b = 2); 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 13,
        "expressions": [
          {
            "end": 6,
            "left": {
              "end": 2,
              "name": "a",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            "operator": "=",
            "range": [
              1,
              6,
            ],
            "right": {
              "end": 6,
              "range": [
                5,
                6,
              ],
              "start": 5,
              "type": "Literal",
              "value": 1,
            },
            "start": 1,
            "type": "AssignmentExpression",
          },
          {
            "end": 13,
            "left": {
              "end": 9,
              "name": "b",
              "range": [
                8,
                9,
              ],
              "start": 8,
              "type": "Identifier",
            },
            "operator": "=",
            "range": [
              8,
              13,
            ],
            "right": {
              "end": 13,
              "range": [
                12,
                13,
              ],
              "start": 12,
              "type": "Literal",
              "value": 2,
            },
            "start": 8,
            "type": "AssignmentExpression",
          },
        ],
        "range": [
          1,
          13,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a = b) 1`] = `
{
  "body": [
    {
      "end": 7,
      "expression": {
        "end": 6,
        "left": {
          "end": 2,
          "name": "a",
          "range": [
            1,
            2,
          ],
          "start": 1,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          1,
          6,
        ],
        "right": {
          "end": 6,
          "name": "b",
          "range": [
            5,
            6,
          ],
          "start": 5,
          "type": "Identifier",
        },
        "start": 1,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        7,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 7,
  "range": [
    0,
    7,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) + (b) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "+",
        "right": {
          "name": "b",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) += 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "+=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) = {} 1`] = `
{
  "body": [
    {
      "end": 8,
      "expression": {
        "end": 8,
        "left": {
          "end": 2,
          "name": "a",
          "range": [
            1,
            2,
          ],
          "start": 1,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          8,
        ],
        "right": {
          "end": 8,
          "properties": [],
          "range": [
            6,
            8,
          ],
          "start": 6,
          "type": "ObjectExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        8,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 8,
  "range": [
    0,
    8,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) = 0 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 0,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) = 0 2`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 0,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) = 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) = 1; 2`] = `
{
  "body": [
    {
      "end": 8,
      "expression": {
        "end": 7,
        "left": {
          "end": 2,
          "name": "a",
          "range": [
            1,
            2,
          ],
          "start": 1,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          7,
        ],
        "right": {
          "end": 7,
          "range": [
            6,
            7,
          ],
          "start": 6,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        8,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 8,
  "range": [
    0,
    8,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a) ? (b) : (c) 1`] = `
{
  "body": [
    {
      "expression": {
        "alternate": {
          "name": "c",
          "type": "Identifier",
        },
        "consequent": {
          "name": "b",
          "type": "Identifier",
        },
        "test": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a)++ 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "++",
        "prefix": false,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a)-- 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "--",
        "prefix": false,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a++) 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "++",
        "prefix": false,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a, 0) 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "type": "Literal",
            "value": 0,
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a, 1, b); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "type": "Literal",
            "value": 1,
          },
          {
            "name": "b",
            "type": "Identifier",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a, b); 1`] = `
{
  "body": [
    {
      "end": 7,
      "expression": {
        "end": 5,
        "expressions": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 5,
            "name": "b",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
        ],
        "range": [
          1,
          5,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        7,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 7,
  "range": [
    0,
    7,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a, b, c, 1, 2, 3); 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "end": 17,
        "expressions": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 5,
            "name": "b",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
          {
            "end": 8,
            "name": "c",
            "range": [
              7,
              8,
            ],
            "start": 7,
            "type": "Identifier",
          },
          {
            "end": 11,
            "range": [
              10,
              11,
            ],
            "start": 10,
            "type": "Literal",
            "value": 1,
          },
          {
            "end": 14,
            "range": [
              13,
              14,
            ],
            "start": 13,
            "type": "Literal",
            "value": 2,
          },
          {
            "end": 17,
            "range": [
              16,
              17,
            ],
            "start": 16,
            "type": "Literal",
            "value": 3,
          },
        ],
        "range": [
          1,
          17,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a,[b]=c) 1`] = `
{
  "body": [
    {
      "end": 9,
      "expression": {
        "end": 8,
        "expressions": [
          {
            "end": 2,
            "loc": {
              "end": {
                "column": 2,
                "line": 1,
              },
              "start": {
                "column": 1,
                "line": 1,
              },
            },
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 8,
            "left": {
              "elements": [
                {
                  "end": 5,
                  "loc": {
                    "end": {
                      "column": 5,
                      "line": 1,
                    },
                    "start": {
                      "column": 4,
                      "line": 1,
                    },
                  },
                  "name": "b",
                  "range": [
                    4,
                    5,
                  ],
                  "start": 4,
                  "type": "Identifier",
                },
              ],
              "end": 6,
              "loc": {
                "end": {
                  "column": 6,
                  "line": 1,
                },
                "start": {
                  "column": 3,
                  "line": 1,
                },
              },
              "range": [
                3,
                6,
              ],
              "start": 3,
              "type": "ArrayPattern",
            },
            "loc": {
              "end": {
                "column": 8,
                "line": 1,
              },
              "start": {
                "column": 3,
                "line": 1,
              },
            },
            "operator": "=",
            "range": [
              3,
              8,
            ],
            "right": {
              "end": 8,
              "loc": {
                "end": {
                  "column": 8,
                  "line": 1,
                },
                "start": {
                  "column": 7,
                  "line": 1,
                },
              },
              "name": "c",
              "range": [
                7,
                8,
              ],
              "start": 7,
              "type": "Identifier",
            },
            "start": 3,
            "type": "AssignmentExpression",
          },
        ],
        "loc": {
          "end": {
            "column": 8,
            "line": 1,
          },
          "start": {
            "column": 1,
            "line": 1,
          },
        },
        "range": [
          1,
          8,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "loc": {
        "end": {
          "column": 9,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        9,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 9,
  "loc": {
    "end": {
      "column": 9,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    9,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a,[b]=c) 2`] = `
{
  "body": [
    {
      "end": 9,
      "expression": {
        "end": 9,
        "expression": {
          "end": 8,
          "expressions": [
            {
              "end": 2,
              "loc": {
                "end": {
                  "column": 2,
                  "line": 1,
                },
                "start": {
                  "column": 1,
                  "line": 1,
                },
              },
              "name": "a",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            {
              "end": 8,
              "left": {
                "elements": [
                  {
                    "end": 5,
                    "loc": {
                      "end": {
                        "column": 5,
                        "line": 1,
                      },
                      "start": {
                        "column": 4,
                        "line": 1,
                      },
                    },
                    "name": "b",
                    "range": [
                      4,
                      5,
                    ],
                    "start": 4,
                    "type": "Identifier",
                  },
                ],
                "end": 6,
                "loc": {
                  "end": {
                    "column": 6,
                    "line": 1,
                  },
                  "start": {
                    "column": 3,
                    "line": 1,
                  },
                },
                "range": [
                  3,
                  6,
                ],
                "start": 3,
                "type": "ArrayPattern",
              },
              "loc": {
                "end": {
                  "column": 8,
                  "line": 1,
                },
                "start": {
                  "column": 3,
                  "line": 1,
                },
              },
              "operator": "=",
              "range": [
                3,
                8,
              ],
              "right": {
                "end": 8,
                "loc": {
                  "end": {
                    "column": 8,
                    "line": 1,
                  },
                  "start": {
                    "column": 7,
                    "line": 1,
                  },
                },
                "name": "c",
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Identifier",
              },
              "start": 3,
              "type": "AssignmentExpression",
            },
          ],
          "loc": {
            "end": {
              "column": 8,
              "line": 1,
            },
            "start": {
              "column": 1,
              "line": 1,
            },
          },
          "range": [
            1,
            8,
          ],
          "start": 1,
          "type": "SequenceExpression",
        },
        "loc": {
          "end": {
            "column": 9,
            "line": 1,
          },
          "start": {
            "column": 0,
            "line": 1,
          },
        },
        "range": [
          0,
          9,
        ],
        "start": 0,
        "type": "ParenthesizedExpression",
      },
      "loc": {
        "end": {
          "column": 9,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        9,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 9,
  "loc": {
    "end": {
      "column": 9,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    9,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a,1,3,b,c,3); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "type": "Literal",
            "value": 1,
          },
          {
            "type": "Literal",
            "value": 3,
          },
          {
            "name": "b",
            "type": "Identifier",
          },
          {
            "name": "c",
            "type": "Identifier",
          },
          {
            "type": "Literal",
            "value": 3,
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a,a) 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a.b().c().d) += 1; 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "end": 18,
        "left": {
          "computed": false,
          "end": 12,
          "object": {
            "arguments": [],
            "callee": {
              "computed": false,
              "end": 8,
              "object": {
                "arguments": [],
                "callee": {
                  "computed": false,
                  "end": 4,
                  "object": {
                    "end": 2,
                    "name": "a",
                    "range": [
                      1,
                      2,
                    ],
                    "start": 1,
                    "type": "Identifier",
                  },
                  "optional": false,
                  "property": {
                    "end": 4,
                    "name": "b",
                    "range": [
                      3,
                      4,
                    ],
                    "start": 3,
                    "type": "Identifier",
                  },
                  "range": [
                    1,
                    4,
                  ],
                  "start": 1,
                  "type": "MemberExpression",
                },
                "end": 6,
                "optional": false,
                "range": [
                  1,
                  6,
                ],
                "start": 1,
                "type": "CallExpression",
              },
              "optional": false,
              "property": {
                "end": 8,
                "name": "c",
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Identifier",
              },
              "range": [
                1,
                8,
              ],
              "start": 1,
              "type": "MemberExpression",
            },
            "end": 10,
            "optional": false,
            "range": [
              1,
              10,
            ],
            "start": 1,
            "type": "CallExpression",
          },
          "optional": false,
          "property": {
            "end": 12,
            "name": "d",
            "range": [
              11,
              12,
            ],
            "start": 11,
            "type": "Identifier",
          },
          "range": [
            1,
            12,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "+=",
        "range": [
          0,
          18,
        ],
        "right": {
          "end": 18,
          "range": [
            17,
            18,
          ],
          "start": 17,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a.b().c().d) = 1; 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "end": 17,
        "left": {
          "computed": false,
          "end": 12,
          "object": {
            "arguments": [],
            "callee": {
              "computed": false,
              "end": 8,
              "object": {
                "arguments": [],
                "callee": {
                  "computed": false,
                  "end": 4,
                  "object": {
                    "end": 2,
                    "name": "a",
                    "range": [
                      1,
                      2,
                    ],
                    "start": 1,
                    "type": "Identifier",
                  },
                  "optional": false,
                  "property": {
                    "end": 4,
                    "name": "b",
                    "range": [
                      3,
                      4,
                    ],
                    "start": 3,
                    "type": "Identifier",
                  },
                  "range": [
                    1,
                    4,
                  ],
                  "start": 1,
                  "type": "MemberExpression",
                },
                "end": 6,
                "optional": false,
                "range": [
                  1,
                  6,
                ],
                "start": 1,
                "type": "CallExpression",
              },
              "optional": false,
              "property": {
                "end": 8,
                "name": "c",
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Identifier",
              },
              "range": [
                1,
                8,
              ],
              "start": 1,
              "type": "MemberExpression",
            },
            "end": 10,
            "optional": false,
            "range": [
              1,
              10,
            ],
            "start": 1,
            "type": "CallExpression",
          },
          "optional": false,
          "property": {
            "end": 12,
            "name": "d",
            "range": [
              11,
              12,
            ],
            "start": 11,
            "type": "Identifier",
          },
          "range": [
            1,
            12,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          17,
        ],
        "right": {
          "end": 17,
          "range": [
            16,
            17,
          ],
          "start": 16,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a.b) += 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": false,
          "object": {
            "name": "a",
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "+=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a.b) = {} 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": false,
          "object": {
            "name": "a",
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "=",
        "right": {
          "properties": [],
          "type": "ObjectExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a.b) = 1; 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "end": 9,
        "left": {
          "computed": false,
          "end": 4,
          "object": {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 4,
            "name": "b",
            "range": [
              3,
              4,
            ],
            "start": 3,
            "type": "Identifier",
          },
          "range": [
            1,
            4,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          9,
        ],
        "right": {
          "end": 9,
          "range": [
            8,
            9,
          ],
          "start": 8,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a[b]) += 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": true,
          "object": {
            "name": "a",
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "+=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (a[b]) = 1; 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 10,
        "left": {
          "computed": true,
          "end": 5,
          "object": {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 4,
            "name": "b",
            "range": [
              3,
              4,
            ],
            "start": 3,
            "type": "Identifier",
          },
          "range": [
            1,
            5,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          10,
        ],
        "right": {
          "end": 10,
          "range": [
            9,
            10,
          ],
          "start": 9,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (argument1, [a,b,...rest]) 1`] = `
{
  "body": [
    {
      "end": 26,
      "expression": {
        "end": 25,
        "expressions": [
          {
            "end": 10,
            "name": "argument1",
            "range": [
              1,
              10,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "elements": [
              {
                "end": 14,
                "name": "a",
                "range": [
                  13,
                  14,
                ],
                "start": 13,
                "type": "Identifier",
              },
              {
                "end": 16,
                "name": "b",
                "range": [
                  15,
                  16,
                ],
                "start": 15,
                "type": "Identifier",
              },
              {
                "argument": {
                  "end": 24,
                  "name": "rest",
                  "range": [
                    20,
                    24,
                  ],
                  "start": 20,
                  "type": "Identifier",
                },
                "end": 24,
                "range": [
                  17,
                  24,
                ],
                "start": 17,
                "type": "SpreadElement",
              },
            ],
            "end": 25,
            "range": [
              12,
              25,
            ],
            "start": 12,
            "type": "ArrayExpression",
          },
        ],
        "range": [
          1,
          25,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (async ()); 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (async)=2 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "async",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 2,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (await = "foo") 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "await",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": "foo",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (delete /a/.x); 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "computed": false,
          "object": {
            "regex": {
              "flags": "",
              "pattern": "a",
            },
            "type": "Literal",
            "value": /a/,
          },
          "optional": false,
          "property": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "delete",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (delete /a/g.x); 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "computed": false,
          "loc": {
            "end": {
              "column": 14,
              "line": 1,
            },
            "start": {
              "column": 8,
              "line": 1,
            },
          },
          "object": {
            "loc": {
              "end": {
                "column": 12,
                "line": 1,
              },
              "start": {
                "column": 8,
                "line": 1,
              },
            },
            "regex": {
              "flags": "g",
              "pattern": "a",
            },
            "type": "Literal",
            "value": /a/g,
          },
          "optional": false,
          "property": {
            "loc": {
              "end": {
                "column": 14,
                "line": 1,
              },
              "start": {
                "column": 13,
                "line": 1,
              },
            },
            "name": "x",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "loc": {
          "end": {
            "column": 14,
            "line": 1,
          },
          "start": {
            "column": 1,
            "line": 1,
          },
        },
        "operator": "delete",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "loc": {
        "end": {
          "column": 16,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "type": "ExpressionStatement",
    },
  ],
  "loc": {
    "end": {
      "column": 16,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (delete foo.bar); 1`] = `
{
  "body": [
    {
      "end": 17,
      "expression": {
        "argument": {
          "computed": false,
          "end": 15,
          "object": {
            "end": 11,
            "name": "foo",
            "range": [
              8,
              11,
            ],
            "start": 8,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 15,
            "name": "bar",
            "range": [
              12,
              15,
            ],
            "start": 12,
            "type": "Identifier",
          },
          "range": [
            8,
            15,
          ],
          "start": 8,
          "type": "MemberExpression",
        },
        "end": 15,
        "operator": "delete",
        "prefix": true,
        "range": [
          1,
          15,
        ],
        "start": 1,
        "type": "UnaryExpression",
      },
      "range": [
        0,
        17,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (f().a) = 1; 1`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 11,
        "left": {
          "computed": false,
          "end": 6,
          "object": {
            "arguments": [],
            "callee": {
              "end": 2,
              "name": "f",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            "end": 4,
            "optional": false,
            "range": [
              1,
              4,
            ],
            "start": 1,
            "type": "CallExpression",
          },
          "optional": false,
          "property": {
            "end": 6,
            "name": "a",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "range": [
            1,
            6,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (foo + (bar + boo) + ding) 1`] = `
{
  "body": [
    {
      "end": 26,
      "expression": {
        "end": 25,
        "left": {
          "end": 18,
          "left": {
            "end": 4,
            "name": "foo",
            "range": [
              1,
              4,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "operator": "+",
          "range": [
            1,
            18,
          ],
          "right": {
            "end": 17,
            "left": {
              "end": 11,
              "name": "bar",
              "range": [
                8,
                11,
              ],
              "start": 8,
              "type": "Identifier",
            },
            "operator": "+",
            "range": [
              8,
              17,
            ],
            "right": {
              "end": 17,
              "name": "boo",
              "range": [
                14,
                17,
              ],
              "start": 14,
              "type": "Identifier",
            },
            "start": 8,
            "type": "BinaryExpression",
          },
          "start": 1,
          "type": "BinaryExpression",
        },
        "operator": "+",
        "range": [
          1,
          25,
        ],
        "right": {
          "end": 25,
          "name": "ding",
          "range": [
            21,
            25,
          ],
          "start": 21,
          "type": "Identifier",
        },
        "start": 1,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (foo) += 3 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "foo",
          "type": "Identifier",
        },
        "operator": "+=",
        "right": {
          "type": "Literal",
          "value": 3,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (foo) 1`] = `
{
  "body": [
    {
      "expression": {
        "name": "foo",
        "type": "Identifier",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (foo.x) 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": false,
        "object": {
          "name": "foo",
          "type": "Identifier",
        },
        "optional": false,
        "property": {
          "name": "x",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (foo[x]) 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": true,
        "object": {
          "name": "foo",
          "type": "Identifier",
        },
        "optional": false,
        "property": {
          "name": "x",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (obj.a) = 1; 1`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 11,
        "left": {
          "computed": false,
          "end": 6,
          "object": {
            "end": 4,
            "name": "obj",
            "range": [
              1,
              4,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 6,
            "name": "a",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "range": [
            1,
            6,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (obj[0]) = 1; 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "end": 12,
        "left": {
          "computed": true,
          "end": 7,
          "object": {
            "end": 4,
            "name": "obj",
            "range": [
              1,
              4,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 6,
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Literal",
            "value": 0,
          },
          "range": [
            1,
            7,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          12,
        ],
        "right": {
          "end": 12,
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (q, { x = 10 } = {}); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "q",
            "type": "Identifier",
          },
          {
            "left": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "right": {
                      "type": "Literal",
                      "value": 10,
                    },
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "operator": "=",
            "right": {
              "properties": [],
              "type": "ObjectExpression",
            },
            "type": "AssignmentExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (this.a) += 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": false,
          "object": {
            "type": "ThisExpression",
          },
          "optional": false,
          "property": {
            "name": "a",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "+=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (this.a) = 1; 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "end": 12,
        "left": {
          "computed": false,
          "end": 7,
          "object": {
            "end": 5,
            "range": [
              1,
              5,
            ],
            "start": 1,
            "type": "ThisExpression",
          },
          "optional": false,
          "property": {
            "end": 7,
            "name": "a",
            "range": [
              6,
              7,
            ],
            "start": 6,
            "type": "Identifier",
          },
          "range": [
            1,
            7,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          12,
        ],
        "right": {
          "end": 12,
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (this[b]) += 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": true,
          "object": {
            "type": "ThisExpression",
          },
          "optional": false,
          "property": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "+=",
        "right": {
          "type": "Literal",
          "value": 1,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (this[b]) = 1; 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "end": 13,
        "left": {
          "computed": true,
          "end": 8,
          "object": {
            "end": 5,
            "range": [
              1,
              5,
            ],
            "start": 1,
            "type": "ThisExpression",
          },
          "optional": false,
          "property": {
            "end": 7,
            "name": "b",
            "range": [
              6,
              7,
            ],
            "start": 6,
            "type": "Identifier",
          },
          "range": [
            1,
            8,
          ],
          "start": 1,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          0,
          13,
        ],
        "right": {
          "end": 13,
          "range": [
            12,
            13,
          ],
          "start": 12,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (true ? { x = true } = {} : { x = false } = {}) 1`] = `
{
  "body": [
    {
      "end": 47,
      "expression": {
        "alternate": {
          "end": 46,
          "left": {
            "end": 41,
            "properties": [
              {
                "computed": false,
                "end": 39,
                "key": {
                  "end": 31,
                  "name": "x",
                  "range": [
                    30,
                    31,
                  ],
                  "start": 30,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  30,
                  39,
                ],
                "shorthand": true,
                "start": 30,
                "type": "Property",
                "value": {
                  "end": 39,
                  "left": {
                    "end": 31,
                    "name": "x",
                    "range": [
                      30,
                      31,
                    ],
                    "start": 30,
                    "type": "Identifier",
                  },
                  "range": [
                    30,
                    39,
                  ],
                  "right": {
                    "end": 39,
                    "range": [
                      34,
                      39,
                    ],
                    "start": 34,
                    "type": "Literal",
                    "value": false,
                  },
                  "start": 30,
                  "type": "AssignmentPattern",
                },
              },
            ],
            "range": [
              28,
              41,
            ],
            "start": 28,
            "type": "ObjectPattern",
          },
          "operator": "=",
          "range": [
            28,
            46,
          ],
          "right": {
            "end": 46,
            "properties": [],
            "range": [
              44,
              46,
            ],
            "start": 44,
            "type": "ObjectExpression",
          },
          "start": 28,
          "type": "AssignmentExpression",
        },
        "consequent": {
          "end": 25,
          "left": {
            "end": 20,
            "properties": [
              {
                "computed": false,
                "end": 18,
                "key": {
                  "end": 11,
                  "name": "x",
                  "range": [
                    10,
                    11,
                  ],
                  "start": 10,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  10,
                  18,
                ],
                "shorthand": true,
                "start": 10,
                "type": "Property",
                "value": {
                  "end": 18,
                  "left": {
                    "end": 11,
                    "name": "x",
                    "range": [
                      10,
                      11,
                    ],
                    "start": 10,
                    "type": "Identifier",
                  },
                  "range": [
                    10,
                    18,
                  ],
                  "right": {
                    "end": 18,
                    "range": [
                      14,
                      18,
                    ],
                    "start": 14,
                    "type": "Literal",
                    "value": true,
                  },
                  "start": 10,
                  "type": "AssignmentPattern",
                },
              },
            ],
            "range": [
              8,
              20,
            ],
            "start": 8,
            "type": "ObjectPattern",
          },
          "operator": "=",
          "range": [
            8,
            25,
          ],
          "right": {
            "end": 25,
            "properties": [],
            "range": [
              23,
              25,
            ],
            "start": 23,
            "type": "ObjectExpression",
          },
          "start": 8,
          "type": "AssignmentExpression",
        },
        "end": 46,
        "range": [
          1,
          46,
        ],
        "start": 1,
        "test": {
          "end": 5,
          "range": [
            1,
            5,
          ],
          "start": 1,
          "type": "Literal",
          "value": true,
        },
        "type": "ConditionalExpression",
      },
      "range": [
        0,
        47,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 47,
  "range": [
    0,
    47,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (true) 1`] = `
{
  "body": [
    {
      "expression": {
        "type": "Literal",
        "value": true,
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (true) 2`] = `
{
  "body": [
    {
      "end": 6,
      "expression": {
        "end": 5,
        "range": [
          1,
          5,
        ],
        "start": 1,
        "type": "Literal",
        "value": true,
      },
      "range": [
        0,
        6,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "range": [
    0,
    6,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (typeof x) 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "typeof",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (void a) 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "void",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + foo) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "loc": {
            "end": {
              "column": 2,
              "line": 1,
            },
            "start": {
              "column": 1,
              "line": 1,
            },
          },
          "name": "x",
          "type": "Identifier",
        },
        "loc": {
          "end": {
            "column": 8,
            "line": 1,
          },
          "start": {
            "column": 1,
            "line": 1,
          },
        },
        "operator": "+",
        "right": {
          "loc": {
            "end": {
              "column": 8,
              "line": 1,
            },
            "start": {
              "column": 5,
              "line": 1,
            },
          },
          "name": "foo",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "loc": {
        "end": {
          "column": 9,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "type": "ExpressionStatement",
    },
  ],
  "loc": {
    "end": {
      "column": 9,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) != z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "!=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) != z 2`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "!=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) <= z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "<=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) <= z 2`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 12,
        "left": {
          "end": 6,
          "left": {
            "end": 2,
            "name": "x",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "operator": "+",
          "range": [
            1,
            6,
          ],
          "right": {
            "end": 6,
            "name": "y",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "start": 1,
          "type": "BinaryExpression",
        },
        "operator": "<=",
        "range": [
          0,
          12,
        ],
        "right": {
          "end": 12,
          "name": "z",
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) == z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "==",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) == z 2`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 12,
        "left": {
          "end": 6,
          "left": {
            "end": 2,
            "name": "x",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "operator": "+",
          "range": [
            1,
            6,
          ],
          "right": {
            "end": 6,
            "name": "y",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "start": 1,
          "type": "BinaryExpression",
        },
        "operator": "==",
        "range": [
          0,
          12,
        ],
        "right": {
          "end": 12,
          "name": "z",
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) >= z 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": ">=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x + y) >= z 2`] = `
{
  "body": [
    {
      "end": 12,
      "expression": {
        "end": 12,
        "left": {
          "end": 6,
          "left": {
            "end": 2,
            "name": "x",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          "operator": "+",
          "range": [
            1,
            6,
          ],
          "right": {
            "end": 6,
            "name": "y",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "start": 1,
          "type": "BinaryExpression",
        },
        "operator": ">=",
        "range": [
          0,
          12,
        ],
        "right": {
          "end": 12,
          "name": "z",
          "range": [
            11,
            12,
          ],
          "start": 11,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        12,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 12,
  "range": [
    0,
    12,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x) / y 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "/",
        "right": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x) 1`] = `
{
  "body": [
    {
      "end": 3,
      "expression": {
        "end": 2,
        "loc": {
          "end": {
            "column": 2,
            "line": 1,
          },
          "start": {
            "column": 1,
            "line": 1,
          },
        },
        "name": "x",
        "range": [
          1,
          2,
        ],
        "start": 1,
        "type": "Identifier",
      },
      "loc": {
        "end": {
          "column": 3,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        3,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 3,
  "loc": {
    "end": {
      "column": 3,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    3,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x) 2`] = `
{
  "body": [
    {
      "end": 3,
      "expression": {
        "end": 3,
        "expression": {
          "end": 2,
          "loc": {
            "end": {
              "column": 2,
              "line": 1,
            },
            "start": {
              "column": 1,
              "line": 1,
            },
          },
          "name": "x",
          "range": [
            1,
            2,
          ],
          "start": 1,
          "type": "Identifier",
        },
        "loc": {
          "end": {
            "column": 3,
            "line": 1,
          },
          "start": {
            "column": 0,
            "line": 1,
          },
        },
        "range": [
          0,
          3,
        ],
        "start": 0,
        "type": "ParenthesizedExpression",
      },
      "loc": {
        "end": {
          "column": 3,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "range": [
        0,
        3,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 3,
  "loc": {
    "end": {
      "column": 3,
      "line": 1,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "range": [
    0,
    3,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x, /y/); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "regex": {
              "flags": "",
              "pattern": "y",
            },
            "type": "Literal",
            "value": /y/,
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x, y, ...z) => foo 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "foo",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
          {
            "argument": {
              "name": "z",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x.foo = y) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "computed": false,
          "object": {
            "name": "x",
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "name": "foo",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "=",
        "right": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x.foo) 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": false,
        "object": {
          "name": "x",
          "type": "Identifier",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x--); 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "--",
        "prefix": false,
        "type": "UpdateExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x--); 2`] = `
{
  "body": [
    {
      "end": 6,
      "expression": {
        "argument": {
          "end": 2,
          "name": "x",
          "range": [
            1,
            2,
          ],
          "start": 1,
          "type": "Identifier",
        },
        "end": 4,
        "operator": "--",
        "prefix": false,
        "range": [
          1,
          4,
        ],
        "start": 1,
        "type": "UpdateExpression",
      },
      "range": [
        0,
        6,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "range": [
    0,
    6,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x--, y); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "operator": "--",
            "prefix": false,
            "type": "UpdateExpression",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (x--, y); 2`] = `
{
  "body": [
    {
      "end": 9,
      "expression": {
        "end": 7,
        "expressions": [
          {
            "argument": {
              "end": 2,
              "name": "x",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            "end": 4,
            "operator": "--",
            "prefix": false,
            "range": [
              1,
              4,
            ],
            "start": 1,
            "type": "UpdateExpression",
          },
          {
            "end": 7,
            "name": "y",
            "range": [
              6,
              7,
            ],
            "start": 6,
            "type": "Identifier",
          },
        ],
        "range": [
          1,
          7,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        9,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 9,
  "range": [
    0,
    9,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (z = [...x.y] = z) => z 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "z",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "z",
              "type": "Identifier",
            },
            "right": {
              "left": {
                "elements": [
                  {
                    "argument": {
                      "computed": false,
                      "object": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "optional": false,
                      "property": {
                        "name": "y",
                        "type": "Identifier",
                      },
                      "type": "MemberExpression",
                    },
                    "type": "RestElement",
                  },
                ],
                "type": "ArrayPattern",
              },
              "operator": "=",
              "right": {
                "name": "z",
                "type": "Identifier",
              },
              "type": "AssignmentExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (z = [...x.y]) => z 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "z",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "z",
              "type": "Identifier",
            },
            "right": {
              "elements": [
                {
                  "argument": {
                    "computed": false,
                    "object": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "type": "MemberExpression",
                  },
                  "type": "SpreadElement",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > (z = {...x.y}) => z 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "z",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "z",
              "type": "Identifier",
            },
            "right": {
              "properties": [
                {
                  "argument": {
                    "computed": false,
                    "object": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "type": "MemberExpression",
                  },
                  "type": "SpreadElement",
                },
              ],
              "type": "ObjectExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [((((a)))), b] = []; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "a",
              "type": "Identifier",
            },
            {
              "name": "b",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "elements": [],
          "type": "ArrayExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [(a) = 0] = 1 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "end": 13,
        "left": {
          "elements": [
            {
              "end": 8,
              "left": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "range": [
                1,
                8,
              ],
              "right": {
                "end": 8,
                "range": [
                  7,
                  8,
                ],
                "start": 7,
                "type": "Literal",
                "value": 0,
              },
              "start": 1,
              "type": "AssignmentPattern",
            },
          ],
          "end": 9,
          "range": [
            0,
            9,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          13,
        ],
        "right": {
          "end": 13,
          "range": [
            12,
            13,
          ],
          "start": 12,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [(a), b] = []; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "a",
              "type": "Identifier",
            },
            {
              "name": "b",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "elements": [],
          "type": "ArrayExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [(a)] = 0 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "a",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "type": "Literal",
          "value": 0,
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [(a)] = 0 2`] = `
{
  "body": [
    {
      "end": 9,
      "expression": {
        "end": 9,
        "left": {
          "elements": [
            {
              "end": 3,
              "name": "a",
              "range": [
                2,
                3,
              ],
              "start": 2,
              "type": "Identifier",
            },
          ],
          "end": 5,
          "range": [
            0,
            5,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          9,
        ],
        "right": {
          "end": 9,
          "range": [
            8,
            9,
          ],
          "start": 8,
          "type": "Literal",
          "value": 0,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        9,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 9,
  "range": [
    0,
    9,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [(a.b)] = 0 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 11,
        "left": {
          "elements": [
            {
              "computed": false,
              "end": 5,
              "object": {
                "end": 3,
                "name": "a",
                "range": [
                  2,
                  3,
                ],
                "start": 2,
                "type": "Identifier",
              },
              "optional": false,
              "property": {
                "end": 5,
                "name": "b",
                "range": [
                  4,
                  5,
                ],
                "start": 4,
                "type": "Identifier",
              },
              "range": [
                2,
                5,
              ],
              "start": 2,
              "type": "MemberExpression",
            },
          ],
          "end": 7,
          "range": [
            0,
            7,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Literal",
          "value": 0,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [...{a: b}.c] = [] 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "argument": {
                "computed": false,
                "object": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "a",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "name": "b",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectExpression",
                },
                "optional": false,
                "property": {
                  "name": "c",
                  "type": "Identifier",
                },
                "type": "MemberExpression",
              },
              "type": "RestElement",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "elements": [],
          "type": "ArrayExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [...{a}] = [{}] 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 15,
        "left": {
          "elements": [
            {
              "argument": {
                "end": 7,
                "properties": [
                  {
                    "computed": false,
                    "end": 6,
                    "key": {
                      "end": 6,
                      "name": "a",
                      "range": [
                        5,
                        6,
                      ],
                      "start": 5,
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "range": [
                      5,
                      6,
                    ],
                    "shorthand": true,
                    "start": 5,
                    "type": "Property",
                    "value": {
                      "end": 6,
                      "name": "a",
                      "range": [
                        5,
                        6,
                      ],
                      "start": 5,
                      "type": "Identifier",
                    },
                  },
                ],
                "range": [
                  4,
                  7,
                ],
                "start": 4,
                "type": "ObjectPattern",
              },
              "end": 7,
              "range": [
                1,
                7,
              ],
              "start": 1,
              "type": "RestElement",
            },
          ],
          "end": 8,
          "range": [
            0,
            8,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          15,
        ],
        "right": {
          "elements": [
            {
              "end": 14,
              "properties": [],
              "range": [
                12,
                14,
              ],
              "start": 12,
              "type": "ObjectExpression",
            },
          ],
          "end": 15,
          "range": [
            11,
            15,
          ],
          "start": 11,
          "type": "ArrayExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [...z = 1] 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "elements": [
          {
            "argument": {
              "end": 9,
              "left": {
                "end": 5,
                "name": "z",
                "range": [
                  4,
                  5,
                ],
                "start": 4,
                "type": "Identifier",
              },
              "operator": "=",
              "range": [
                4,
                9,
              ],
              "right": {
                "end": 9,
                "range": [
                  8,
                  9,
                ],
                "start": 8,
                "type": "Literal",
                "value": 1,
              },
              "start": 4,
              "type": "AssignmentExpression",
            },
            "end": 9,
            "range": [
              1,
              9,
            ],
            "start": 1,
            "type": "SpreadElement",
          },
        ],
        "end": 10,
        "range": [
          0,
          10,
        ],
        "start": 0,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [{x: y.z}] = a 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "computed": false,
                    "object": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "name": "z",
                      "type": "Identifier",
                    },
                    "type": "MemberExpression",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "name": "a",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [{x: y.z}] 1`] = `
{
  "body": [
    {
      "expression": {
        "elements": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "computed": false,
                  "object": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "optional": false,
                  "property": {
                    "name": "z",
                    "type": "Identifier",
                  },
                  "type": "MemberExpression",
                },
              },
            ],
            "type": "ObjectExpression",
          },
        ],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {}; 1`] = `
{
  "body": [
    {
      "end": 49,
      "expression": {
        "end": 48,
        "left": {
          "elements": [
            {
              "end": 19,
              "properties": [
                {
                  "computed": false,
                  "end": 9,
                  "key": {
                    "end": 3,
                    "name": "x",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    2,
                    9,
                  ],
                  "shorthand": false,
                  "start": 2,
                  "type": "Property",
                  "value": {
                    "end": 9,
                    "left": {
                      "end": 5,
                      "name": "x",
                      "range": [
                        4,
                        5,
                      ],
                      "start": 4,
                      "type": "Identifier",
                    },
                    "range": [
                      4,
                      9,
                    ],
                    "right": {
                      "end": 9,
                      "range": [
                        8,
                        9,
                      ],
                      "raw": "1",
                      "start": 8,
                      "type": "Literal",
                      "value": 1,
                    },
                    "start": 4,
                    "type": "AssignmentPattern",
                  },
                },
                {
                  "computed": false,
                  "end": 18,
                  "key": {
                    "end": 12,
                    "name": "y",
                    "range": [
                      11,
                      12,
                    ],
                    "start": 11,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    11,
                    18,
                  ],
                  "shorthand": false,
                  "start": 11,
                  "type": "Property",
                  "value": {
                    "end": 18,
                    "left": {
                      "end": 14,
                      "name": "y",
                      "range": [
                        13,
                        14,
                      ],
                      "start": 13,
                      "type": "Identifier",
                    },
                    "range": [
                      13,
                      18,
                    ],
                    "right": {
                      "end": 18,
                      "range": [
                        17,
                        18,
                      ],
                      "raw": "2",
                      "start": 17,
                      "type": "Literal",
                      "value": 2,
                    },
                    "start": 13,
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "range": [
                1,
                19,
              ],
              "start": 1,
              "type": "ObjectPattern",
            },
            {
              "elements": [
                {
                  "end": 27,
                  "left": {
                    "end": 23,
                    "name": "a",
                    "range": [
                      22,
                      23,
                    ],
                    "start": 22,
                    "type": "Identifier",
                  },
                  "range": [
                    22,
                    27,
                  ],
                  "right": {
                    "end": 27,
                    "range": [
                      26,
                      27,
                    ],
                    "raw": "3",
                    "start": 26,
                    "type": "Literal",
                    "value": 3,
                  },
                  "start": 22,
                  "type": "AssignmentPattern",
                },
                {
                  "end": 34,
                  "left": {
                    "end": 30,
                    "name": "b",
                    "range": [
                      29,
                      30,
                    ],
                    "start": 29,
                    "type": "Identifier",
                  },
                  "range": [
                    29,
                    34,
                  ],
                  "right": {
                    "end": 34,
                    "range": [
                      33,
                      34,
                    ],
                    "raw": "4",
                    "start": 33,
                    "type": "Literal",
                    "value": 4,
                  },
                  "start": 29,
                  "type": "AssignmentPattern",
                },
                {
                  "end": 41,
                  "left": {
                    "end": 37,
                    "name": "c",
                    "range": [
                      36,
                      37,
                    ],
                    "start": 36,
                    "type": "Identifier",
                  },
                  "range": [
                    36,
                    41,
                  ],
                  "right": {
                    "end": 41,
                    "range": [
                      40,
                      41,
                    ],
                    "raw": "5",
                    "start": 40,
                    "type": "Literal",
                    "value": 5,
                  },
                  "start": 36,
                  "type": "AssignmentPattern",
                },
              ],
              "end": 42,
              "range": [
                21,
                42,
              ],
              "start": 21,
              "type": "ArrayPattern",
            },
          ],
          "end": 43,
          "range": [
            0,
            43,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          48,
        ],
        "right": {
          "end": 48,
          "properties": [],
          "range": [
            46,
            48,
          ],
          "start": 46,
          "type": "ObjectExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        49,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 49,
  "range": [
    0,
    49,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [{x:x, y:y}, [a,b,c]] 1`] = `
{
  "body": [
    {
      "end": 21,
      "expression": {
        "elements": [
          {
            "end": 11,
            "properties": [
              {
                "computed": false,
                "end": 5,
                "key": {
                  "end": 3,
                  "name": "x",
                  "range": [
                    2,
                    3,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  2,
                  5,
                ],
                "shorthand": false,
                "start": 2,
                "type": "Property",
                "value": {
                  "end": 5,
                  "name": "x",
                  "range": [
                    4,
                    5,
                  ],
                  "start": 4,
                  "type": "Identifier",
                },
              },
              {
                "computed": false,
                "end": 10,
                "key": {
                  "end": 8,
                  "name": "y",
                  "range": [
                    7,
                    8,
                  ],
                  "start": 7,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  7,
                  10,
                ],
                "shorthand": false,
                "start": 7,
                "type": "Property",
                "value": {
                  "end": 10,
                  "name": "y",
                  "range": [
                    9,
                    10,
                  ],
                  "start": 9,
                  "type": "Identifier",
                },
              },
            ],
            "range": [
              1,
              11,
            ],
            "start": 1,
            "type": "ObjectExpression",
          },
          {
            "elements": [
              {
                "end": 15,
                "name": "a",
                "range": [
                  14,
                  15,
                ],
                "start": 14,
                "type": "Identifier",
              },
              {
                "end": 17,
                "name": "b",
                "range": [
                  16,
                  17,
                ],
                "start": 16,
                "type": "Identifier",
              },
              {
                "end": 19,
                "name": "c",
                "range": [
                  18,
                  19,
                ],
                "start": 18,
                "type": "Identifier",
              },
            ],
            "end": 20,
            "range": [
              13,
              20,
            ],
            "start": 13,
            "type": "ArrayExpression",
          },
        ],
        "end": 21,
        "range": [
          0,
          21,
        ],
        "start": 0,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        21,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 21,
  "range": [
    0,
    21,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [a, b] = [1, 2] 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "a",
              "type": "Identifier",
            },
            {
              "name": "b",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "elements": [
            {
              "type": "Literal",
              "value": 1,
            },
            {
              "type": "Literal",
              "value": 2,
            },
          ],
          "type": "ArrayExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [x, {y = 1}] = [0, {}] 1`] = `
{
  "body": [
    {
      "end": 22,
      "expression": {
        "end": 22,
        "left": {
          "elements": [
            {
              "end": 2,
              "name": "x",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            {
              "end": 11,
              "properties": [
                {
                  "computed": false,
                  "end": 10,
                  "key": {
                    "end": 6,
                    "name": "y",
                    "range": [
                      5,
                      6,
                    ],
                    "start": 5,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    5,
                    10,
                  ],
                  "shorthand": true,
                  "start": 5,
                  "type": "Property",
                  "value": {
                    "end": 10,
                    "left": {
                      "end": 6,
                      "name": "y",
                      "range": [
                        5,
                        6,
                      ],
                      "start": 5,
                      "type": "Identifier",
                    },
                    "range": [
                      5,
                      10,
                    ],
                    "right": {
                      "end": 10,
                      "range": [
                        9,
                        10,
                      ],
                      "start": 9,
                      "type": "Literal",
                      "value": 1,
                    },
                    "start": 5,
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "range": [
                4,
                11,
              ],
              "start": 4,
              "type": "ObjectPattern",
            },
          ],
          "end": 12,
          "range": [
            0,
            12,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          22,
        ],
        "right": {
          "elements": [
            {
              "end": 17,
              "range": [
                16,
                17,
              ],
              "start": 16,
              "type": "Literal",
              "value": 0,
            },
            {
              "end": 21,
              "properties": [],
              "range": [
                19,
                21,
              ],
              "start": 19,
              "type": "ObjectExpression",
            },
          ],
          "end": 22,
          "range": [
            15,
            22,
          ],
          "start": 15,
          "type": "ArrayExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [x, {y = 1}] = [0, {}] 2`] = `
{
  "body": [
    {
      "end": 22,
      "expression": {
        "end": 22,
        "left": {
          "elements": [
            {
              "end": 2,
              "name": "x",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            {
              "end": 11,
              "properties": [
                {
                  "computed": false,
                  "end": 10,
                  "key": {
                    "end": 6,
                    "name": "y",
                    "range": [
                      5,
                      6,
                    ],
                    "start": 5,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    5,
                    10,
                  ],
                  "shorthand": true,
                  "start": 5,
                  "type": "Property",
                  "value": {
                    "end": 10,
                    "left": {
                      "end": 6,
                      "name": "y",
                      "range": [
                        5,
                        6,
                      ],
                      "start": 5,
                      "type": "Identifier",
                    },
                    "range": [
                      5,
                      10,
                    ],
                    "right": {
                      "end": 10,
                      "range": [
                        9,
                        10,
                      ],
                      "start": 9,
                      "type": "Literal",
                      "value": 1,
                    },
                    "start": 5,
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "range": [
                4,
                11,
              ],
              "start": 4,
              "type": "ObjectPattern",
            },
          ],
          "end": 12,
          "range": [
            0,
            12,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          22,
        ],
        "right": {
          "elements": [
            {
              "end": 17,
              "range": [
                16,
                17,
              ],
              "start": 16,
              "type": "Literal",
              "value": 0,
            },
            {
              "end": 21,
              "properties": [],
              "range": [
                19,
                21,
              ],
              "start": 19,
              "type": "ObjectExpression",
            },
          ],
          "end": 22,
          "range": [
            15,
            22,
          ],
          "start": 15,
          "type": "ArrayExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [x, y] = z; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "name": "x",
              "type": "Identifier",
            },
            {
              "name": "y",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "name": "z",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > [x.a=a] = 0 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 11,
        "left": {
          "elements": [
            {
              "end": 6,
              "left": {
                "computed": false,
                "end": 4,
                "object": {
                  "end": 2,
                  "name": "x",
                  "range": [
                    1,
                    2,
                  ],
                  "start": 1,
                  "type": "Identifier",
                },
                "optional": false,
                "property": {
                  "end": 4,
                  "name": "a",
                  "range": [
                    3,
                    4,
                  ],
                  "start": 3,
                  "type": "Identifier",
                },
                "range": [
                  1,
                  4,
                ],
                "start": 1,
                "type": "MemberExpression",
              },
              "range": [
                1,
                6,
              ],
              "right": {
                "end": 6,
                "name": "a",
                "range": [
                  5,
                  6,
                ],
                "start": 5,
                "type": "Identifier",
              },
              "start": 1,
              "type": "AssignmentPattern",
            },
          ],
          "end": 7,
          "range": [
            0,
            7,
          ],
          "start": 0,
          "type": "ArrayPattern",
        },
        "operator": "=",
        "range": [
          0,
          11,
        ],
        "right": {
          "end": 11,
          "range": [
            10,
            11,
          ],
          "start": 10,
          "type": "Literal",
          "value": 0,
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > 4 + 5 << (6) 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "left": {
            "type": "Literal",
            "value": 4,
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "value": 5,
          },
          "type": "BinaryExpression",
        },
        "operator": "<<",
        "right": {
          "type": "Literal",
          "value": 6,
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > a0({}); 1`] = `
{
  "body": [
    {
      "end": 7,
      "expression": {
        "arguments": [
          {
            "end": 5,
            "properties": [],
            "range": [
              3,
              5,
            ],
            "start": 3,
            "type": "ObjectExpression",
          },
        ],
        "callee": {
          "end": 2,
          "name": "a0",
          "range": [
            0,
            2,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 6,
        "optional": false,
        "range": [
          0,
          6,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        7,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 7,
  "range": [
    0,
    7,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async (...x) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "name": "x",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async ({x=z}, y) => x; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "z",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async (foo = yield) => foo 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "foo",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "foo",
              "type": "Identifier",
            },
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async (foo = yield) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "left": {
              "name": "foo",
              "type": "Identifier",
            },
            "operator": "=",
            "right": {
              "name": "yield",
              "type": "Identifier",
            },
            "type": "AssignmentExpression",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async (yield) => foo 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "foo",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "yield",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async("foo".bar); 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "computed": false,
            "object": {
              "type": "Literal",
              "value": "foo",
            },
            "optional": false,
            "property": {
              "name": "bar",
              "type": "Identifier",
            },
            "type": "MemberExpression",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async("foo".bar); 2`] = `
{
  "body": [
    {
      "end": 17,
      "expression": {
        "arguments": [
          {
            "computed": false,
            "end": 15,
            "object": {
              "end": 11,
              "range": [
                6,
                11,
              ],
              "start": 6,
              "type": "Literal",
              "value": "foo",
            },
            "optional": false,
            "property": {
              "end": 15,
              "name": "bar",
              "range": [
                12,
                15,
              ],
              "start": 12,
              "type": "Identifier",
            },
            "range": [
              6,
              15,
            ],
            "start": 6,
            "type": "MemberExpression",
          },
        ],
        "callee": {
          "end": 5,
          "name": "async",
          "range": [
            0,
            5,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "end": 16,
        "optional": false,
        "range": [
          0,
          16,
        ],
        "start": 0,
        "type": "CallExpression",
      },
      "range": [
        0,
        17,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async(...{destruct}) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "destruct",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "destruct",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async(...ident) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "name": "ident",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async(a); 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "callee": {
          "name": "async",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > async(x) => y 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "name": "y",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > c = ({b} = b); 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "end": 13,
        "left": {
          "end": 1,
          "name": "c",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          13,
        ],
        "right": {
          "end": 12,
          "left": {
            "end": 8,
            "properties": [
              {
                "computed": false,
                "end": 7,
                "key": {
                  "end": 7,
                  "name": "b",
                  "range": [
                    6,
                    7,
                  ],
                  "start": 6,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  6,
                  7,
                ],
                "shorthand": true,
                "start": 6,
                "type": "Property",
                "value": {
                  "end": 7,
                  "name": "b",
                  "range": [
                    6,
                    7,
                  ],
                  "start": 6,
                  "type": "Identifier",
                },
              },
            ],
            "range": [
              5,
              8,
            ],
            "start": 5,
            "type": "ObjectPattern",
          },
          "operator": "=",
          "range": [
            5,
            12,
          ],
          "right": {
            "end": 12,
            "name": "b",
            "range": [
              11,
              12,
            ],
            "start": 11,
            "type": "Identifier",
          },
          "start": 5,
          "type": "AssignmentExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > delete ((foo) => foo) 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "async": false,
          "body": {
            "name": "foo",
            "type": "Identifier",
          },
          "expression": true,
          "generator": false,
          "params": [
            {
              "name": "foo",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "operator": "delete",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > f = ( {[x] : z} ) 1`] = `
{
  "body": [
    {
      "end": 17,
      "expression": {
        "end": 17,
        "left": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          17,
        ],
        "right": {
          "end": 15,
          "properties": [
            {
              "computed": true,
              "end": 14,
              "key": {
                "end": 9,
                "name": "x",
                "range": [
                  8,
                  9,
                ],
                "start": 8,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                7,
                14,
              ],
              "shorthand": false,
              "start": 7,
              "type": "Property",
              "value": {
                "end": 14,
                "name": "z",
                "range": [
                  13,
                  14,
                ],
                "start": 13,
                "type": "Identifier",
              },
            },
          ],
          "range": [
            6,
            15,
          ],
          "start": 6,
          "type": "ObjectExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        17,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > f = (argument1, [{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]]) 1`] = `
{
  "body": [
    {
      "end": 60,
      "expression": {
        "end": 60,
        "left": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          60,
        ],
        "right": {
          "end": 59,
          "expressions": [
            {
              "end": 14,
              "name": "argument1",
              "range": [
                5,
                14,
              ],
              "start": 5,
              "type": "Identifier",
            },
            {
              "elements": [
                {
                  "end": 35,
                  "properties": [
                    {
                      "computed": false,
                      "end": 25,
                      "key": {
                        "end": 19,
                        "name": "x",
                        "range": [
                          18,
                          19,
                        ],
                        "start": 18,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        18,
                        25,
                      ],
                      "shorthand": false,
                      "start": 18,
                      "type": "Property",
                      "value": {
                        "end": 25,
                        "left": {
                          "end": 21,
                          "name": "x",
                          "range": [
                            20,
                            21,
                          ],
                          "start": 20,
                          "type": "Identifier",
                        },
                        "operator": "=",
                        "range": [
                          20,
                          25,
                        ],
                        "right": {
                          "end": 25,
                          "range": [
                            24,
                            25,
                          ],
                          "raw": "1",
                          "start": 24,
                          "type": "Literal",
                          "value": 1,
                        },
                        "start": 20,
                        "type": "AssignmentExpression",
                      },
                    },
                    {
                      "computed": false,
                      "end": 34,
                      "key": {
                        "end": 28,
                        "name": "y",
                        "range": [
                          27,
                          28,
                        ],
                        "start": 27,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        27,
                        34,
                      ],
                      "shorthand": false,
                      "start": 27,
                      "type": "Property",
                      "value": {
                        "end": 34,
                        "left": {
                          "end": 30,
                          "name": "y",
                          "range": [
                            29,
                            30,
                          ],
                          "start": 29,
                          "type": "Identifier",
                        },
                        "operator": "=",
                        "range": [
                          29,
                          34,
                        ],
                        "right": {
                          "end": 34,
                          "range": [
                            33,
                            34,
                          ],
                          "raw": "2",
                          "start": 33,
                          "type": "Literal",
                          "value": 2,
                        },
                        "start": 29,
                        "type": "AssignmentExpression",
                      },
                    },
                  ],
                  "range": [
                    17,
                    35,
                  ],
                  "start": 17,
                  "type": "ObjectExpression",
                },
                {
                  "elements": [
                    {
                      "end": 43,
                      "left": {
                        "end": 39,
                        "name": "a",
                        "range": [
                          38,
                          39,
                        ],
                        "start": 38,
                        "type": "Identifier",
                      },
                      "operator": "=",
                      "range": [
                        38,
                        43,
                      ],
                      "right": {
                        "end": 43,
                        "range": [
                          42,
                          43,
                        ],
                        "raw": "3",
                        "start": 42,
                        "type": "Literal",
                        "value": 3,
                      },
                      "start": 38,
                      "type": "AssignmentExpression",
                    },
                    {
                      "end": 50,
                      "left": {
                        "end": 46,
                        "name": "b",
                        "range": [
                          45,
                          46,
                        ],
                        "start": 45,
                        "type": "Identifier",
                      },
                      "operator": "=",
                      "range": [
                        45,
                        50,
                      ],
                      "right": {
                        "end": 50,
                        "range": [
                          49,
                          50,
                        ],
                        "raw": "4",
                        "start": 49,
                        "type": "Literal",
                        "value": 4,
                      },
                      "start": 45,
                      "type": "AssignmentExpression",
                    },
                    {
                      "end": 57,
                      "left": {
                        "end": 53,
                        "name": "c",
                        "range": [
                          52,
                          53,
                        ],
                        "start": 52,
                        "type": "Identifier",
                      },
                      "operator": "=",
                      "range": [
                        52,
                        57,
                      ],
                      "right": {
                        "end": 57,
                        "range": [
                          56,
                          57,
                        ],
                        "raw": "5",
                        "start": 56,
                        "type": "Literal",
                        "value": 5,
                      },
                      "start": 52,
                      "type": "AssignmentExpression",
                    },
                  ],
                  "end": 58,
                  "range": [
                    37,
                    58,
                  ],
                  "start": 37,
                  "type": "ArrayExpression",
                },
              ],
              "end": 59,
              "range": [
                16,
                59,
              ],
              "start": 16,
              "type": "ArrayExpression",
            },
          ],
          "range": [
            5,
            59,
          ],
          "start": 5,
          "type": "SequenceExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        60,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 60,
  "range": [
    0,
    60,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > f = (argument1, [a,b,c]) 1`] = `
{
  "body": [
    {
      "end": 24,
      "expression": {
        "end": 24,
        "left": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          24,
        ],
        "right": {
          "end": 23,
          "expressions": [
            {
              "end": 14,
              "name": "argument1",
              "range": [
                5,
                14,
              ],
              "start": 5,
              "type": "Identifier",
            },
            {
              "elements": [
                {
                  "end": 18,
                  "name": "a",
                  "range": [
                    17,
                    18,
                  ],
                  "start": 17,
                  "type": "Identifier",
                },
                {
                  "end": 20,
                  "name": "b",
                  "range": [
                    19,
                    20,
                  ],
                  "start": 19,
                  "type": "Identifier",
                },
                {
                  "end": 22,
                  "name": "c",
                  "range": [
                    21,
                    22,
                  ],
                  "start": 21,
                  "type": "Identifier",
                },
              ],
              "end": 23,
              "range": [
                16,
                23,
              ],
              "start": 16,
              "type": "ArrayExpression",
            },
          ],
          "range": [
            5,
            23,
          ],
          "start": 5,
          "type": "SequenceExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        24,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 24,
  "range": [
    0,
    24,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > f = (argument1, { x : x, y : y = 42 }) 1`] = `
{
  "body": [
    {
      "end": 38,
      "expression": {
        "end": 38,
        "left": {
          "end": 1,
          "name": "f",
          "range": [
            0,
            1,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          38,
        ],
        "right": {
          "end": 37,
          "expressions": [
            {
              "end": 14,
              "name": "argument1",
              "range": [
                5,
                14,
              ],
              "start": 5,
              "type": "Identifier",
            },
            {
              "end": 37,
              "properties": [
                {
                  "computed": false,
                  "end": 23,
                  "key": {
                    "end": 19,
                    "name": "x",
                    "range": [
                      18,
                      19,
                    ],
                    "start": 18,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    18,
                    23,
                  ],
                  "shorthand": false,
                  "start": 18,
                  "type": "Property",
                  "value": {
                    "end": 23,
                    "name": "x",
                    "range": [
                      22,
                      23,
                    ],
                    "start": 22,
                    "type": "Identifier",
                  },
                },
                {
                  "computed": false,
                  "end": 35,
                  "key": {
                    "end": 26,
                    "name": "y",
                    "range": [
                      25,
                      26,
                    ],
                    "start": 25,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    25,
                    35,
                  ],
                  "shorthand": false,
                  "start": 25,
                  "type": "Property",
                  "value": {
                    "end": 35,
                    "left": {
                      "end": 30,
                      "name": "y",
                      "range": [
                        29,
                        30,
                      ],
                      "start": 29,
                      "type": "Identifier",
                    },
                    "operator": "=",
                    "range": [
                      29,
                      35,
                    ],
                    "right": {
                      "end": 35,
                      "range": [
                        33,
                        35,
                      ],
                      "start": 33,
                      "type": "Literal",
                      "value": 42,
                    },
                    "start": 29,
                    "type": "AssignmentExpression",
                  },
                },
              ],
              "range": [
                16,
                37,
              ],
              "start": 16,
              "type": "ObjectExpression",
            },
          ],
          "range": [
            5,
            37,
          ],
          "start": 5,
          "type": "SequenceExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        38,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 38,
  "range": [
    0,
    38,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > f(argument1, [...rest]) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "argument1",
            "type": "Identifier",
          },
          {
            "elements": [
              {
                "argument": {
                  "name": "rest",
                  "type": "Identifier",
                },
                "type": "SpreadElement",
              },
            ],
            "type": "ArrayExpression",
          },
        ],
        "callee": {
          "name": "f",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > function *f(){ async (foo = yield x) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "argument": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > function *f(){ async (foo = yield) } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "arguments": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "operator": "=",
                  "right": {
                    "argument": null,
                    "delegate": false,
                    "type": "YieldExpression",
                  },
                  "type": "AssignmentExpression",
                },
              ],
              "callee": {
                "name": "async",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": true,
      "id": {
        "name": "f",
        "type": "Identifier",
      },
      "params": [],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > function a(a = b += 1, c = d +=1) {} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [],
        "end": 36,
        "range": [
          34,
          36,
        ],
        "start": 34,
        "type": "BlockStatement",
      },
      "end": 36,
      "generator": false,
      "id": {
        "end": 10,
        "name": "a",
        "range": [
          9,
          10,
        ],
        "start": 9,
        "type": "Identifier",
      },
      "params": [
        {
          "end": 21,
          "left": {
            "end": 12,
            "name": "a",
            "range": [
              11,
              12,
            ],
            "start": 11,
            "type": "Identifier",
          },
          "range": [
            11,
            21,
          ],
          "right": {
            "end": 21,
            "left": {
              "end": 16,
              "name": "b",
              "range": [
                15,
                16,
              ],
              "start": 15,
              "type": "Identifier",
            },
            "operator": "+=",
            "range": [
              15,
              21,
            ],
            "right": {
              "end": 21,
              "range": [
                20,
                21,
              ],
              "start": 20,
              "type": "Literal",
              "value": 1,
            },
            "start": 15,
            "type": "AssignmentExpression",
          },
          "start": 11,
          "type": "AssignmentPattern",
        },
        {
          "end": 32,
          "left": {
            "end": 24,
            "name": "c",
            "range": [
              23,
              24,
            ],
            "start": 23,
            "type": "Identifier",
          },
          "range": [
            23,
            32,
          ],
          "right": {
            "end": 32,
            "left": {
              "end": 28,
              "name": "d",
              "range": [
                27,
                28,
              ],
              "start": 27,
              "type": "Identifier",
            },
            "operator": "+=",
            "range": [
              27,
              32,
            ],
            "right": {
              "end": 32,
              "range": [
                31,
                32,
              ],
              "start": 31,
              "type": "Literal",
              "value": 1,
            },
            "start": 27,
            "type": "AssignmentExpression",
          },
          "start": 23,
          "type": "AssignmentPattern",
        },
      ],
      "range": [
        0,
        36,
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
  ],
  "end": 36,
  "range": [
    0,
    36,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > function x([ a, b ]){} 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "x",
        "type": "Identifier",
      },
      "params": [
        {
          "elements": [
            {
              "name": "a",
              "type": "Identifier",
            },
            {
              "name": "b",
              "type": "Identifier",
            },
          ],
          "type": "ArrayPattern",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > new c(x)(y) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "callee": {
          "arguments": [
            {
              "name": "x",
              "type": "Identifier",
            },
          ],
          "callee": {
            "name": "c",
            "type": "Identifier",
          },
          "type": "NewExpression",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > test = { a: 1 } 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 15,
        "left": {
          "end": 4,
          "name": "test",
          "range": [
            0,
            4,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          15,
        ],
        "right": {
          "end": 15,
          "properties": [
            {
              "computed": false,
              "end": 13,
              "key": {
                "end": 10,
                "name": "a",
                "range": [
                  9,
                  10,
                ],
                "start": 9,
                "type": "Identifier",
              },
              "kind": "init",
              "method": false,
              "range": [
                9,
                13,
              ],
              "shorthand": false,
              "start": 9,
              "type": "Property",
              "value": {
                "end": 13,
                "range": [
                  12,
                  13,
                ],
                "start": 12,
                "type": "Literal",
                "value": 1,
              },
            },
          ],
          "range": [
            7,
            15,
          ],
          "start": 7,
          "type": "ObjectExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > var a;
(a) = {};
(a.b) = {};
(a['c']) = {}; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 5,
          "id": {
            "end": 5,
            "name": "a",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "init": null,
          "range": [
            4,
            5,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 6,
      "kind": "var",
      "range": [
        0,
        6,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
    {
      "end": 16,
      "expression": {
        "end": 15,
        "left": {
          "end": 9,
          "name": "a",
          "range": [
            8,
            9,
          ],
          "start": 8,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          7,
          15,
        ],
        "right": {
          "end": 15,
          "properties": [],
          "range": [
            13,
            15,
          ],
          "start": 13,
          "type": "ObjectExpression",
        },
        "start": 7,
        "type": "AssignmentExpression",
      },
      "range": [
        7,
        16,
      ],
      "start": 7,
      "type": "ExpressionStatement",
    },
    {
      "end": 28,
      "expression": {
        "end": 27,
        "left": {
          "computed": false,
          "end": 21,
          "object": {
            "end": 19,
            "name": "a",
            "range": [
              18,
              19,
            ],
            "start": 18,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 21,
            "name": "b",
            "range": [
              20,
              21,
            ],
            "start": 20,
            "type": "Identifier",
          },
          "range": [
            18,
            21,
          ],
          "start": 18,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          17,
          27,
        ],
        "right": {
          "end": 27,
          "properties": [],
          "range": [
            25,
            27,
          ],
          "start": 25,
          "type": "ObjectExpression",
        },
        "start": 17,
        "type": "AssignmentExpression",
      },
      "range": [
        17,
        28,
      ],
      "start": 17,
      "type": "ExpressionStatement",
    },
    {
      "end": 43,
      "expression": {
        "end": 42,
        "left": {
          "computed": true,
          "end": 36,
          "object": {
            "end": 31,
            "name": "a",
            "range": [
              30,
              31,
            ],
            "start": 30,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 35,
            "range": [
              32,
              35,
            ],
            "start": 32,
            "type": "Literal",
            "value": "c",
          },
          "range": [
            30,
            36,
          ],
          "start": 30,
          "type": "MemberExpression",
        },
        "operator": "=",
        "range": [
          29,
          42,
        ],
        "right": {
          "end": 42,
          "properties": [],
          "range": [
            40,
            42,
          ],
          "start": 40,
          "type": "ObjectExpression",
        },
        "start": 29,
        "type": "AssignmentExpression",
      },
      "range": [
        29,
        43,
      ],
      "start": 29,
      "type": "ExpressionStatement",
    },
  ],
  "end": 43,
  "range": [
    0,
    43,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > void (a) 1`] = `
{
  "body": [
    {
      "expression": {
        "argument": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "void",
        "prefix": true,
        "type": "UnaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Group > Expressions - Group (pass) > x=x=x 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "x",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "=",
          "right": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
