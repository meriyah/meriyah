// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Expressions - Rest > Expressions - Rest (fail) > (...rest = ...NaN) => {}; 1`] = `
"SyntaxError [1:11-1:14]: Unexpected token: '...'
> 1 | (...rest = ...NaN) => {};
    |            ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > (a = (...NaN), ...b = [...[1,2,3]], rest) => {}; 1`] = `
"SyntaxError [1:13-1:14]: Expected '=>'
> 1 | (a = (...NaN), ...b = [...[1,2,3]], rest) => {};
    |              ^ Expected '=>'"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > (a = ...NaN, b = [...[1,2,3]], ...rest) => {}; 1`] = `
"SyntaxError [1:5-1:8]: Unexpected token: '...'
> 1 | (a = ...NaN, b = [...[1,2,3]], ...rest) => {};
    |      ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > (a = [...NaN], ...b = [...[1,2,3]], rest) => {}; 1`] = `
"SyntaxError [1:34-1:35]: Invalid rest argument
> 1 | (a = [...NaN], ...b = [...[1,2,3]], rest) => {};
    |                                   ^ Invalid rest argument"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > (a, ...b, ...rest) => {}; 1`] = `
"SyntaxError [1:8-1:9]: Invalid rest argument
> 1 | (a, ...b, ...rest) => {};
    |         ^ Invalid rest argument"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > [...x, y] = [1,2,3]; 1`] = `
"SyntaxError [1:12-1:13]: Invalid left-hand side in assignment
> 1 | [...x, y] = [1,2,3];
    |             ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > [...x,] = [1,2,3]; 1`] = `
"SyntaxError [1:10-1:11]: Invalid left-hand side in assignment
> 1 | [...x,] = [1,2,3];
    |           ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function f(a, ...[b]) { "use strict"; } 1`] = `
"SyntaxError [1:24-1:37]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | function f(a, ...[b]) { "use strict"; }
    |                         ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function f(a, ...b) { "use strict"; } 1`] = `
"SyntaxError [1:22-1:35]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | function f(a, ...b) { "use strict"; }
    |                       ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function foo(...[a], ...b) {} 1`] = `
"SyntaxError [1:19-1:20]: The binding declaration is not destructible
> 1 | function foo(...[a], ...b) {}
    |                    ^ The binding declaration is not destructible"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function foo(...[a],) {} 1`] = `
"SyntaxError [1:19-1:20]: The binding declaration is not destructible
> 1 | function foo(...[a],) {}
    |                    ^ The binding declaration is not destructible"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function foo(...a, ...[b]) {} 1`] = `
"SyntaxError [1:17-1:18]: The binding declaration is not destructible
> 1 | function foo(...a, ...[b]) {}
    |                  ^ The binding declaration is not destructible"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function foo(a, ...[b], c) => {} 1`] = `
"SyntaxError [1:22-1:23]: The binding declaration is not destructible
> 1 | function foo(a, ...[b], c) => {}
    |                       ^ The binding declaration is not destructible"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > function foo(a, ...b, c) => {} 1`] = `
"SyntaxError [1:20-1:21]: The binding declaration is not destructible
> 1 | function foo(a, ...b, c) => {}
    |                     ^ The binding declaration is not destructible"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > var obj = class { method(a, b = 1, ...c = [2,3]) {} }; 1`] = `
"SyntaxError [1:47-1:48]: The binding declaration is not destructible
> 1 | var obj = class { method(a, b = 1, ...c = [2,3]) {} };
    |                                                ^ The binding declaration is not destructible"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > var x = { set setter(...[x]) {} } 1`] = `
"SyntaxError [1:21-1:24]: Setter function argument must not be a rest parameter
> 1 | var x = { set setter(...[x]) {} }
    |                      ^^^ Setter function argument must not be a rest parameter"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > var x = class { set setter(...[x]) {} } 1`] = `
"SyntaxError [1:27-1:30]: Setter function argument must not be a rest parameter
> 1 | var x = class { set setter(...[x]) {} }
    |                            ^^^ Setter function argument must not be a rest parameter"
`;

exports[`Expressions - Rest > Expressions - Rest (fail) > var x = class { set setter(...x) {} } 1`] = `
"SyntaxError [1:27-1:30]: Setter function argument must not be a rest parameter
> 1 | var x = class { set setter(...x) {} }
    |                            ^^^ Setter function argument must not be a rest parameter"
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > class restClass { method(a, b, c, ...[d]) { arguments; return [a, b, c, d]; } }; 1`] = `
{
  "body": [
    {
      "body": {
        "body": [
          {
            "computed": false,
            "key": {
              "name": "method",
              "type": "Identifier",
            },
            "kind": "method",
            "static": false,
            "type": "MethodDefinition",
            "value": {
              "async": false,
              "body": {
                "body": [
                  {
                    "expression": {
                      "name": "arguments",
                      "type": "Identifier",
                    },
                    "type": "ExpressionStatement",
                  },
                  {
                    "argument": {
                      "elements": [
                        {
                          "name": "a",
                          "type": "Identifier",
                        },
                        {
                          "name": "b",
                          "type": "Identifier",
                        },
                        {
                          "name": "c",
                          "type": "Identifier",
                        },
                        {
                          "name": "d",
                          "type": "Identifier",
                        },
                      ],
                      "type": "ArrayExpression",
                    },
                    "type": "ReturnStatement",
                  },
                ],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": null,
              "params": [
                {
                  "name": "a",
                  "type": "Identifier",
                },
                {
                  "name": "b",
                  "type": "Identifier",
                },
                {
                  "name": "c",
                  "type": "Identifier",
                },
                {
                  "argument": {
                    "elements": [
                      {
                        "name": "d",
                        "type": "Identifier",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "FunctionExpression",
            },
          },
        ],
        "type": "ClassBody",
      },
      "id": {
        "name": "restClass",
        "type": "Identifier",
      },
      "superClass": null,
      "type": "ClassDeclaration",
    },
    {
      "type": "EmptyStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > function foo(a, b, c, ...[d]) { arguments; return [a, b, c, d]; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "name": "arguments",
              "type": "Identifier",
            },
            "type": "ExpressionStatement",
          },
          {
            "argument": {
              "elements": [
                {
                  "name": "a",
                  "type": "Identifier",
                },
                {
                  "name": "b",
                  "type": "Identifier",
                },
                {
                  "name": "c",
                  "type": "Identifier",
                },
                {
                  "name": "d",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "foo",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "a",
          "type": "Identifier",
        },
        {
          "name": "b",
          "type": "Identifier",
        },
        {
          "name": "c",
          "type": "Identifier",
        },
        {
          "argument": {
            "elements": [
              {
                "name": "d",
                "type": "Identifier",
              },
            ],
            "type": "ArrayPattern",
          },
          "type": "RestElement",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > function fooInline(a, b, c, ...rest) { arguments; this; return [a, b, c, ...rest]; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "expression": {
              "name": "arguments",
              "type": "Identifier",
            },
            "type": "ExpressionStatement",
          },
          {
            "expression": {
              "type": "ThisExpression",
            },
            "type": "ExpressionStatement",
          },
          {
            "argument": {
              "elements": [
                {
                  "name": "a",
                  "type": "Identifier",
                },
                {
                  "name": "b",
                  "type": "Identifier",
                },
                {
                  "name": "c",
                  "type": "Identifier",
                },
                {
                  "argument": {
                    "name": "rest",
                    "type": "Identifier",
                  },
                  "type": "SpreadElement",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "fooInline",
        "type": "Identifier",
      },
      "params": [
        {
          "name": "a",
          "type": "Identifier",
        },
        {
          "name": "b",
          "type": "Identifier",
        },
        {
          "name": "c",
          "type": "Identifier",
        },
        {
          "argument": {
            "name": "rest",
            "type": "Identifier",
          },
          "type": "RestElement",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > function objRest(...{'0': a, '1': b, length}) { return [a, b, length]; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "elements": [
                {
                  "name": "a",
                  "type": "Identifier",
                },
                {
                  "name": "b",
                  "type": "Identifier",
                },
                {
                  "name": "length",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayExpression",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "objRest",
        "type": "Identifier",
      },
      "params": [
        {
          "argument": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "type": "Literal",
                  "value": "0",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "a",
                  "type": "Identifier",
                },
              },
              {
                "computed": false,
                "key": {
                  "type": "Literal",
                  "value": "1",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "b",
                  "type": "Identifier",
                },
              },
              {
                "computed": false,
                "key": {
                  "name": "length",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "length",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "type": "RestElement",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > function singleRest(...[d]) { return d; } 1`] = `
{
  "body": [
    {
      "async": false,
      "body": {
        "body": [
          {
            "argument": {
              "name": "d",
              "type": "Identifier",
            },
            "type": "ReturnStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "generator": false,
      "id": {
        "name": "singleRest",
        "type": "Identifier",
      },
      "params": [
        {
          "argument": {
            "elements": [
              {
                "name": "d",
                "type": "Identifier",
              },
            ],
            "type": "ArrayPattern",
          },
          "type": "RestElement",
        },
      ],
      "type": "FunctionDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > var func5 = function (...[argArr13]) { function foo() { eval(); } }; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "func5",
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "body": [
                {
                  "async": false,
                  "body": {
                    "body": [
                      {
                        "expression": {
                          "arguments": [],
                          "callee": {
                            "name": "eval",
                            "type": "Identifier",
                          },
                          "optional": false,
                          "type": "CallExpression",
                        },
                        "type": "ExpressionStatement",
                      },
                    ],
                    "type": "BlockStatement",
                  },
                  "generator": false,
                  "id": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "params": [],
                  "type": "FunctionDeclaration",
                },
              ],
              "type": "BlockStatement",
            },
            "generator": false,
            "id": null,
            "params": [
              {
                "argument": {
                  "elements": [
                    {
                      "name": "argArr13",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrayPattern",
                },
                "type": "RestElement",
              },
            ],
            "type": "FunctionExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Rest > Expressions - Rest (pass) > var obj = { method(a, b, c, ...[d]) { return [a, b, c, d]; } }; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "obj",
            "type": "Identifier",
          },
          "init": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "method",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": true,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "async": false,
                  "body": {
                    "body": [
                      {
                        "argument": {
                          "elements": [
                            {
                              "name": "a",
                              "type": "Identifier",
                            },
                            {
                              "name": "b",
                              "type": "Identifier",
                            },
                            {
                              "name": "c",
                              "type": "Identifier",
                            },
                            {
                              "name": "d",
                              "type": "Identifier",
                            },
                          ],
                          "type": "ArrayExpression",
                        },
                        "type": "ReturnStatement",
                      },
                    ],
                    "type": "BlockStatement",
                  },
                  "generator": false,
                  "id": null,
                  "params": [
                    {
                      "name": "a",
                      "type": "Identifier",
                    },
                    {
                      "name": "b",
                      "type": "Identifier",
                    },
                    {
                      "name": "c",
                      "type": "Identifier",
                    },
                    {
                      "argument": {
                        "elements": [
                          {
                            "name": "d",
                            "type": "Identifier",
                          },
                        ],
                        "type": "ArrayPattern",
                      },
                      "type": "RestElement",
                    },
                  ],
                  "type": "FunctionExpression",
                },
              },
            ],
            "type": "ObjectExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
