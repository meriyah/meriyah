// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Expressions - Arrow > Expressions - Array (fail) > !()=>{} 1`] = `
"SyntaxError [1:3-1:5]: \`=>\` is an invalid assignment target
> 1 | !()=>{}
    |    ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > "a" => {} 1`] = `
"SyntaxError [1:4-1:6]: Unexpected token: '=>'
> 1 | "a" => {}
    |     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > "use strict"; (a) => 00; 1`] = `
"SyntaxError [1:21-1:22]: Octal escape sequences are not allowed in strict mode
> 1 | "use strict"; (a) => 00;
    |                      ^ Octal escape sequences are not allowed in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > "use strict"; let => {} 1`] = `
"SyntaxError [1:18-1:20]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | "use strict"; let => {}
    |                   ^^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ("a") => {} 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | ("a") => {}
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ("a", b) => {} 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | ("a", b) => {}
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ("a", b) => {} 2`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | ("a", b) => {}
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (()) => 0 1`] = `
"SyntaxError [1:3-1:4]: Expected '=>'
> 1 | (()) => 0
    |    ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (()) => 0 2`] = `
"SyntaxError [1:3-1:4]: Expected '=>'
> 1 | (()) => 0
    |    ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((a)
=> a)(1) 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | ((a)
> 2 | => a)(1)
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((a)/*
*/=> a)(1) 1`] = `
"SyntaxError [2:2-2:4]: No line break is allowed after '=>'
  1 | ((a)/*
> 2 | */=> a)(1)
    |   ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((a, b)
=> a + b)(1, 2) 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | ((a, b)
> 2 | => a + b)(1, 2)
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((a, b)/*
*/=> a + b)(1, 2) 1`] = `
"SyntaxError [2:2-2:4]: No line break is allowed after '=>'
  1 | ((a, b)/*
> 2 | */=> a + b)(1, 2)
    |   ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x)) => 0 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | ((x)) => 0
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x)) => a 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | ((x)) => a
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y)) => 0 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | ((x, y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y)) => 0 2`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | ((x, y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y)) => 0 3`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | ((x, y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y), z) =>  a 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y), z) =>  a
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y), z) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y), z) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y), z) => 0 2`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y), z) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y, z)) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y, z)) => 0 2`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y, z)) => 0 3`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, y, z)) => 0 4`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | ((x, y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ((x, z) => y) = {} 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | ((x, z) => y) = {}
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () <= 0 1`] = `
"SyntaxError [1:3-1:5]: Expected '=>'
> 1 | () <= 0
    |    ^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => { let [] } 1`] = `
"SyntaxError [1:15-1:16]: Missing initializer in destructuring declaration
> 1 | () => { let [] }
    |                ^ Missing initializer in destructuring declaration"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => { let [x] } 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in destructuring declaration
> 1 | () => { let [x] }
    |                 ^ Missing initializer in destructuring declaration"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => {"value": 42} 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ':'
> 1 | () => {"value": 42}
    |               ^ Unexpected token: ':'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => {'value': 42} 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: ':'
> 1 | () => {'value': 42}
    |               ^ Unexpected token: ':'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => {} 1 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: 'number'
> 1 | () => {} 1
    |          ^ Unexpected token: 'number'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => {} 1 2`] = `
"SyntaxError [1:9-1:10]: Unexpected token: 'number'
> 1 | () => {} 1
    |          ^ Unexpected token: 'number'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => {} a 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: 'identifier'
> 1 | () => {} a
    |          ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => {} a() 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: 'identifier'
> 1 | () => {} a()
    |          ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () => 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: 'end of source'
> 1 | () =>
    |    ^^ Unexpected token: 'end of source'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > () ? 0 1`] = `
"SyntaxError [1:3-1:4]: Expected '=>'
> 1 | () ? 0
    |    ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=>{}
++x 1`] = `
"SyntaxError [2:0-2:2]: An arrow function can not have a postfix update operator
  1 | ()=>{}
> 2 | ++x
    | ^^ An arrow function can not have a postfix update operator"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=>{}
--x 1`] = `
"SyntaxError [2:0-2:2]: An arrow function can not have a postfix update operator
  1 | ()=>{}
> 2 | --x
    | ^^ An arrow function can not have a postfix update operator"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=>{}++ 1`] = `
"SyntaxError [1:6-1:8]: An arrow function can not have a postfix update operator
> 1 | ()=>{}++
    |       ^^ An arrow function can not have a postfix update operator"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=>{}+a 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: '+'
> 1 | ()=>{}+a
    |       ^ Unexpected token: '+'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=>{}-- 1`] = `
"SyntaxError [1:6-1:8]: An arrow function can not have a postfix update operator
> 1 | ()=>{}--
    |       ^^ An arrow function can not have a postfix update operator"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=c=>{}=>{} 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()=c=>{}=>{}
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()=c=>{}=>{}; 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()=c=>{}=>{};
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()?c:d=>{}=>{} 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()?c:d=>{}=>{}
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()?c:d=>{}=>{}; 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()?c:d=>{}=>{};
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()[1]=>{} 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()[1]=>{}
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()\`template-head\${c}template-tail\`=>{} 1`] = `
"SyntaxError [1:2-1:18]: Expected '=>'
> 1 | ()\`template-head\${c}template-tail\`=>{}
    |   ^^^^^^^^^^^^^^^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()-c=>{} 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()-c=>{}
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ()c++=>{} 1`] = `
"SyntaxError [1:2-1:3]: Expected '=>'
> 1 | ()c++=>{}
    |   ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a = b) => b 1`] = `
"SyntaxError [1:9-1:10]: Invalid rest argument
> 1 | (...a = b) => b
    |          ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a = b) => b 2`] = `
"SyntaxError [1:9-1:10]: Invalid rest argument
> 1 | (...a = b) => b
    |          ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a = b) => b 3`] = `
"SyntaxError [1:9-1:10]: Invalid rest argument
> 1 | (...a = b) => b
    |          ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a => 42) 1`] = `
"SyntaxError [1:11-1:12]: Invalid rest argument
> 1 | (...a => 42)
    |            ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a)?c:d=>{}=>{}; 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | (...a)?c:d=>{}=>{};
    |       ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a)\`c\`=>{} 1`] = `
"SyntaxError [1:6-1:9]: Expected '=>'
> 1 | (...a)\`c\`=>{}
    |       ^^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a)\`template-head\${c}\`=>{} 1`] = `
"SyntaxError [1:6-1:22]: Expected '=>'
> 1 | (...a)\`template-head\${c}\`=>{}
    |       ^^^^^^^^^^^^^^^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a)-c=>{}; 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | (...a)-c=>{};
    |       ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a, ...b) => {} 1`] = `
"SyntaxError [1:5-1:6]: Invalid rest argument
> 1 | (...a, ...b) => {}
    |      ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...a, ...b) => {} 2`] = `
"SyntaxError [1:5-1:6]: Invalid rest argument
> 1 | (...a, ...b) => {}
    |      ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...rest - a) => b 1`] = `
"SyntaxError [1:12-1:13]: Invalid rest argument
> 1 | (...rest - a) => b
    |             ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...rest - a) => b 2`] = `
"SyntaxError [1:12-1:13]: Invalid rest argument
> 1 | (...rest - a) => b
    |             ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (...x,) => x 1`] = `
"SyntaxError [1:5-1:6]: Invalid rest argument
> 1 | (...x,) => x
    |      ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (..a, ...b) => c 1`] = `
"SyntaxError [1:1-1:2]: Unexpected token: '.'
> 1 | (..a, ...b) => c
    |  ^ Unexpected token: '.'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([(a)]) => {}; 1`] = `
"SyntaxError [1:8-1:10]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([(a)]) => {};
    |         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([...(x), y] = z) => 0 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in assignment
> 1 | ([...(x), y] = z) => 0
    |                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([...x.y] = z) => z 1`] = `
"SyntaxError [1:15-1:17]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([...x.y] = z) => z
    |                ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([...x.y]) => z 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([...x.y]) => z
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0; 1`] = `
"SyntaxError [1:50-1:52]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0;
    |                                                   ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{"foo": y.z} = a]) => b 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{"foo": y.z} = a]) => b
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{"foo": y.z}] = a) => b 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{"foo": y.z}] = a) => b
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{"foo": y.z}]) => b 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{"foo": y.z}]) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{1: y.z} = a]) => b 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{1: y.z} = a]) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z} = a]) => b 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z} = a]) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z} = a]) => b 2`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z} = a]) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}] = a) => b 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}] = a) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}] = a) => b 2`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}] = a) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}] = a) => b 3`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}] = a) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}] = a) => b 4`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}] = a) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}]) => b 1`] = `
"SyntaxError [1:13-1:15]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}]) => b
    |              ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}]) => b 2`] = `
"SyntaxError [1:13-1:15]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}]) => b
    |              ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([{x: y.z}]) => b 3`] = `
"SyntaxError [1:13-1:15]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([{x: y.z}]) => b
    |              ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([0])=>0; 1`] = `
"SyntaxError [1:5-1:7]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([0])=>0;
    |      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([a, b] = [] => 42) 1`] = `
"SyntaxError [1:13-1:15]: Expected ')'
> 1 | ([a, b] = [] => 42)
    |              ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([a, b] => 42) 1`] = `
"SyntaxError [1:8-1:10]: Expected ')'
> 1 | ([a, b] => 42)
    |         ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([a,...b,])=>0; 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([a,...b,])=>0;
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ([x.y]=z) => z 1`] = `
"SyntaxError [1:10-1:12]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([x.y]=z) => z
    |           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({"foo": y.z} = a) => b 1`] = `
"SyntaxError [1:19-1:21]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({"foo": y.z} = a) => b
    |                    ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({...[a, b]}) => x 1`] = `
"SyntaxError [1:14-1:16]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...[a, b]}) => x
    |               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({...{a, b}}) => x 1`] = `
"SyntaxError [1:14-1:16]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({...{a, b}}) => x
    |               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({}=>0) 1`] = `
"SyntaxError [1:3-1:5]: Expected ')'
> 1 | ({}=>0)
    |    ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({}=>0) 2`] = `
"SyntaxError [1:3-1:5]: Expected ')'
> 1 | ({}=>0)
    |    ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({0})=>0; 1`] = `
"SyntaxError [1:3-1:4]: Object literal keys that are strings or numbers must be a method or have a colon
> 1 | ({0})=>0;
    |    ^ Object literal keys that are strings or numbers must be a method or have a colon"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({333: y.z} = a) => b 1`] = `
"SyntaxError [1:17-1:19]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({333: y.z} = a) => b
    |                  ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({a, b} = {} => 42) 1`] = `
"SyntaxError [1:13-1:15]: Expected ')'
> 1 | ({a, b} = {} => 42)
    |              ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({a, b} => 42) 1`] = `
"SyntaxError [1:8-1:10]: Expected ')'
> 1 | ({a, b} => 42)
    |         ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({a:b[0]}) => x 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({a:b[0]}) => x
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({a:b[0]})=>0 1`] = `
"SyntaxError [1:10-1:12]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({a:b[0]})=>0
    |           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({a:b[0]})=>0 2`] = `
"SyntaxError [1:10-1:12]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({a:b[0]})=>0
    |           ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({get a(){}}) => 0; 1`] = `
"SyntaxError [1:14-1:16]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({get a(){}}) => 0;
    |               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: {x: y}.length})  => {} 1`] = `
"SyntaxError [1:22-1:24]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: {x: y}.length})  => {}
    |                       ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: async ()=>x})  => {} 1`] = `
"SyntaxError [1:20-1:22]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: async ()=>x})  => {}
    |                     ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: async ()=>x})  => {} 2`] = `
"SyntaxError [1:20-1:22]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: async ()=>x})  => {}
    |                     ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: function(){}})  => {} 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: function(){}})  => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: function(){}})  => {} 2`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: function(){}})  => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: this})  => {} 1`] = `
"SyntaxError [1:13-1:15]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: this})  => {}
    |              ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: this})  => {} 2`] = `
"SyntaxError [1:13-1:15]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: this})  => {}
    |              ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: void x})  => {} 1`] = `
"SyntaxError [1:15-1:17]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: void x})  => {}
    |                ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: x + y})  => {} 1`] = `
"SyntaxError [1:14-1:16]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: x + y})  => {}
    |               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ({x: y.z} = a) => b 1`] = `
"SyntaxError [1:15-1:17]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ({x: y.z} = a) => b
    |                ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (-a) => {} 1`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (-a) => {}
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (-a) => {} 2`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (-a) => {}
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (-a) => {} 3`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (-a) => {}
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (-a, b) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (-a, b) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (-a, b) => {} 2`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (-a, b) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (10) => 0; 1`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (10) => 0;
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (32) => {} 1`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (32) => {}
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (32) => {} 2`] = `
"SyntaxError [1:5-1:7]: Unexpected token: '=>'
> 1 | (32) => {}
    |      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a
=> a)(1) 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | (a
> 2 | => a)(1)
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a + b) => {} 1`] = `
"SyntaxError [1:8-1:10]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a + b) => {}
    |         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a + b, c) => {} 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a + b, c) => {}
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a => a) + 1`] = `
"SyntaxError [1:9-1:10]: Unexpected token: 'end of source'
> 1 | (a => a) +
    |          ^ Unexpected token: 'end of source'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a()=0)=>0 1`] = `
"SyntaxError [1:4-1:5]: Invalid left-hand side in assignment
> 1 | (a()=0)=>0
    |     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a)
=> 0 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | (a)
> 2 | => 0
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a)[1]=>{} 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | (a)[1]=>{}
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a)[c]=>{}; 1`] = `
"SyntaxError [1:6-1:8]: Unexpected token: '=>'
> 1 | (a)[c]=>{};
    |       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a)\`\${c}template-tail\`=>{} 1`] = `
"SyntaxError [1:22-1:24]: Unexpected token: '=>'
> 1 | (a)\`\${c}template-tail\`=>{}
    |                       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a)\`template-head\${c}template-tail\`=>{}; 1`] = `
"SyntaxError [1:35-1:37]: Unexpected token: '=>'
> 1 | (a)\`template-head\${c}template-tail\`=>{};
    |                                    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a++) => {} 1`] = `
"SyntaxError [1:6-1:8]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a++) => {}
    |       ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a++) => {} 2`] = `
"SyntaxError [1:6-1:8]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a++) => {}
    |       ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a++, b) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a++, b) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a++, b) => {} 2`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a++, b) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, "b") => {} 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (a, "b") => {}
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, "b") => {} 2`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (a, "b") => {}
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, (b)) => 42; 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (a, (b)) => 42;
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, ...b - 10) => b 1`] = `
"SyntaxError [1:13-1:14]: Invalid rest argument
> 1 | (a, ...b - 10) => b
    |              ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, ...b - 10) => b 2`] = `
"SyntaxError [1:13-1:14]: Invalid rest argument
> 1 | (a, ...b - 10) => b
    |              ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, ...b,) => {} 1`] = `
"SyntaxError [1:8-1:9]: Invalid rest argument
> 1 | (a, ...b,) => {}
    |         ^ Invalid rest argument"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, -b) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (a, -b) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, -b) => {} 2`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (a, -b) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, 32) => {} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (a, 32) => {}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, b - c) => {} 1`] = `
"SyntaxError [1:11-1:13]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, b - c) => {}
    |            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, b++) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, b++) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, b++) => {} 2`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, b++) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, b++) => {} 3`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, b++) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, foo ? bar : baz) => {} 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, foo ? bar : baz) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, foo ? bar : baz) => {} 2`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, foo ? bar : baz) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, foo ? bar : baz) => {} 3`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a, foo ? bar : baz) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, if) => {} 1`] = `
"SyntaxError [1:4-1:6]: Unexpected token: 'if'
> 1 | (a, if) => {}
    |     ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, p\\u0061ckage) => { "use strict"; } 1`] = `
"SyntaxError [1:37-1:38]: Unexpected strict mode reserved word
> 1 | (a, p\\u0061ckage) => { "use strict"; }
    |                                      ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a, p\\u0061ckage) => { } 1`] = `
"SyntaxError [1:4-1:16]: Unexpected token: 'escaped future reserved keyword'
> 1 | (a, p\\u0061ckage) => { }
    |     ^^^^^^^^^^^^ Unexpected token: 'escaped future reserved keyword'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...a)
 1`] = `
"SyntaxError [1:8-2:0]: Expected '=>'
> 1 | (a,...a)
    |         ^
> 2 |
    | ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...a)/*
*/ => 0 1`] = `
"SyntaxError [2:3-2:5]: No line break is allowed after '=>'
  1 | (a,...a)/*
> 2 | */ => 0
    |    ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...a)/* */ => 0 1`] = `
"SyntaxError [2:3-2:5]: No line break is allowed after '=>'
  1 | (a,...a)/*
> 2 | */ => 0
    |    ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...a)/*‪*/ 1`] = `
"SyntaxError [1:13-1:13]: Expected '=>'
> 1 | (a,...a)/*‪*/
    |              ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...b)+c=>{} 1`] = `
"SyntaxError [1:8-1:9]: Expected '=>'
> 1 | (a,...b)+c=>{}
    |         ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...b)+c=>{} 2`] = `
"SyntaxError [1:8-1:9]: Expected '=>'
> 1 | (a,...b)+c=>{}
    |         ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...b)[c]=>{} 1`] = `
"SyntaxError [1:8-1:9]: Expected '=>'
> 1 | (a,...b)[c]=>{}
    |         ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...b)\`\${c}template-tail\`=>{}; 1`] = `
"SyntaxError [1:8-1:11]: Expected '=>'
> 1 | (a,...b)\`\${c}template-tail\`=>{};
    |         ^^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,...b)\`template-head\${c}\`=>{} 1`] = `
"SyntaxError [1:8-1:24]: Expected '=>'
> 1 | (a,...b)\`template-head\${c}\`=>{}
    |         ^^^^^^^^^^^^^^^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,b)(c)=>{} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | (a,b)(c)=>{}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a,b)+c=>{} 1`] = `
"SyntaxError [1:7-1:9]: \`=>\` is an invalid assignment target
> 1 | (a,b)+c=>{}
    |        ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a.b, c) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a.b, c) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a.b, c) => {} 2`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a.b, c) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a.b, c) => {} 3`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a.b, c) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a/*
*/=> a)(1) 1`] = `
"SyntaxError [2:2-2:4]: No line break is allowed after '=>'
  1 | (a/*
> 2 | */=> a)(1)
    |   ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a=/i/) = /i/ 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | (a=/i/) = /i/
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a=1 => 42) 1`] = `
"SyntaxError [1:5-1:7]: Expected ')'
> 1 | (a=1 => 42)
    |      ^^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a['b'], c) => {} 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a['b'], c) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a['b'], c) => {} 2`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a['b'], c) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a['b'], c) => {} 3`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a['b'], c) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (a['b'], c) => {} 4`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (a['b'], c) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (async (...a, ...b) => {}) 1`] = `
"SyntaxError [1:20-1:22]: Invalid left-hand side in async arrow
> 1 | (async (...a, ...b) => {})
    |                     ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (async (...a, b) => {}) 1`] = `
"SyntaxError [1:17-1:19]: Invalid left-hand side in async arrow
> 1 | (async (...a, b) => {})
    |                  ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (async (...a,) => {} 1`] = `
"SyntaxError [1:15-1:17]: Invalid left-hand side in async arrow
> 1 | (async (...a,) => {}
    |                ^^ Invalid left-hand side in async arrow"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (async (x, z) => y) = {} 1`] = `
"SyntaxError [1:20-1:21]: Invalid left-hand side in assignment
> 1 | (async (x, z) => y) = {}
    |                     ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (async x => y) = {} 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in assignment
> 1 | (async x => y) = {}
    |                ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (b = (a,)) => {} 1`] = `
"SyntaxError [1:9-1:10]: Expected '=>'
> 1 | (b = (a,)) => {}
    |          ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (c, a.b) => {} 1`] = `
"SyntaxError [1:9-1:11]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (c, a.b) => {}
    |          ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (c, a['b']) => {} 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (c, a['b']) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (c, a['b']) => {} 2`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (c, a['b']) => {}
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (e, arguments) => { 'use strict'; return e + arguments; } 1`] = `
"SyntaxError [1:20-1:33]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | (e, arguments) => { 'use strict'; return e + arguments; }
    |                     ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (foo ? bar : baz) => {} 1`] = `
"SyntaxError [1:18-1:20]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (foo ? bar : baz) => {}
    |                   ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (foo ? bar : baz) => {} 2`] = `
"SyntaxError [1:18-1:20]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (foo ? bar : baz) => {}
    |                   ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (foo ? bar : baz, a) => {} 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (foo ? bar : baz, a) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (foo ? bar : baz, a) => {} 2`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (foo ? bar : baz, a) => {}
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (function *g([x = class extends (a ? null : yield) { }] = [null]) { }); 1`] = `
"SyntaxError [1:49-1:50]: Yield expression not allowed in formal parameter
> 1 | (function *g([x = class extends (a ? null : yield) { }] = [null]) { });
    |                                                  ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (function *g(x = class { [y = (yield, 1)]() { } }) { }); 1`] = `
"SyntaxError [1:36-1:37]: Yield expression not allowed in formal parameter
> 1 | (function *g(x = class { [y = (yield, 1)]() { } }) { });
    |                                     ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (function *g(x = class extends (yield) { }) { }); 1`] = `
"SyntaxError [1:37-1:38]: Yield expression not allowed in formal parameter
> 1 | (function *g(x = class extends (yield) { }) { });
    |                                      ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (function *g(z = ( [x=(yield)]) => {}) { }); 1`] = `
"SyntaxError [1:28-1:29]: Yield expression not allowed in formal parameter
> 1 | (function *g(z = ( [x=(yield)]) => {}) { });
    |                             ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (function *g(z = ( x=yield) => {}) { }); 1`] = `
"SyntaxError [1:26-1:27]: Yield expression not allowed in formal parameter
> 1 | (function *g(z = ( x=yield) => {}) { });
    |                           ^ Yield expression not allowed in formal parameter"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (if) => {} 1`] = `
"SyntaxError [1:1-1:3]: Unexpected token: 'if'
> 1 | (if) => {}
    |  ^^ Unexpected token: 'if'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (localVar |= defaultValue) => {} 1`] = `
"SyntaxError [1:27-1:29]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (localVar |= defaultValue) => {}
    |                            ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\141ckage) => { "use strict"; } 1`] = `
"SyntaxError [1:1-1:2]: Illegal Unicode escape sequence
> 1 | (p\\141ckage) => { "use strict"; }
    |  ^ Illegal Unicode escape sequence"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\u0061ckage) => { "use strict"; } 1`] = `
"SyntaxError [1:34-1:35]: Unexpected strict mode reserved word
> 1 | (p\\u0061ckage) => { "use strict"; }
    |                                   ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\u0061ckage) => { } 1`] = `
"SyntaxError [1:1-1:13]: Unexpected token: 'escaped future reserved keyword'
> 1 | (p\\u0061ckage) => { }
    |  ^^^^^^^^^^^^ Unexpected token: 'escaped future reserved keyword'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\u0061ckage, a) => { "use strict"; } 1`] = `
"SyntaxError [1:37-1:38]: Unexpected strict mode reserved word
> 1 | (p\\u0061ckage, a) => { "use strict"; }
    |                                      ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\u0061ckage, a) => { } 1`] = `
"SyntaxError [1:1-1:13]: Unexpected token: 'escaped future reserved keyword'
> 1 | (p\\u0061ckage, a) => { }
    |  ^^^^^^^^^^^^ Unexpected token: 'escaped future reserved keyword'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\x61ckage) => { "use strict"; } 1`] = `
"SyntaxError [1:1-1:2]: Illegal Unicode escape sequence
> 1 | (p\\x61ckage) => { "use strict"; }
    |  ^ Illegal Unicode escape sequence"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (p\\x61ckage) => { } 1`] = `
"SyntaxError [1:1-1:2]: Illegal Unicode escape sequence
> 1 | (p\\x61ckage) => { }
    |  ^ Illegal Unicode escape sequence"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x => y) = {} 1`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | (x => y) = {}
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x => y) = {} 2`] = `
"SyntaxError [1:9-1:10]: Invalid left-hand side in assignment
> 1 | (x => y) = {}
    |          ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x) 
 => d; 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | (x) 
> 2 |  => d;
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, (y)) => 0 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (x, (y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, (y)) => 0 2`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | (x, (y)) => 0
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, (y, z)) => 0 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | (x, (y, z)) => 0
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, (y, z)) => a 1`] = `
"SyntaxError [1:12-1:14]: Unexpected token: '=>'
> 1 | (x, (y, z)) => a
    |             ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, /x/g) => x 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | (x, /x/g) => x
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, /x/g) => x 2`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | (x, /x/g) => x
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > (x, y)[7] => {} 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | (x, y)[7] => {}
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ) => {} 1`] = `
"SyntaxError [1:0-1:1]: Unexpected token: ')'
> 1 | ) => {}
    | ^ Unexpected token: ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ) => 0 1`] = `
"SyntaxError [1:0-1:1]: Unexpected token: ')'
> 1 | ) => 0
    | ^ Unexpected token: ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > ) 1`] = `
"SyntaxError [1:0-1:1]: Unexpected token: ')'
> 1 | )
    | ^ Unexpected token: ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > , => {} 1`] = `
"SyntaxError [1:0-1:1]: Unexpected token: ','
> 1 | , => {}
    | ^ Unexpected token: ','"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > => {} 1`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | => {}
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > => {} 2`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | => {}
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > => 0 1`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | => 0
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > => 0 2`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | => 0
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > => 1`] = `
"SyntaxError [1:0-1:2]: Unexpected token: '=>'
> 1 | =>
    | ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > [] => {} 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | [] => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > [] => {} 2`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | [] => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > []=>0 1`] = `
"SyntaxError [1:2-1:4]: Unexpected token: '=>'
> 1 | []=>0
    |   ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > \\u0061sync () => {} 1`] = `
"SyntaxError [1:14-1:16]: Unexpected token: '=>'
> 1 | \\u0061sync () => {}
    |               ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > {} => {} 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | {} => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > {} => {} 2`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | {} => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > -a => {} 1`] = `
"SyntaxError [1:3-1:5]: \`=>\` is an invalid assignment target
> 1 | -a => {}
    |    ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > -a => {} 2`] = `
"SyntaxError [1:3-1:5]: \`=>\` is an invalid assignment target
> 1 | -a => {}
    |    ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 0 || () => 0 1`] = `
"SyntaxError [1:8-1:10]: \`=>\` is an invalid assignment target
> 1 | 0 || () => 0
    |         ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 0 || (x) => 0 1`] = `
"SyntaxError [1:9-1:11]: \`=>\` is an invalid assignment target
> 1 | 0 || (x) => 0
    |          ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 0 || (x,y) => 0 1`] = `
"SyntaxError [1:11-1:13]: \`=>\` is an invalid assignment target
> 1 | 0 || (x,y) => 0
    |            ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 0 || x => 0 1`] = `
"SyntaxError [1:7-1:9]: \`=>\` is an invalid assignment target
> 1 | 0 || x => 0
    |        ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 1 + () 1`] = `
"SyntaxError [1:5-1:6]: \`=>\` is an invalid assignment target
> 1 | 1 + ()
    |      ^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 1 + () 2`] = `
"SyntaxError [1:5-1:6]: \`=>\` is an invalid assignment target
> 1 | 1 + ()
    |      ^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 32 => {} 1`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | 32 => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > 32 => {} 2`] = `
"SyntaxError [1:3-1:5]: Unexpected token: '=>'
> 1 | 32 => {}
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a
= b
=> c 1`] = `
"SyntaxError [3:0-3:2]: No line break is allowed after '=>'
  1 | a
  2 | = b
> 3 | => c
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a + b => {} 1`] = `
"SyntaxError [1:6-1:8]: \`=>\` is an invalid assignment target
> 1 | a + b => {}
    |       ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a = b
=>
c 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | a = b
> 2 | =>
    | ^^ No line break is allowed after '=>'
  3 | c"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a = b
=> c 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | a = b
> 2 | => c
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a => (b => (a + b) 1`] = `
"SyntaxError [1:17-1:18]: Expected ')'
> 1 | a => (b => (a + b)
    |                  ^ Expected ')'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a++ => {} 1`] = `
"SyntaxError [1:4-1:6]: Unexpected token: '=>'
> 1 | a++ => {}
    |     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a++ => {} 2`] = `
"SyntaxError [1:4-1:6]: Unexpected token: '=>'
> 1 | a++ => {}
    |     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a++ => {} 3`] = `
"SyntaxError [1:4-1:6]: Unexpected token: '=>'
> 1 | a++ => {}
    |     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a?c:d=>{}=>{}; 1`] = `
"SyntaxError [1:9-1:11]: Unexpected token: '=>'
> 1 | a?c:d=>{}=>{};
    |          ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a\`\${c}template-tail\`=>{} 1`] = `
"SyntaxError [1:20-1:22]: Unexpected token: '=>'
> 1 | a\`\${c}template-tail\`=>{}
    |                     ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > a\`template-head\${c}template-tail\`=>{}; 1`] = `
"SyntaxError [1:33-1:35]: Unexpected token: '=>'
> 1 | a\`template-head\${c}template-tail\`=>{};
    |                                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > arguments => { "use strict"; 0 } 1`] = `
"SyntaxError [1:29-1:30]: Unexpected eval or arguments in strict mode
> 1 | arguments => { "use strict"; 0 }
    |                              ^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > arguments => { 'use strict'; return arguments + 2; } 1`] = `
"SyntaxError [1:29-1:35]: Unexpected eval or arguments in strict mode
> 1 | arguments => { 'use strict'; return arguments + 2; }
    |                              ^^^^^^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > async (x = 1) => {"use strict"} 1`] = `
"SyntaxError [1:18-1:31]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | async (x = 1) => {"use strict"}
    |                   ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > async("foo".bar) => x 1`] = `
"SyntaxError [1:17-1:19]: Unexpected token: '=>'
> 1 | async("foo".bar) => x
    |                  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > async(foo = super()) => {} 1`] = `
"SyntaxError [1:17-1:18]: Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass
> 1 | async(foo = super()) => {}
    |                  ^ Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > async(foo) => { super() }; 1`] = `
"SyntaxError [1:21-1:22]: Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass
> 1 | async(foo) => { super() };
    |                      ^ Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > async(foo) => { super.prop }; 1`] = `
"SyntaxError [1:21-1:22]: Member access on super must be in a method
> 1 | async(foo) => { super.prop };
    |                      ^ Member access on super must be in a method"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > bar ? (=> 0) : baz; 1`] = `
"SyntaxError [1:7-1:9]: Unexpected token: '=>'
> 1 | bar ? (=> 0) : baz;
    |        ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > enum => 1; 1`] = `
"SyntaxError [1:0-1:4]: Unexpected token: 'enum'
> 1 | enum => 1;
    | ^^^^ Unexpected token: 'enum'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > eval => { "use strict"; 0 } 1`] = `
"SyntaxError [1:24-1:25]: Unexpected eval or arguments in strict mode
> 1 | eval => { "use strict"; 0 }
    |                         ^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > eval => { 'use strict'; return eval + 1; } 1`] = `
"SyntaxError [1:24-1:30]: Unexpected eval or arguments in strict mode
> 1 | eval => { 'use strict'; return eval + 1; }
    |                         ^^^^^^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > f = ([...[ x ] = []] = []) => {}; 1`] = `
"SyntaxError [1:23-1:24]: Invalid left-hand side in assignment
> 1 | f = ([...[ x ] = []] = []) => {};
    |                        ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > f = ([...[x], y] = [1, 2, 3]) => {}; 1`] = `
"SyntaxError [1:19-1:20]: Invalid left-hand side in assignment
> 1 | f = ([...[x], y] = [1, 2, 3]) => {};
    |                    ^ Invalid left-hand side in assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > f = ([...{ x } = []]) => {}; 1`] = `
"SyntaxError [1:22-1:24]: The left-hand side of the arrow can only be destructed through assignment
> 1 | f = ([...{ x } = []]) => {};
    |                       ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > f = ([...{ x }, y]) => {}; 1`] = `
"SyntaxError [1:20-1:22]: The left-hand side of the arrow can only be destructed through assignment
> 1 | f = ([...{ x }, y]) => {};
    |                     ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > f = ([...{ x }, y]) => {}; 2`] = `
"SyntaxError [1:20-1:22]: The left-hand side of the arrow can only be destructed through assignment
> 1 | f = ([...{ x }, y]) => {};
    |                     ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > foo bar => zoo 1`] = `
"SyntaxError [1:4-1:7]: Unexpected token: 'identifier'
> 1 | foo bar => zoo
    |     ^^^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > function *a() { yield => foo } 1`] = `
"SyntaxError [1:22-1:24]: Unexpected token: '=>'
> 1 | function *a() { yield => foo }
    |                       ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > function foo(package) { } 1`] = `
"SyntaxError [1:13-1:20]: Unexpected strict mode reserved word
> 1 | function foo(package) { }
    |              ^^^^^^^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > function x(){([(a)]) => {} } 1`] = `
"SyntaxError [1:21-1:23]: The left-hand side of the arrow can only be destructed through assignment
> 1 | function x(){([(a)]) => {} }
    |                      ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > if => {} 1`] = `
"SyntaxError [1:3-1:5]: Expected '('
> 1 | if => {}
    |    ^^ Expected '('"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > if => {} 2`] = `
"SyntaxError [1:3-1:5]: Expected '('
> 1 | if => {}
    |    ^^ Expected '('"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > interface => {} 1`] = `
"SyntaxError [1:0-1:9]: Unexpected token: 'interface'
> 1 | interface => {}
    | ^^^^^^^^^ Unexpected token: 'interface'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > left = (aSize.width/2) - () 1`] = `
"SyntaxError [1:26-1:27]: \`=>\` is an invalid assignment target
> 1 | left = (aSize.width/2) - ()
    |                           ^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > let => {} 1`] = `
"SyntaxError [1:4-1:6]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | let => {}
    |     ^^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > let x = {y=z} => d 1`] = `
"SyntaxError [1:14-1:16]: Invalid shorthand property initializer
> 1 | let x = {y=z} => d
    |               ^^ Invalid shorthand property initializer"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > let x = {y=z} 1`] = `
"SyntaxError [1:12-1:13]: Invalid shorthand property initializer
> 1 | let x = {y=z}
    |             ^ Invalid shorthand property initializer"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > p\\141ckage => { "use strict"; } 1`] = `
"SyntaxError [1:0-1:1]: Illegal Unicode escape sequence
> 1 | p\\141ckage => { "use strict"; }
    | ^ Illegal Unicode escape sequence"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > p\\141ckage => { } 1`] = `
"SyntaxError [1:0-1:1]: Illegal Unicode escape sequence
> 1 | p\\141ckage => { }
    | ^ Illegal Unicode escape sequence"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > p\\u0061ckage => { "use strict"; } 1`] = `
"SyntaxError [1:32-1:33]: Unexpected strict mode reserved word
> 1 | p\\u0061ckage => { "use strict"; }
    |                                 ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > p\\u0061ckage => { } 1`] = `
"SyntaxError [1:0-1:12]: Unexpected token: 'escaped future reserved keyword'
> 1 | p\\u0061ckage => { }
    | ^^^^^^^^^^^^ Unexpected token: 'escaped future reserved keyword'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > package => { "use strict"; } 1`] = `
"SyntaxError [1:27-1:28]: Unexpected strict mode reserved word
> 1 | package => { "use strict"; }
    |                            ^ Unexpected strict mode reserved word"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var a = () 
 => d; 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | var a = () 
> 2 |  => d;
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var a = (x) 
 => { return d }; 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | var a = (x) 
> 2 |  => { return d };
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var a = {}; a
.x => d; 1`] = `
"SyntaxError [2:3-2:5]: Unexpected token: '=>'
  1 | var a = {}; a
> 2 | .x => d;
    |    ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var a = {}; a.x 
 => d; 1`] = `
"SyntaxError [2:1-2:3]: Unexpected token: '=>'
  1 | var a = {}; a.x 
> 2 |  => d;
    |  ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = (yield) => 1; 1`] = `
"SyntaxError [1:10-1:15]: 'yield' may not be used as an identifier in this context
> 1 | var af = (yield) => 1;
    |           ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = ...x => x; 1`] = `
"SyntaxError [1:9-1:12]: Unexpected token: '...'
> 1 | var af = ...x => x;
    |          ^^^ Unexpected token: '...'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = arguments => 1; 1`] = `
"SyntaxError [1:19-1:21]: Unexpected eval or arguments in strict mode
> 1 | var af = arguments => 1;
    |                    ^^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = enum => 1; 1`] = `
"SyntaxError [1:9-1:13]: Unexpected token: 'enum'
> 1 | var af = enum => 1;
    |          ^^^^ Unexpected token: 'enum'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = eval => 1; 1`] = `
"SyntaxError [1:14-1:16]: Unexpected eval or arguments in strict mode
> 1 | var af = eval => 1;
    |               ^^ Unexpected eval or arguments in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = package => 1; 1`] = `
"SyntaxError [1:9-1:16]: Unexpected token: 'package'
> 1 | var af = package => 1;
    |          ^^^^^^^ Unexpected token: 'package'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = x
=> {}; 1`] = `
"SyntaxError [2:0-2:2]: No line break is allowed after '=>'
  1 | var af = x
> 2 | => {};
    | ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var af = yield => 1; 1`] = `
"SyntaxError [1:9-1:14]: 'yield' may not be used as an identifier in this context
> 1 | var af = yield => 1;
    |          ^^^^^ 'yield' may not be used as an identifier in this context"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > var f = (a = 0) => { "use strict"; }; 1`] = `
"SyntaxError [1:21-1:34]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | var f = (a = 0) => { "use strict"; };
    |                      ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x 
 => d; 1`] = `
"SyntaxError [2:1-2:3]: No line break is allowed after '=>'
  1 | x 
> 2 |  => d;
    |  ^^ No line break is allowed after '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = ()+c=>{} 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | x = ()+c=>{}
    |       ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = ()[1]=>{} 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | x = ()[1]=>{}
    |       ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = ()[c]=>{}; 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | x = ()[c]=>{};
    |       ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = ()c++=>{}; 1`] = `
"SyntaxError [1:6-1:7]: Expected '=>'
> 1 | x = ()c++=>{};
    |       ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (...a)+c=>{} 1`] = `
"SyntaxError [1:10-1:11]: Expected '=>'
> 1 | x = (...a)+c=>{}
    |           ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (...a)?c:d=>{}=>{} 1`] = `
"SyntaxError [1:10-1:11]: Expected '=>'
> 1 | x = (...a)?c:d=>{}=>{}
    |           ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (...a)[1]=>{}; 1`] = `
"SyntaxError [1:10-1:11]: Expected '=>'
> 1 | x = (...a)[1]=>{};
    |           ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (...a)-c=>{}; 1`] = `
"SyntaxError [1:10-1:11]: Expected '=>'
> 1 | x = (...a)-c=>{};
    |           ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a)?c:d=>{}=>{} 1`] = `
"SyntaxError [1:15-1:17]: Unexpected token: '=>'
> 1 | x = (a)?c:d=>{}=>{}
    |                ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a)\`\${c}template-tail\`=>{}; 1`] = `
"SyntaxError [1:26-1:28]: Unexpected token: '=>'
> 1 | x = (a)\`\${c}template-tail\`=>{};
    |                           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a)\`c\`=>{} 1`] = `
"SyntaxError [1:10-1:12]: Unexpected token: '=>'
> 1 | x = (a)\`c\`=>{}
    |           ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a)-c=>{}; 1`] = `
"SyntaxError [1:9-1:11]: \`=>\` is an invalid assignment target
> 1 | x = (a)-c=>{};
    |          ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a,...b)[c]=>{}; 1`] = `
"SyntaxError [1:12-1:13]: Expected '=>'
> 1 | x = (a,...b)[c]=>{};
    |             ^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a,...b)\`\${c}template-tail\`=>{} 1`] = `
"SyntaxError [1:12-1:15]: Expected '=>'
> 1 | x = (a,...b)\`\${c}template-tail\`=>{}
    |             ^^^ Expected '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a,b)", "=>{} 1`] = `
"SyntaxError [1:9-1:13]: Unexpected token: 'string'
> 1 | x = (a,b)", "=>{}
    |          ^^^^ Unexpected token: 'string'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a,b)+c=>{}; 1`] = `
"SyntaxError [1:11-1:13]: \`=>\` is an invalid assignment target
> 1 | x = (a,b)+c=>{};
    |            ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (a,b)-c=>{}; 1`] = `
"SyntaxError [1:11-1:13]: \`=>\` is an invalid assignment target
> 1 | x = (a,b)-c=>{};
    |            ^^ \`=>\` is an invalid assignment target"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (y = "foo\\003bar") => { "use strict"; } 1`] = `
"SyntaxError [1:28-1:41]: Illegal 'use strict' directive in function with non-simple parameter list
> 1 | x = (y = "foo\\003bar") => { "use strict"; }
    |                             ^^^^^^^^^^^^^ Illegal 'use strict' directive in function with non-simple parameter list"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = (y = "foo\\003bar") => { } 1`] = `
"SyntaxError [1:9-1:14]: Octal escape sequences are not allowed in strict mode
> 1 | x = (y = "foo\\003bar") => { }
    |          ^^^^^ Octal escape sequences are not allowed in strict mode"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = a\`c\`=>{} 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | x = a\`c\`=>{}
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = a\`template-head\${c}template-tail\`=>{} 1`] = `
"SyntaxError [1:37-1:39]: Unexpected token: '=>'
> 1 | x = a\`template-head\${c}template-tail\`=>{}
    |                                      ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > x = ac++=>{}; 1`] = `
"SyntaxError [1:8-1:10]: Unexpected token: '=>'
> 1 | x = ac++=>{};
    |         ^^ Unexpected token: '=>'"
`;

exports[`Expressions - Arrow > Expressions - Array (fail) > yield x => zoo 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: 'identifier'
> 1 | yield x => zoo
    |       ^ Unexpected token: 'identifier'"
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (( [x]=f(yield) )=>{}); 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "elements": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "right": {
              "arguments": [
                {
                  "name": "yield",
                  "type": "Identifier",
                },
              ],
              "callee": {
                "name": "f",
                "type": "Identifier",
              },
              "optional": false,
              "type": "CallExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (( {x=f(yield)} )=>{}); 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "left": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "right": {
                    "arguments": [
                      {
                        "name": "yield",
                        "type": "Identifier",
                      },
                    ],
                    "callee": {
                      "name": "f",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "type": "CallExpression",
                  },
                  "type": "AssignmentPattern",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (() => {}) + 2 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "end": 14,
        "left": {
          "async": false,
          "body": {
            "body": [],
            "end": 9,
            "range": [
              7,
              9,
            ],
            "start": 7,
            "type": "BlockStatement",
          },
          "end": 9,
          "expression": false,
          "generator": false,
          "params": [],
          "range": [
            1,
            9,
          ],
          "start": 1,
          "type": "ArrowFunctionExpression",
        },
        "operator": "+",
        "range": [
          0,
          14,
        ],
        "right": {
          "end": 14,
          "range": [
            13,
            14,
          ],
          "start": 13,
          "type": "Literal",
          "value": 2,
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (() => {}) << x 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "end": 15,
        "left": {
          "async": false,
          "body": {
            "body": [],
            "end": 9,
            "range": [
              7,
              9,
            ],
            "start": 7,
            "type": "BlockStatement",
          },
          "end": 9,
          "expression": false,
          "generator": false,
          "params": [],
          "range": [
            1,
            9,
          ],
          "start": 1,
          "type": "ArrowFunctionExpression",
        },
        "operator": "<<",
        "range": [
          0,
          15,
        ],
        "right": {
          "end": 15,
          "name": "x",
          "range": [
            14,
            15,
          ],
          "start": 14,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (() => {}) || true;
(() => {}) ? a : b; 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "end": 18,
        "left": {
          "async": false,
          "body": {
            "body": [],
            "end": 9,
            "range": [
              7,
              9,
            ],
            "start": 7,
            "type": "BlockStatement",
          },
          "end": 9,
          "expression": false,
          "generator": false,
          "params": [],
          "range": [
            1,
            9,
          ],
          "start": 1,
          "type": "ArrowFunctionExpression",
        },
        "operator": "||",
        "range": [
          0,
          18,
        ],
        "right": {
          "end": 18,
          "range": [
            14,
            18,
          ],
          "start": 14,
          "type": "Literal",
          "value": true,
        },
        "start": 0,
        "type": "LogicalExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
    {
      "end": 39,
      "expression": {
        "alternate": {
          "end": 38,
          "name": "b",
          "range": [
            37,
            38,
          ],
          "start": 37,
          "type": "Identifier",
        },
        "consequent": {
          "end": 34,
          "name": "a",
          "range": [
            33,
            34,
          ],
          "start": 33,
          "type": "Identifier",
        },
        "end": 38,
        "range": [
          20,
          38,
        ],
        "start": 20,
        "test": {
          "async": false,
          "body": {
            "body": [],
            "end": 29,
            "range": [
              27,
              29,
            ],
            "start": 27,
            "type": "BlockStatement",
          },
          "end": 29,
          "expression": false,
          "generator": false,
          "params": [],
          "range": [
            21,
            29,
          ],
          "start": 21,
          "type": "ArrowFunctionExpression",
        },
        "type": "ConditionalExpression",
      },
      "range": [
        20,
        39,
      ],
      "start": 20,
      "type": "ExpressionStatement",
    },
  ],
  "end": 39,
  "range": [
    0,
    39,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ((a, b) => {}, (a => a + 1)); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "a",
                "type": "Identifier",
              },
              {
                "name": "b",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "left": {
                "name": "a",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "value": 1,
              },
              "type": "BinaryExpression",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "a",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > () => { let {} = y } 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "declarations": [
                {
                  "id": {
                    "properties": [],
                    "type": "ObjectPattern",
                  },
                  "init": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "type": "VariableDeclarator",
                },
              ],
              "kind": "let",
              "type": "VariableDeclaration",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > () => { let x } 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "declarations": [
                {
                  "id": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "init": null,
                  "type": "VariableDeclarator",
                },
              ],
              "kind": "let",
              "type": "VariableDeclaration",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > () => {}
+function(){} 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "expression": false,
          "generator": false,
          "params": [],
          "type": "ArrowFunctionExpression",
        },
        "operator": "+",
        "right": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "generator": false,
          "id": null,
          "params": [],
          "type": "FunctionExpression",
        },
        "type": "BinaryExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > () => a + b - yield / 1 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "async": false,
        "body": {
          "end": 23,
          "left": {
            "end": 11,
            "left": {
              "end": 7,
              "name": "a",
              "range": [
                6,
                7,
              ],
              "start": 6,
              "type": "Identifier",
            },
            "operator": "+",
            "range": [
              6,
              11,
            ],
            "right": {
              "end": 11,
              "name": "b",
              "range": [
                10,
                11,
              ],
              "start": 10,
              "type": "Identifier",
            },
            "start": 6,
            "type": "BinaryExpression",
          },
          "operator": "-",
          "range": [
            6,
            23,
          ],
          "right": {
            "end": 23,
            "left": {
              "end": 19,
              "name": "yield",
              "range": [
                14,
                19,
              ],
              "start": 14,
              "type": "Identifier",
            },
            "operator": "/",
            "range": [
              14,
              23,
            ],
            "right": {
              "end": 23,
              "range": [
                22,
                23,
              ],
              "start": 22,
              "type": "Literal",
              "value": 1,
            },
            "start": 14,
            "type": "BinaryExpression",
          },
          "start": 6,
          "type": "BinaryExpression",
        },
        "end": 23,
        "expression": true,
        "generator": false,
        "params": [],
        "range": [
          0,
          23,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > () => bar 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "bar",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (...a) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "argument": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (...a) => 0 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "type": "Literal",
          "value": 0,
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "argument": {
              "name": "a",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([...x]) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([[[[[[[[[[[[[[[[[[[[{a=b}]]]]]]]]]]]]]]]]]]]])=>0; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "type": "Literal",
          "value": 0,
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "elements": [
                  {
                    "elements": [
                      {
                        "elements": [
                          {
                            "elements": [
                              {
                                "elements": [
                                  {
                                    "elements": [
                                      {
                                        "elements": [
                                          {
                                            "elements": [
                                              {
                                                "elements": [
                                                  {
                                                    "elements": [
                                                      {
                                                        "elements": [
                                                          {
                                                            "elements": [
                                                              {
                                                                "elements": [
                                                                  {
                                                                    "elements": [
                                                                      {
                                                                        "elements": [
                                                                          {
                                                                            "elements": [
                                                                              {
                                                                                "elements": [
                                                                                  {
                                                                                    "elements": [
                                                                                      {
                                                                                        "elements": [
                                                                                          {
                                                                                            "properties": [
                                                                                              {
                                                                                                "computed": false,
                                                                                                "key": {
                                                                                                  "name": "a",
                                                                                                  "type": "Identifier",
                                                                                                },
                                                                                                "kind": "init",
                                                                                                "method": false,
                                                                                                "shorthand": true,
                                                                                                "type": "Property",
                                                                                                "value": {
                                                                                                  "left": {
                                                                                                    "name": "a",
                                                                                                    "type": "Identifier",
                                                                                                  },
                                                                                                  "right": {
                                                                                                    "name": "b",
                                                                                                    "type": "Identifier",
                                                                                                  },
                                                                                                  "type": "AssignmentPattern",
                                                                                                },
                                                                                              },
                                                                                            ],
                                                                                            "type": "ObjectPattern",
                                                                                          },
                                                                                        ],
                                                                                        "type": "ArrayPattern",
                                                                                      },
                                                                                    ],
                                                                                    "type": "ArrayPattern",
                                                                                  },
                                                                                ],
                                                                                "type": "ArrayPattern",
                                                                              },
                                                                            ],
                                                                            "type": "ArrayPattern",
                                                                          },
                                                                        ],
                                                                        "type": "ArrayPattern",
                                                                      },
                                                                    ],
                                                                    "type": "ArrayPattern",
                                                                  },
                                                                ],
                                                                "type": "ArrayPattern",
                                                              },
                                                            ],
                                                            "type": "ArrayPattern",
                                                          },
                                                        ],
                                                        "type": "ArrayPattern",
                                                      },
                                                    ],
                                                    "type": "ArrayPattern",
                                                  },
                                                ],
                                                "type": "ArrayPattern",
                                              },
                                            ],
                                            "type": "ArrayPattern",
                                          },
                                        ],
                                        "type": "ArrayPattern",
                                      },
                                    ],
                                    "type": "ArrayPattern",
                                  },
                                ],
                                "type": "ArrayPattern",
                              },
                            ],
                            "type": "ArrayPattern",
                          },
                        ],
                        "type": "ArrayPattern",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                ],
                "type": "ArrayPattern",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([[x, y] = z]) => x; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "left": {
                  "elements": [
                    {
                      "name": "x",
                      "type": "Identifier",
                    },
                    {
                      "name": "y",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrayPattern",
                },
                "right": {
                  "name": "z",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([], a) => {} 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 13,
          "range": [
            11,
            13,
          ],
          "start": 11,
          "type": "BlockStatement",
        },
        "end": 13,
        "expression": false,
        "generator": false,
        "params": [
          {
            "elements": [],
            "end": 3,
            "range": [
              1,
              3,
            ],
            "start": 1,
            "type": "ArrayPattern",
          },
          {
            "end": 6,
            "name": "a",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          13,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x = 0]) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "left": {
                  "name": "x",
                  "type": "Identifier",
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x = yield]) => x 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "async": false,
        "body": {
          "end": 18,
          "name": "x",
          "range": [
            17,
            18,
          ],
          "start": 17,
          "type": "Identifier",
        },
        "end": 18,
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "end": 11,
                "left": {
                  "end": 3,
                  "name": "x",
                  "range": [
                    2,
                    3,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "range": [
                  2,
                  11,
                ],
                "right": {
                  "end": 11,
                  "name": "yield",
                  "range": [
                    6,
                    11,
                  ],
                  "start": 6,
                  "type": "Identifier",
                },
                "start": 2,
                "type": "AssignmentPattern",
              },
            ],
            "end": 12,
            "range": [
              1,
              12,
            ],
            "start": 1,
            "type": "ArrayPattern",
          },
        ],
        "range": [
          0,
          18,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x, ...y]) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "elements": [
              {
                "name": "x",
                "type": "Identifier",
              },
              {
                "argument": {
                  "name": "y",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x, {y: [yield]}]) 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "elements": [
          {
            "end": 3,
            "name": "x",
            "range": [
              2,
              3,
            ],
            "start": 2,
            "type": "Identifier",
          },
          {
            "end": 17,
            "properties": [
              {
                "computed": false,
                "end": 16,
                "key": {
                  "end": 7,
                  "name": "y",
                  "range": [
                    6,
                    7,
                  ],
                  "start": 6,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  6,
                  16,
                ],
                "shorthand": false,
                "start": 6,
                "type": "Property",
                "value": {
                  "elements": [
                    {
                      "end": 15,
                      "name": "yield",
                      "range": [
                        10,
                        15,
                      ],
                      "start": 10,
                      "type": "Identifier",
                    },
                  ],
                  "end": 16,
                  "range": [
                    9,
                    16,
                  ],
                  "start": 9,
                  "type": "ArrayExpression",
                },
              },
            ],
            "range": [
              5,
              17,
            ],
            "start": 5,
            "type": "ObjectExpression",
          },
        ],
        "end": 18,
        "range": [
          1,
          18,
        ],
        "start": 1,
        "type": "ArrayExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x, y] = z) => x; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "elements": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
                {
                  "name": "y",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "right": {
              "name": "z",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x] = []) => {} 1`] = `
{
  "body": [
    {
      "end": 16,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 16,
          "range": [
            14,
            16,
          ],
          "start": 14,
          "type": "BlockStatement",
        },
        "end": 16,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 9,
            "left": {
              "elements": [
                {
                  "end": 3,
                  "name": "x",
                  "range": [
                    2,
                    3,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
              ],
              "end": 4,
              "range": [
                1,
                4,
              ],
              "start": 1,
              "type": "ArrayPattern",
            },
            "range": [
              1,
              9,
            ],
            "right": {
              "elements": [],
              "end": 9,
              "range": [
                7,
                9,
              ],
              "start": 7,
              "type": "ArrayExpression",
            },
            "start": 1,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          16,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        16,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "range": [
    0,
    16,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ([x] = []) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "elements": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "right": {
              "elements": [],
              "type": "ArrayExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({}) => {} 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 10,
          "range": [
            8,
            10,
          ],
          "start": 8,
          "type": "BlockStatement",
        },
        "end": 10,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 3,
            "properties": [],
            "range": [
              1,
              3,
            ],
            "start": 1,
            "type": "ObjectPattern",
          },
        ],
        "range": [
          0,
          10,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({}, a) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "properties": [],
            "type": "ObjectPattern",
          },
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({}, a) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "properties": [],
            "type": "ObjectPattern",
          },
          {
            "name": "a",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({a} = {}) => {} 1`] = `
{
  "body": [
    {
      "end": 16,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 16,
          "range": [
            14,
            16,
          ],
          "start": 14,
          "type": "BlockStatement",
        },
        "end": 16,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 9,
            "left": {
              "end": 4,
              "properties": [
                {
                  "computed": false,
                  "end": 3,
                  "key": {
                    "end": 3,
                    "name": "a",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    2,
                    3,
                  ],
                  "shorthand": true,
                  "start": 2,
                  "type": "Property",
                  "value": {
                    "end": 3,
                    "name": "a",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                },
              ],
              "range": [
                1,
                4,
              ],
              "start": 1,
              "type": "ObjectPattern",
            },
            "range": [
              1,
              9,
            ],
            "right": {
              "end": 9,
              "properties": [],
              "range": [
                7,
                9,
              ],
              "start": 7,
              "type": "ObjectExpression",
            },
            "start": 1,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          16,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        16,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "range": [
    0,
    16,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({a} = {}) => {} 2`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "a",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "right": {
              "properties": [],
              "type": "ObjectExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({a} = {}) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "a",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "right": {
              "properties": [],
              "type": "ObjectExpression",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({a} = b,) => {} 1`] = `
{
  "body": [
    {
      "end": 16,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 16,
          "range": [
            14,
            16,
          ],
          "start": 14,
          "type": "BlockStatement",
        },
        "end": 16,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 8,
            "left": {
              "end": 4,
              "properties": [
                {
                  "computed": false,
                  "end": 3,
                  "key": {
                    "end": 3,
                    "name": "a",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    2,
                    3,
                  ],
                  "shorthand": true,
                  "start": 2,
                  "type": "Property",
                  "value": {
                    "end": 3,
                    "name": "a",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                },
              ],
              "range": [
                1,
                4,
              ],
              "start": 1,
              "type": "ObjectPattern",
            },
            "range": [
              1,
              8,
            ],
            "right": {
              "end": 8,
              "name": "b",
              "range": [
                7,
                8,
              ],
              "start": 7,
              "type": "Identifier",
            },
            "start": 1,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          16,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        16,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "range": [
    0,
    16,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({a}) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "a",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "a",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({ident: {x: y}}) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "ident",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false,
                      "type": "Property",
                      "value": {
                        "name": "y",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectPattern",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({ident: {x}}) => x 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "ident",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "properties": [
                    {
                      "computed": false,
                      "key": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": true,
                      "type": "Property",
                      "value": {
                        "name": "x",
                        "type": "Identifier",
                      },
                    },
                  ],
                  "type": "ObjectPattern",
                },
              },
            ],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({x = 10, y: { z = 10 }}) => [x, z] 1`] = `
{
  "body": [
    {
      "end": 35,
      "expression": {
        "async": false,
        "body": {
          "elements": [
            {
              "end": 31,
              "name": "x",
              "range": [
                30,
                31,
              ],
              "start": 30,
              "type": "Identifier",
            },
            {
              "end": 34,
              "name": "z",
              "range": [
                33,
                34,
              ],
              "start": 33,
              "type": "Identifier",
            },
          ],
          "end": 35,
          "range": [
            29,
            35,
          ],
          "start": 29,
          "type": "ArrayExpression",
        },
        "end": 35,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 24,
            "properties": [
              {
                "computed": false,
                "end": 8,
                "key": {
                  "end": 3,
                  "name": "x",
                  "range": [
                    2,
                    3,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  2,
                  8,
                ],
                "shorthand": true,
                "start": 2,
                "type": "Property",
                "value": {
                  "end": 8,
                  "left": {
                    "end": 3,
                    "name": "x",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                  "range": [
                    2,
                    8,
                  ],
                  "right": {
                    "end": 8,
                    "range": [
                      6,
                      8,
                    ],
                    "raw": "10",
                    "start": 6,
                    "type": "Literal",
                    "value": 10,
                  },
                  "start": 2,
                  "type": "AssignmentPattern",
                },
              },
              {
                "computed": false,
                "end": 23,
                "key": {
                  "end": 11,
                  "name": "y",
                  "range": [
                    10,
                    11,
                  ],
                  "start": 10,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  10,
                  23,
                ],
                "shorthand": false,
                "start": 10,
                "type": "Property",
                "value": {
                  "end": 23,
                  "properties": [
                    {
                      "computed": false,
                      "end": 21,
                      "key": {
                        "end": 16,
                        "name": "z",
                        "range": [
                          15,
                          16,
                        ],
                        "start": 15,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        15,
                        21,
                      ],
                      "shorthand": true,
                      "start": 15,
                      "type": "Property",
                      "value": {
                        "end": 21,
                        "left": {
                          "end": 16,
                          "name": "z",
                          "range": [
                            15,
                            16,
                          ],
                          "start": 15,
                          "type": "Identifier",
                        },
                        "range": [
                          15,
                          21,
                        ],
                        "right": {
                          "end": 21,
                          "range": [
                            19,
                            21,
                          ],
                          "raw": "10",
                          "start": 19,
                          "type": "Literal",
                          "value": 10,
                        },
                        "start": 15,
                        "type": "AssignmentPattern",
                      },
                    },
                  ],
                  "range": [
                    13,
                    23,
                  ],
                  "start": 13,
                  "type": "ObjectPattern",
                },
              },
            ],
            "range": [
              1,
              24,
            ],
            "start": 1,
            "type": "ObjectPattern",
          },
        ],
        "range": [
          0,
          35,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        35,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 35,
  "range": [
    0,
    35,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({x = 10}) => x 1`] = `
{
  "body": [
    {
      "end": 15,
      "expression": {
        "async": false,
        "body": {
          "end": 15,
          "name": "x",
          "range": [
            14,
            15,
          ],
          "start": 14,
          "type": "Identifier",
        },
        "end": 15,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 9,
            "properties": [
              {
                "computed": false,
                "end": 8,
                "key": {
                  "end": 3,
                  "name": "x",
                  "range": [
                    2,
                    3,
                  ],
                  "start": 2,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  2,
                  8,
                ],
                "shorthand": true,
                "start": 2,
                "type": "Property",
                "value": {
                  "end": 8,
                  "left": {
                    "end": 3,
                    "name": "x",
                    "range": [
                      2,
                      3,
                    ],
                    "start": 2,
                    "type": "Identifier",
                  },
                  "range": [
                    2,
                    8,
                  ],
                  "right": {
                    "end": 8,
                    "range": [
                      6,
                      8,
                    ],
                    "start": 6,
                    "type": "Literal",
                    "value": 10,
                  },
                  "start": 2,
                  "type": "AssignmentPattern",
                },
              },
            ],
            "range": [
              1,
              9,
            ],
            "start": 1,
            "type": "ObjectPattern",
          },
        ],
        "range": [
          0,
          15,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        15,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "range": [
    0,
    15,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > ({x}); 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "computed": false,
            "key": {
              "name": "x",
              "type": "Identifier",
            },
            "kind": "init",
            "method": false,
            "shorthand": true,
            "type": "Property",
            "value": {
              "name": "x",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a = 1) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "a",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 1,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a = 1, b = 2) => x; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "a",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 1,
            },
            "type": "AssignmentPattern",
          },
          {
            "left": {
              "name": "b",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 2,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a = b) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "a",
              "type": "Identifier",
            },
            "right": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a = b, c) => {} 1`] = `
{
  "body": [
    {
      "end": 16,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 16,
          "range": [
            14,
            16,
          ],
          "start": 14,
          "type": "BlockStatement",
        },
        "end": 16,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 6,
            "left": {
              "end": 2,
              "name": "a",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            "range": [
              1,
              6,
            ],
            "right": {
              "end": 6,
              "name": "b",
              "range": [
                5,
                6,
              ],
              "start": 5,
              "type": "Identifier",
            },
            "start": 1,
            "type": "AssignmentPattern",
          },
          {
            "end": 9,
            "name": "c",
            "range": [
              8,
              9,
            ],
            "start": 8,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          16,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        16,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "range": [
    0,
    16,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a) => 00; 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "async": false,
        "body": {
          "end": 9,
          "range": [
            7,
            9,
          ],
          "start": 7,
          "type": "Literal",
          "value": 0,
        },
        "end": 9,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          9,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a) => b;  // 1 args
(a, b) => c;  // n args
() => b;  // 0 args
(a) => (b) => c;  // func returns func returns func
(a) => ((b) => c);  // So these parens are dropped
() => (b,c) => d;  // func returns func returns func
a=>{return b;}
a => 'e';  // Dropping the parens 1`] = `
{
  "body": [
    {
      "end": 9,
      "expression": {
        "async": false,
        "body": {
          "end": 8,
          "name": "b",
          "range": [
            7,
            8,
          ],
          "start": 7,
          "type": "Identifier",
        },
        "end": 8,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          8,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        9,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
    {
      "end": 33,
      "expression": {
        "async": false,
        "body": {
          "end": 32,
          "name": "c",
          "range": [
            31,
            32,
          ],
          "start": 31,
          "type": "Identifier",
        },
        "end": 32,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 23,
            "name": "a",
            "range": [
              22,
              23,
            ],
            "start": 22,
            "type": "Identifier",
          },
          {
            "end": 26,
            "name": "b",
            "range": [
              25,
              26,
            ],
            "start": 25,
            "type": "Identifier",
          },
        ],
        "range": [
          21,
          32,
        ],
        "start": 21,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        21,
        33,
      ],
      "start": 21,
      "type": "ExpressionStatement",
    },
    {
      "end": 53,
      "expression": {
        "async": false,
        "body": {
          "end": 52,
          "name": "b",
          "range": [
            51,
            52,
          ],
          "start": 51,
          "type": "Identifier",
        },
        "end": 52,
        "expression": true,
        "generator": false,
        "params": [],
        "range": [
          45,
          52,
        ],
        "start": 45,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        45,
        53,
      ],
      "start": 45,
      "type": "ExpressionStatement",
    },
    {
      "end": 81,
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "end": 80,
            "name": "c",
            "range": [
              79,
              80,
            ],
            "start": 79,
            "type": "Identifier",
          },
          "end": 80,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 74,
              "name": "b",
              "range": [
                73,
                74,
              ],
              "start": 73,
              "type": "Identifier",
            },
          ],
          "range": [
            72,
            80,
          ],
          "start": 72,
          "type": "ArrowFunctionExpression",
        },
        "end": 80,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 67,
            "name": "a",
            "range": [
              66,
              67,
            ],
            "start": 66,
            "type": "Identifier",
          },
        ],
        "range": [
          65,
          80,
        ],
        "start": 65,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        65,
        81,
      ],
      "start": 65,
      "type": "ExpressionStatement",
    },
    {
      "end": 135,
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "end": 133,
            "name": "c",
            "range": [
              132,
              133,
            ],
            "start": 132,
            "type": "Identifier",
          },
          "end": 133,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 127,
              "name": "b",
              "range": [
                126,
                127,
              ],
              "start": 126,
              "type": "Identifier",
            },
          ],
          "range": [
            125,
            133,
          ],
          "start": 125,
          "type": "ArrowFunctionExpression",
        },
        "end": 134,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 119,
            "name": "a",
            "range": [
              118,
              119,
            ],
            "start": 118,
            "type": "Identifier",
          },
        ],
        "range": [
          117,
          134,
        ],
        "start": 117,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        117,
        135,
      ],
      "start": 117,
      "type": "ExpressionStatement",
    },
    {
      "end": 185,
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "end": 184,
            "name": "d",
            "range": [
              183,
              184,
            ],
            "start": 183,
            "type": "Identifier",
          },
          "end": 184,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 176,
              "name": "b",
              "range": [
                175,
                176,
              ],
              "start": 175,
              "type": "Identifier",
            },
            {
              "end": 178,
              "name": "c",
              "range": [
                177,
                178,
              ],
              "start": 177,
              "type": "Identifier",
            },
          ],
          "range": [
            174,
            184,
          ],
          "start": 174,
          "type": "ArrowFunctionExpression",
        },
        "end": 184,
        "expression": true,
        "generator": false,
        "params": [],
        "range": [
          168,
          184,
        ],
        "start": 168,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        168,
        185,
      ],
      "start": 168,
      "type": "ExpressionStatement",
    },
    {
      "end": 235,
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "argument": {
                "end": 233,
                "name": "b",
                "range": [
                  232,
                  233,
                ],
                "start": 232,
                "type": "Identifier",
              },
              "end": 234,
              "range": [
                225,
                234,
              ],
              "start": 225,
              "type": "ReturnStatement",
            },
          ],
          "end": 235,
          "range": [
            224,
            235,
          ],
          "start": 224,
          "type": "BlockStatement",
        },
        "end": 235,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 222,
            "name": "a",
            "range": [
              221,
              222,
            ],
            "start": 221,
            "type": "Identifier",
          },
        ],
        "range": [
          221,
          235,
        ],
        "start": 221,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        221,
        235,
      ],
      "start": 221,
      "type": "ExpressionStatement",
    },
    {
      "end": 245,
      "expression": {
        "async": false,
        "body": {
          "end": 244,
          "range": [
            241,
            244,
          ],
          "start": 241,
          "type": "Literal",
          "value": "e",
        },
        "end": 244,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 237,
            "name": "a",
            "range": [
              236,
              237,
            ],
            "start": 236,
            "type": "Identifier",
          },
        ],
        "range": [
          236,
          244,
        ],
        "start": 236,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        236,
        245,
      ],
      "start": 236,
      "type": "ExpressionStatement",
    },
  ],
  "end": 269,
  "range": [
    0,
    269,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, (a, (b, c) => 0)); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "expressions": [
              {
                "name": "a",
                "type": "Identifier",
              },
              {
                "async": false,
                "body": {
                  "type": "Literal",
                  "value": 0,
                },
                "expression": true,
                "generator": false,
                "params": [
                  {
                    "name": "b",
                    "type": "Identifier",
                  },
                  {
                    "name": "c",
                    "type": "Identifier",
                  },
                ],
                "type": "ArrowFunctionExpression",
              },
            ],
            "type": "SequenceExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, ...b) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "argument": {
              "name": "b",
              "type": "Identifier",
            },
            "type": "RestElement",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, {}) => {} 1`] = `
{
  "body": [
    {
      "end": 13,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 13,
          "range": [
            11,
            13,
          ],
          "start": 11,
          "type": "BlockStatement",
        },
        "end": 13,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 6,
            "properties": [],
            "range": [
              4,
              6,
            ],
            "start": 4,
            "type": "ObjectPattern",
          },
        ],
        "range": [
          0,
          13,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        13,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "range": [
    0,
    13,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, {}) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "properties": [],
            "type": "ObjectPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b = c) => {} 1`] = `
{
  "body": [
    {
      "end": 16,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 16,
          "range": [
            14,
            16,
          ],
          "start": 14,
          "type": "BlockStatement",
        },
        "end": 16,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 9,
            "left": {
              "end": 5,
              "name": "b",
              "range": [
                4,
                5,
              ],
              "start": 4,
              "type": "Identifier",
            },
            "range": [
              4,
              9,
            ],
            "right": {
              "end": 9,
              "name": "c",
              "range": [
                8,
                9,
              ],
              "start": 8,
              "type": "Identifier",
            },
            "start": 4,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          16,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        16,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "range": [
    0,
    16,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b => {}, a => a + 1) 1`] = `
{
  "body": [
    {
      "end": 24,
      "expression": {
        "end": 23,
        "expressions": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "end": 11,
              "range": [
                9,
                11,
              ],
              "start": 9,
              "type": "BlockStatement",
            },
            "end": 11,
            "expression": false,
            "generator": false,
            "params": [
              {
                "end": 5,
                "name": "b",
                "range": [
                  4,
                  5,
                ],
                "start": 4,
                "type": "Identifier",
              },
            ],
            "range": [
              4,
              11,
            ],
            "start": 4,
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "end": 23,
              "left": {
                "end": 19,
                "name": "a",
                "range": [
                  18,
                  19,
                ],
                "start": 18,
                "type": "Identifier",
              },
              "operator": "+",
              "range": [
                18,
                23,
              ],
              "right": {
                "end": 23,
                "range": [
                  22,
                  23,
                ],
                "start": 22,
                "type": "Literal",
                "value": 1,
              },
              "start": 18,
              "type": "BinaryExpression",
            },
            "end": 23,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 14,
                "name": "a",
                "range": [
                  13,
                  14,
                ],
                "start": 13,
                "type": "Identifier",
              },
            ],
            "range": [
              13,
              23,
            ],
            "start": 13,
            "type": "ArrowFunctionExpression",
          },
        ],
        "range": [
          1,
          23,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        24,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 24,
  "range": [
    0,
    24,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b => {}, a => a + 1); 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "b",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "left": {
                "name": "a",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "value": 1,
              },
              "type": "BinaryExpression",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "a",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b) => { 42; } 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "expression": {
                "type": "Literal",
                "value": 42,
              },
              "type": "ExpressionStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "name": "b",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b) => 0, (c, d) => 1 1`] = `
{
  "body": [
    {
      "end": 24,
      "expression": {
        "end": 24,
        "expressions": [
          {
            "async": false,
            "body": {
              "end": 11,
              "range": [
                10,
                11,
              ],
              "start": 10,
              "type": "Literal",
              "value": 0,
            },
            "end": 11,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 2,
                "name": "a",
                "range": [
                  1,
                  2,
                ],
                "start": 1,
                "type": "Identifier",
              },
              {
                "end": 5,
                "name": "b",
                "range": [
                  4,
                  5,
                ],
                "start": 4,
                "type": "Identifier",
              },
            ],
            "range": [
              0,
              11,
            ],
            "start": 0,
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "end": 24,
              "range": [
                23,
                24,
              ],
              "start": 23,
              "type": "Literal",
              "value": 1,
            },
            "end": 24,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 15,
                "name": "c",
                "range": [
                  14,
                  15,
                ],
                "start": 14,
                "type": "Identifier",
              },
              {
                "end": 18,
                "name": "d",
                "range": [
                  17,
                  18,
                ],
                "start": 17,
                "type": "Identifier",
              },
            ],
            "range": [
              13,
              24,
            ],
            "start": 13,
            "type": "ArrowFunctionExpression",
          },
        ],
        "range": [
          0,
          24,
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        24,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 24,
  "range": [
    0,
    24,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b) => 0, (c, d) => 1; 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "async": false,
            "body": {
              "type": "Literal",
              "value": 0,
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "a",
                "type": "Identifier",
              },
              {
                "name": "b",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "type": "Literal",
              "value": 1,
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "c",
                "type": "Identifier",
              },
              {
                "name": "d",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (a, b, (c, d) => 0) 1`] = `
{
  "body": [
    {
      "end": 19,
      "expression": {
        "end": 18,
        "expressions": [
          {
            "end": 2,
            "name": "a",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 5,
            "name": "b",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
          {
            "async": false,
            "body": {
              "end": 18,
              "range": [
                17,
                18,
              ],
              "start": 17,
              "type": "Literal",
              "value": 0,
            },
            "end": 18,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 9,
                "name": "c",
                "range": [
                  8,
                  9,
                ],
                "start": 8,
                "type": "Identifier",
              },
              {
                "end": 12,
                "name": "d",
                "range": [
                  11,
                  12,
                ],
                "start": 11,
                "type": "Identifier",
              },
            ],
            "range": [
              7,
              18,
            ],
            "start": 7,
            "type": "ArrowFunctionExpression",
          },
        ],
        "range": [
          1,
          18,
        ],
        "start": 1,
        "type": "SequenceExpression",
      },
      "range": [
        0,
        19,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "range": [
    0,
    19,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (eval = 10) => 42 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "type": "Literal",
          "value": 42,
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "eval",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 10,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (eval = 10) => 42; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "type": "Literal",
          "value": 42,
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "eval",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 10,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (expect, subject, typeName) => {
  typeName = /^reg(?:exp?|ular expression)$/.test(typeName)
    ? 'regexp'
    : typeName;
  expect.argsOutput[0] = output => {
    output.jsString(typeName);
  };
  if (!expect.getType(typeName)) {
    expect.errorMode = 'nested';
    expect.fail(output => {
      output
        .error('Unknown type:')
        .sp()
        .jsString(typeName);
    });
  }
} 1`] = `
{
  "body": [
    {
      "end": 394,
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "end": 123,
              "expression": {
                "end": 122,
                "left": {
                  "end": 43,
                  "name": "typeName",
                  "range": [
                    35,
                    43,
                  ],
                  "start": 35,
                  "type": "Identifier",
                },
                "operator": "=",
                "range": [
                  35,
                  122,
                ],
                "right": {
                  "alternate": {
                    "end": 122,
                    "name": "typeName",
                    "range": [
                      114,
                      122,
                    ],
                    "start": 114,
                    "type": "Identifier",
                  },
                  "consequent": {
                    "end": 107,
                    "range": [
                      99,
                      107,
                    ],
                    "start": 99,
                    "type": "Literal",
                    "value": "regexp",
                  },
                  "end": 122,
                  "range": [
                    46,
                    122,
                  ],
                  "start": 46,
                  "test": {
                    "arguments": [
                      {
                        "end": 91,
                        "name": "typeName",
                        "range": [
                          83,
                          91,
                        ],
                        "start": 83,
                        "type": "Identifier",
                      },
                    ],
                    "callee": {
                      "computed": false,
                      "end": 82,
                      "object": {
                        "end": 77,
                        "range": [
                          46,
                          77,
                        ],
                        "regex": {
                          "flags": "",
                          "pattern": "^reg(?:exp?|ular expression)$",
                        },
                        "start": 46,
                        "type": "Literal",
                        "value": /\\^reg\\(\\?:exp\\?\\|ular expression\\)\\$/,
                      },
                      "optional": false,
                      "property": {
                        "end": 82,
                        "name": "test",
                        "range": [
                          78,
                          82,
                        ],
                        "start": 78,
                        "type": "Identifier",
                      },
                      "range": [
                        46,
                        82,
                      ],
                      "start": 46,
                      "type": "MemberExpression",
                    },
                    "end": 92,
                    "optional": false,
                    "range": [
                      46,
                      92,
                    ],
                    "start": 46,
                    "type": "CallExpression",
                  },
                  "type": "ConditionalExpression",
                },
                "start": 35,
                "type": "AssignmentExpression",
              },
              "range": [
                35,
                123,
              ],
              "start": 35,
              "type": "ExpressionStatement",
            },
            {
              "end": 196,
              "expression": {
                "end": 195,
                "left": {
                  "computed": true,
                  "end": 146,
                  "object": {
                    "computed": false,
                    "end": 143,
                    "object": {
                      "end": 132,
                      "name": "expect",
                      "range": [
                        126,
                        132,
                      ],
                      "start": 126,
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "end": 143,
                      "name": "argsOutput",
                      "range": [
                        133,
                        143,
                      ],
                      "start": 133,
                      "type": "Identifier",
                    },
                    "range": [
                      126,
                      143,
                    ],
                    "start": 126,
                    "type": "MemberExpression",
                  },
                  "optional": false,
                  "property": {
                    "end": 145,
                    "range": [
                      144,
                      145,
                    ],
                    "start": 144,
                    "type": "Literal",
                    "value": 0,
                  },
                  "range": [
                    126,
                    146,
                  ],
                  "start": 126,
                  "type": "MemberExpression",
                },
                "operator": "=",
                "range": [
                  126,
                  195,
                ],
                "right": {
                  "async": false,
                  "body": {
                    "body": [
                      {
                        "end": 191,
                        "expression": {
                          "arguments": [
                            {
                              "end": 189,
                              "name": "typeName",
                              "range": [
                                181,
                                189,
                              ],
                              "start": 181,
                              "type": "Identifier",
                            },
                          ],
                          "callee": {
                            "computed": false,
                            "end": 180,
                            "object": {
                              "end": 171,
                              "name": "output",
                              "range": [
                                165,
                                171,
                              ],
                              "start": 165,
                              "type": "Identifier",
                            },
                            "optional": false,
                            "property": {
                              "end": 180,
                              "name": "jsString",
                              "range": [
                                172,
                                180,
                              ],
                              "start": 172,
                              "type": "Identifier",
                            },
                            "range": [
                              165,
                              180,
                            ],
                            "start": 165,
                            "type": "MemberExpression",
                          },
                          "end": 190,
                          "optional": false,
                          "range": [
                            165,
                            190,
                          ],
                          "start": 165,
                          "type": "CallExpression",
                        },
                        "range": [
                          165,
                          191,
                        ],
                        "start": 165,
                        "type": "ExpressionStatement",
                      },
                    ],
                    "end": 195,
                    "range": [
                      159,
                      195,
                    ],
                    "start": 159,
                    "type": "BlockStatement",
                  },
                  "end": 195,
                  "expression": false,
                  "generator": false,
                  "params": [
                    {
                      "end": 155,
                      "name": "output",
                      "range": [
                        149,
                        155,
                      ],
                      "start": 149,
                      "type": "Identifier",
                    },
                  ],
                  "range": [
                    149,
                    195,
                  ],
                  "start": 149,
                  "type": "ArrowFunctionExpression",
                },
                "start": 126,
                "type": "AssignmentExpression",
              },
              "range": [
                126,
                196,
              ],
              "start": 126,
              "type": "ExpressionStatement",
            },
            {
              "alternate": null,
              "consequent": {
                "body": [
                  {
                    "end": 264,
                    "expression": {
                      "end": 263,
                      "left": {
                        "computed": false,
                        "end": 252,
                        "object": {
                          "end": 242,
                          "name": "expect",
                          "range": [
                            236,
                            242,
                          ],
                          "start": 236,
                          "type": "Identifier",
                        },
                        "optional": false,
                        "property": {
                          "end": 252,
                          "name": "errorMode",
                          "range": [
                            243,
                            252,
                          ],
                          "start": 243,
                          "type": "Identifier",
                        },
                        "range": [
                          236,
                          252,
                        ],
                        "start": 236,
                        "type": "MemberExpression",
                      },
                      "operator": "=",
                      "range": [
                        236,
                        263,
                      ],
                      "right": {
                        "end": 263,
                        "range": [
                          255,
                          263,
                        ],
                        "start": 255,
                        "type": "Literal",
                        "value": "nested",
                      },
                      "start": 236,
                      "type": "AssignmentExpression",
                    },
                    "range": [
                      236,
                      264,
                    ],
                    "start": 236,
                    "type": "ExpressionStatement",
                  },
                  {
                    "end": 388,
                    "expression": {
                      "arguments": [
                        {
                          "async": false,
                          "body": {
                            "body": [
                              {
                                "end": 380,
                                "expression": {
                                  "arguments": [
                                    {
                                      "end": 378,
                                      "name": "typeName",
                                      "range": [
                                        370,
                                        378,
                                      ],
                                      "start": 370,
                                      "type": "Identifier",
                                    },
                                  ],
                                  "callee": {
                                    "computed": false,
                                    "end": 369,
                                    "object": {
                                      "arguments": [],
                                      "callee": {
                                        "computed": false,
                                        "end": 349,
                                        "object": {
                                          "arguments": [
                                            {
                                              "end": 336,
                                              "range": [
                                                321,
                                                336,
                                              ],
                                              "start": 321,
                                              "type": "Literal",
                                              "value": "Unknown type:",
                                            },
                                          ],
                                          "callee": {
                                            "computed": false,
                                            "end": 320,
                                            "object": {
                                              "end": 305,
                                              "name": "output",
                                              "range": [
                                                299,
                                                305,
                                              ],
                                              "start": 299,
                                              "type": "Identifier",
                                            },
                                            "optional": false,
                                            "property": {
                                              "end": 320,
                                              "name": "error",
                                              "range": [
                                                315,
                                                320,
                                              ],
                                              "start": 315,
                                              "type": "Identifier",
                                            },
                                            "range": [
                                              299,
                                              320,
                                            ],
                                            "start": 299,
                                            "type": "MemberExpression",
                                          },
                                          "end": 337,
                                          "optional": false,
                                          "range": [
                                            299,
                                            337,
                                          ],
                                          "start": 299,
                                          "type": "CallExpression",
                                        },
                                        "optional": false,
                                        "property": {
                                          "end": 349,
                                          "name": "sp",
                                          "range": [
                                            347,
                                            349,
                                          ],
                                          "start": 347,
                                          "type": "Identifier",
                                        },
                                        "range": [
                                          299,
                                          349,
                                        ],
                                        "start": 299,
                                        "type": "MemberExpression",
                                      },
                                      "end": 351,
                                      "optional": false,
                                      "range": [
                                        299,
                                        351,
                                      ],
                                      "start": 299,
                                      "type": "CallExpression",
                                    },
                                    "optional": false,
                                    "property": {
                                      "end": 369,
                                      "name": "jsString",
                                      "range": [
                                        361,
                                        369,
                                      ],
                                      "start": 361,
                                      "type": "Identifier",
                                    },
                                    "range": [
                                      299,
                                      369,
                                    ],
                                    "start": 299,
                                    "type": "MemberExpression",
                                  },
                                  "end": 379,
                                  "optional": false,
                                  "range": [
                                    299,
                                    379,
                                  ],
                                  "start": 299,
                                  "type": "CallExpression",
                                },
                                "range": [
                                  299,
                                  380,
                                ],
                                "start": 299,
                                "type": "ExpressionStatement",
                              },
                            ],
                            "end": 386,
                            "range": [
                              291,
                              386,
                            ],
                            "start": 291,
                            "type": "BlockStatement",
                          },
                          "end": 386,
                          "expression": false,
                          "generator": false,
                          "params": [
                            {
                              "end": 287,
                              "name": "output",
                              "range": [
                                281,
                                287,
                              ],
                              "start": 281,
                              "type": "Identifier",
                            },
                          ],
                          "range": [
                            281,
                            386,
                          ],
                          "start": 281,
                          "type": "ArrowFunctionExpression",
                        },
                      ],
                      "callee": {
                        "computed": false,
                        "end": 280,
                        "object": {
                          "end": 275,
                          "name": "expect",
                          "range": [
                            269,
                            275,
                          ],
                          "start": 269,
                          "type": "Identifier",
                        },
                        "optional": false,
                        "property": {
                          "end": 280,
                          "name": "fail",
                          "range": [
                            276,
                            280,
                          ],
                          "start": 276,
                          "type": "Identifier",
                        },
                        "range": [
                          269,
                          280,
                        ],
                        "start": 269,
                        "type": "MemberExpression",
                      },
                      "end": 387,
                      "optional": false,
                      "range": [
                        269,
                        387,
                      ],
                      "start": 269,
                      "type": "CallExpression",
                    },
                    "range": [
                      269,
                      388,
                    ],
                    "start": 269,
                    "type": "ExpressionStatement",
                  },
                ],
                "end": 392,
                "range": [
                  230,
                  392,
                ],
                "start": 230,
                "type": "BlockStatement",
              },
              "end": 392,
              "range": [
                199,
                392,
              ],
              "start": 199,
              "test": {
                "argument": {
                  "arguments": [
                    {
                      "end": 227,
                      "name": "typeName",
                      "range": [
                        219,
                        227,
                      ],
                      "start": 219,
                      "type": "Identifier",
                    },
                  ],
                  "callee": {
                    "computed": false,
                    "end": 218,
                    "object": {
                      "end": 210,
                      "name": "expect",
                      "range": [
                        204,
                        210,
                      ],
                      "start": 204,
                      "type": "Identifier",
                    },
                    "optional": false,
                    "property": {
                      "end": 218,
                      "name": "getType",
                      "range": [
                        211,
                        218,
                      ],
                      "start": 211,
                      "type": "Identifier",
                    },
                    "range": [
                      204,
                      218,
                    ],
                    "start": 204,
                    "type": "MemberExpression",
                  },
                  "end": 228,
                  "optional": false,
                  "range": [
                    204,
                    228,
                  ],
                  "start": 204,
                  "type": "CallExpression",
                },
                "end": 228,
                "operator": "!",
                "prefix": true,
                "range": [
                  203,
                  228,
                ],
                "start": 203,
                "type": "UnaryExpression",
              },
              "type": "IfStatement",
            },
          ],
          "end": 394,
          "range": [
            31,
            394,
          ],
          "start": 31,
          "type": "BlockStatement",
        },
        "end": 394,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 7,
            "name": "expect",
            "range": [
              1,
              7,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 16,
            "name": "subject",
            "range": [
              9,
              16,
            ],
            "start": 9,
            "type": "Identifier",
          },
          {
            "end": 26,
            "name": "typeName",
            "range": [
              18,
              26,
            ],
            "start": 18,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          394,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        394,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 394,
  "range": [
    0,
    394,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (interface) 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "end": 10,
        "name": "interface",
        "range": [
          1,
          10,
        ],
        "start": 1,
        "type": "Identifier",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x = 9) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 9,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x = 9) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 9,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x = 9, y) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "left": {
              "name": "x",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 9,
            },
            "type": "AssignmentPattern",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x = yield = x) => x 1`] = `
{
  "body": [
    {
      "end": 20,
      "expression": {
        "async": false,
        "body": {
          "end": 20,
          "name": "x",
          "range": [
            19,
            20,
          ],
          "start": 19,
          "type": "Identifier",
        },
        "end": 20,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 14,
            "left": {
              "end": 2,
              "name": "x",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            "range": [
              1,
              14,
            ],
            "right": {
              "end": 14,
              "left": {
                "end": 10,
                "name": "yield",
                "range": [
                  5,
                  10,
                ],
                "start": 5,
                "type": "Identifier",
              },
              "operator": "=",
              "range": [
                5,
                14,
              ],
              "right": {
                "end": 14,
                "name": "x",
                "range": [
                  13,
                  14,
                ],
                "start": 13,
                "type": "Identifier",
              },
              "start": 5,
              "type": "AssignmentExpression",
            },
            "start": 1,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          20,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        20,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 20,
  "range": [
    0,
    20,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x) => ((y, z) => (x, y, z)) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "expressions": [
              {
                "name": "x",
                "type": "Identifier",
              },
              {
                "name": "y",
                "type": "Identifier",
              },
              {
                "name": "z",
                "type": "Identifier",
              },
            ],
            "type": "SequenceExpression",
          },
          "expression": true,
          "generator": false,
          "params": [
            {
              "name": "y",
              "type": "Identifier",
            },
            {
              "name": "z",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x) => { function x() {} } 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": {
                "name": "x",
                "type": "Identifier",
              },
              "params": [],
              "type": "FunctionDeclaration",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y = 9) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "left": {
              "name": "y",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 9,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y = 9, z = 8) => {} 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "end": 23,
          "range": [
            21,
            23,
          ],
          "start": 21,
          "type": "BlockStatement",
        },
        "end": 23,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 2,
            "name": "x",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 9,
            "left": {
              "end": 5,
              "name": "y",
              "range": [
                4,
                5,
              ],
              "start": 4,
              "type": "Identifier",
            },
            "range": [
              4,
              9,
            ],
            "right": {
              "end": 9,
              "range": [
                8,
                9,
              ],
              "start": 8,
              "type": "Literal",
              "value": 9,
            },
            "start": 4,
            "type": "AssignmentPattern",
          },
          {
            "end": 16,
            "left": {
              "end": 12,
              "name": "z",
              "range": [
                11,
                12,
              ],
              "start": 11,
              "type": "Identifier",
            },
            "range": [
              11,
              16,
            ],
            "right": {
              "end": 16,
              "range": [
                15,
                16,
              ],
              "start": 15,
              "type": "Literal",
              "value": 8,
            },
            "start": 11,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          23,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y = 9, z = 8) => {}; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "left": {
              "name": "y",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 9,
            },
            "type": "AssignmentPattern",
          },
          {
            "left": {
              "name": "z",
              "type": "Identifier",
            },
            "right": {
              "type": "Literal",
              "value": 8,
            },
            "type": "AssignmentPattern",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y) => x + y 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "left": {
            "name": "x",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y) => z => z * (x + y) 1`] = `
{
  "body": [
    {
      "end": 26,
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "end": 26,
            "left": {
              "end": 16,
              "name": "z",
              "range": [
                15,
                16,
              ],
              "start": 15,
              "type": "Identifier",
            },
            "operator": "*",
            "range": [
              15,
              26,
            ],
            "right": {
              "end": 25,
              "left": {
                "end": 21,
                "name": "x",
                "range": [
                  20,
                  21,
                ],
                "start": 20,
                "type": "Identifier",
              },
              "operator": "+",
              "range": [
                20,
                25,
              ],
              "right": {
                "end": 25,
                "name": "y",
                "range": [
                  24,
                  25,
                ],
                "start": 24,
                "type": "Identifier",
              },
              "start": 20,
              "type": "BinaryExpression",
            },
            "start": 15,
            "type": "BinaryExpression",
          },
          "end": 26,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 11,
              "name": "z",
              "range": [
                10,
                11,
              ],
              "start": 10,
              "type": "Identifier",
            },
          ],
          "range": [
            10,
            26,
          ],
          "start": 10,
          "type": "ArrowFunctionExpression",
        },
        "end": 26,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 2,
            "name": "x",
            "range": [
              1,
              2,
            ],
            "start": 1,
            "type": "Identifier",
          },
          {
            "end": 5,
            "name": "y",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          26,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        26,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y) => z => z * (x + y); 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "left": {
              "name": "z",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "BinaryExpression",
          },
          "expression": true,
          "generator": false,
          "params": [
            {
              "name": "z",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x, y)=>x; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "name": "x",
          "type": "Identifier",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
          {
            "name": "y",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > (x=1) => x * x 1`] = `
{
  "body": [
    {
      "end": 14,
      "expression": {
        "async": false,
        "body": {
          "end": 14,
          "left": {
            "end": 10,
            "name": "x",
            "range": [
              9,
              10,
            ],
            "start": 9,
            "type": "Identifier",
          },
          "operator": "*",
          "range": [
            9,
            14,
          ],
          "right": {
            "end": 14,
            "name": "x",
            "range": [
              13,
              14,
            ],
            "start": 13,
            "type": "Identifier",
          },
          "start": 9,
          "type": "BinaryExpression",
        },
        "end": 14,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 4,
            "left": {
              "end": 2,
              "name": "x",
              "range": [
                1,
                2,
              ],
              "start": 1,
              "type": "Identifier",
            },
            "range": [
              1,
              4,
            ],
            "right": {
              "end": 4,
              "range": [
                3,
                4,
              ],
              "start": 3,
              "type": "Literal",
              "value": 1,
            },
            "start": 1,
            "type": "AssignmentPattern",
          },
        ],
        "range": [
          0,
          14,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        14,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "range": [
    0,
    14,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a = (b) => c; 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "async": false,
          "body": {
            "name": "c",
            "type": "Identifier",
          },
          "expression": true,
          "generator": false,
          "params": [
            {
              "name": "b",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a => a + x 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "async": false,
        "body": {
          "end": 10,
          "left": {
            "end": 6,
            "name": "a",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "operator": "+",
          "range": [
            5,
            10,
          ],
          "right": {
            "end": 10,
            "name": "x",
            "range": [
              9,
              10,
            ],
            "start": 9,
            "type": "Identifier",
          },
          "start": 5,
          "type": "BinaryExpression",
        },
        "end": 10,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          10,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a => a / x 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "async": false,
        "body": {
          "end": 10,
          "left": {
            "end": 6,
            "name": "a",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "operator": "/",
          "range": [
            5,
            10,
          ],
          "right": {
            "end": 10,
            "name": "x",
            "range": [
              9,
              10,
            ],
            "start": 9,
            "type": "Identifier",
          },
          "start": 5,
          "type": "BinaryExpression",
        },
        "end": 10,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          10,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a => x() 1`] = `
{
  "body": [
    {
      "end": 8,
      "expression": {
        "async": false,
        "body": {
          "arguments": [],
          "callee": {
            "end": 6,
            "name": "x",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "end": 8,
          "optional": false,
          "range": [
            5,
            8,
          ],
          "start": 5,
          "type": "CallExpression",
        },
        "end": 8,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          8,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        8,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 8,
  "range": [
    0,
    8,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a => x.foo 1`] = `
{
  "body": [
    {
      "end": 10,
      "expression": {
        "async": false,
        "body": {
          "computed": false,
          "end": 10,
          "object": {
            "end": 6,
            "name": "x",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 10,
            "name": "foo",
            "range": [
              7,
              10,
            ],
            "start": 7,
            "type": "Identifier",
          },
          "range": [
            5,
            10,
          ],
          "start": 5,
          "type": "MemberExpression",
        },
        "end": 10,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          10,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        10,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "range": [
    0,
    10,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a => x[foo] 1`] = `
{
  "body": [
    {
      "end": 11,
      "expression": {
        "async": false,
        "body": {
          "computed": true,
          "end": 11,
          "object": {
            "end": 6,
            "name": "x",
            "range": [
              5,
              6,
            ],
            "start": 5,
            "type": "Identifier",
          },
          "optional": false,
          "property": {
            "end": 10,
            "name": "foo",
            "range": [
              7,
              10,
            ],
            "start": 7,
            "type": "Identifier",
          },
          "range": [
            5,
            11,
          ],
          "start": 5,
          "type": "MemberExpression",
        },
        "end": 11,
        "expression": true,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "a",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          11,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        11,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "range": [
    0,
    11,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a, b => 0; 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "async": false,
            "body": {
              "type": "Literal",
              "value": 0,
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "b",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > a, b, (c, d) => 0; 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "name": "a",
            "type": "Identifier",
          },
          {
            "name": "b",
            "type": "Identifier",
          },
          {
            "async": false,
            "body": {
              "type": "Literal",
              "value": 0,
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "c",
                "type": "Identifier",
              },
              {
                "name": "d",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > arguments => 42 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "type": "Literal",
          "value": 42,
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "arguments",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > async (eval) => "use strict"; 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "type": "Literal",
          "value": "use strict",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "eval",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > async let => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": true,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "let",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > async let => {}, let => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "async": true,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "let",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "let",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > bar ? ( (x, y) => (u, v) => x*u + y*v ) : baz; 1`] = `
{
  "body": [
    {
      "end": 46,
      "expression": {
        "alternate": {
          "end": 45,
          "name": "baz",
          "range": [
            42,
            45,
          ],
          "start": 42,
          "type": "Identifier",
        },
        "consequent": {
          "async": false,
          "body": {
            "async": false,
            "body": {
              "end": 37,
              "left": {
                "end": 31,
                "left": {
                  "end": 29,
                  "name": "x",
                  "range": [
                    28,
                    29,
                  ],
                  "start": 28,
                  "type": "Identifier",
                },
                "operator": "*",
                "range": [
                  28,
                  31,
                ],
                "right": {
                  "end": 31,
                  "name": "u",
                  "range": [
                    30,
                    31,
                  ],
                  "start": 30,
                  "type": "Identifier",
                },
                "start": 28,
                "type": "BinaryExpression",
              },
              "operator": "+",
              "range": [
                28,
                37,
              ],
              "right": {
                "end": 37,
                "left": {
                  "end": 35,
                  "name": "y",
                  "range": [
                    34,
                    35,
                  ],
                  "start": 34,
                  "type": "Identifier",
                },
                "operator": "*",
                "range": [
                  34,
                  37,
                ],
                "right": {
                  "end": 37,
                  "name": "v",
                  "range": [
                    36,
                    37,
                  ],
                  "start": 36,
                  "type": "Identifier",
                },
                "start": 34,
                "type": "BinaryExpression",
              },
              "start": 28,
              "type": "BinaryExpression",
            },
            "end": 37,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 20,
                "name": "u",
                "range": [
                  19,
                  20,
                ],
                "start": 19,
                "type": "Identifier",
              },
              {
                "end": 23,
                "name": "v",
                "range": [
                  22,
                  23,
                ],
                "start": 22,
                "type": "Identifier",
              },
            ],
            "range": [
              18,
              37,
            ],
            "start": 18,
            "type": "ArrowFunctionExpression",
          },
          "end": 37,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 10,
              "name": "x",
              "range": [
                9,
                10,
              ],
              "start": 9,
              "type": "Identifier",
            },
            {
              "end": 13,
              "name": "y",
              "range": [
                12,
                13,
              ],
              "start": 12,
              "type": "Identifier",
            },
          ],
          "range": [
            8,
            37,
          ],
          "start": 8,
          "type": "ArrowFunctionExpression",
        },
        "end": 45,
        "range": [
          0,
          45,
        ],
        "start": 0,
        "test": {
          "end": 3,
          "name": "bar",
          "range": [
            0,
            3,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
      "range": [
        0,
        46,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 46,
  "range": [
    0,
    46,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > const a = () => {return (3, 4);}; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 32,
          "id": {
            "end": 7,
            "name": "a",
            "range": [
              6,
              7,
            ],
            "start": 6,
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "body": [
                {
                  "argument": {
                    "end": 29,
                    "expressions": [
                      {
                        "end": 26,
                        "range": [
                          25,
                          26,
                        ],
                        "start": 25,
                        "type": "Literal",
                        "value": 3,
                      },
                      {
                        "end": 29,
                        "range": [
                          28,
                          29,
                        ],
                        "start": 28,
                        "type": "Literal",
                        "value": 4,
                      },
                    ],
                    "range": [
                      25,
                      29,
                    ],
                    "start": 25,
                    "type": "SequenceExpression",
                  },
                  "end": 31,
                  "range": [
                    17,
                    31,
                  ],
                  "start": 17,
                  "type": "ReturnStatement",
                },
              ],
              "end": 32,
              "range": [
                16,
                32,
              ],
              "start": 16,
              "type": "BlockStatement",
            },
            "end": 32,
            "expression": false,
            "generator": false,
            "params": [],
            "range": [
              10,
              32,
            ],
            "start": 10,
            "type": "ArrowFunctionExpression",
          },
          "range": [
            6,
            32,
          ],
          "start": 6,
          "type": "VariableDeclarator",
        },
      ],
      "end": 33,
      "kind": "const",
      "range": [
        0,
        33,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 33,
  "range": [
    0,
    33,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > e => "test" 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "type": "Literal",
          "value": "test",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "e",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > e => { label: 42 } 1`] = `
{
  "body": [
    {
      "end": 18,
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "body": {
                "end": 16,
                "expression": {
                  "end": 16,
                  "range": [
                    14,
                    16,
                  ],
                  "start": 14,
                  "type": "Literal",
                  "value": 42,
                },
                "range": [
                  14,
                  16,
                ],
                "start": 14,
                "type": "ExpressionStatement",
              },
              "end": 16,
              "label": {
                "end": 12,
                "name": "label",
                "range": [
                  7,
                  12,
                ],
                "start": 7,
                "type": "Identifier",
              },
              "range": [
                7,
                16,
              ],
              "start": 7,
              "type": "LabeledStatement",
            },
          ],
          "end": 18,
          "range": [
            5,
            18,
          ],
          "start": 5,
          "type": "BlockStatement",
        },
        "end": 18,
        "expression": false,
        "generator": false,
        "params": [
          {
            "end": 1,
            "name": "e",
            "range": [
              0,
              1,
            ],
            "start": 0,
            "type": "Identifier",
          },
        ],
        "range": [
          0,
          18,
        ],
        "start": 0,
        "type": "ArrowFunctionExpression",
      },
      "range": [
        0,
        18,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "range": [
    0,
    18,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > f = ([[,] = g()]) => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "f",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "expression": false,
          "generator": false,
          "params": [
            {
              "elements": [
                {
                  "left": {
                    "elements": [
                      null,
                    ],
                    "type": "ArrayPattern",
                  },
                  "right": {
                    "arguments": [],
                    "callee": {
                      "name": "g",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "type": "CallExpression",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > f = ([[,] = g()]) => {} 2`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "f",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "async": false,
          "body": {
            "body": [],
            "type": "BlockStatement",
          },
          "expression": false,
          "generator": false,
          "params": [
            {
              "elements": [
                {
                  "left": {
                    "elements": [
                      null,
                    ],
                    "type": "ArrayPattern",
                  },
                  "right": {
                    "arguments": [],
                    "callee": {
                      "name": "g",
                      "type": "Identifier",
                    },
                    "optional": false,
                    "type": "CallExpression",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > fn = (a, b, ...c) => c; 1`] = `
{
  "body": [
    {
      "end": 23,
      "expression": {
        "end": 22,
        "left": {
          "end": 2,
          "name": "fn",
          "range": [
            0,
            2,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "range": [
          0,
          22,
        ],
        "right": {
          "async": false,
          "body": {
            "end": 22,
            "name": "c",
            "range": [
              21,
              22,
            ],
            "start": 21,
            "type": "Identifier",
          },
          "end": 22,
          "expression": true,
          "generator": false,
          "params": [
            {
              "end": 7,
              "name": "a",
              "range": [
                6,
                7,
              ],
              "start": 6,
              "type": "Identifier",
            },
            {
              "end": 10,
              "name": "b",
              "range": [
                9,
                10,
              ],
              "start": 9,
              "type": "Identifier",
            },
            {
              "argument": {
                "end": 16,
                "name": "c",
                "range": [
                  15,
                  16,
                ],
                "start": 15,
                "type": "Identifier",
              },
              "end": 16,
              "range": [
                12,
                16,
              ],
              "start": 12,
              "type": "RestElement",
            },
          ],
          "range": [
            5,
            22,
          ],
          "start": 5,
          "type": "ArrowFunctionExpression",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > foo ? bar : baz => {}; 1`] = `
{
  "body": [
    {
      "end": 22,
      "expression": {
        "alternate": {
          "async": false,
          "body": {
            "body": [],
            "end": 21,
            "range": [
              19,
              21,
            ],
            "start": 19,
            "type": "BlockStatement",
          },
          "end": 21,
          "expression": false,
          "generator": false,
          "params": [
            {
              "end": 15,
              "name": "baz",
              "range": [
                12,
                15,
              ],
              "start": 12,
              "type": "Identifier",
            },
          ],
          "range": [
            12,
            21,
          ],
          "start": 12,
          "type": "ArrowFunctionExpression",
        },
        "consequent": {
          "end": 9,
          "name": "bar",
          "range": [
            6,
            9,
          ],
          "start": 6,
          "type": "Identifier",
        },
        "end": 21,
        "range": [
          0,
          21,
        ],
        "start": 0,
        "test": {
          "end": 3,
          "name": "foo",
          "range": [
            0,
            3,
          ],
          "start": 0,
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > foo(() => {}) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [],
            "type": "ArrowFunctionExpression",
          },
        ],
        "callee": {
          "name": "foo",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > foo((x, y) => {}) 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "x",
                "type": "Identifier",
              },
              {
                "name": "y",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "callee": {
          "name": "foo",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > for ( f => ( "key" in {}) ; 0;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "async": false,
        "body": {
          "left": {
            "type": "Literal",
            "value": "key",
          },
          "operator": "in",
          "right": {
            "properties": [],
            "type": "ObjectExpression",
          },
          "type": "BinaryExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "f",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "test": {
        "type": "Literal",
        "value": 0,
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > let => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "let",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > let => {} 2`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "let",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > let => {}, let => {} 1`] = `
{
  "body": [
    {
      "expression": {
        "expressions": [
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "let",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          {
            "async": false,
            "body": {
              "body": [],
              "type": "BlockStatement",
            },
            "expression": false,
            "generator": false,
            "params": [
              {
                "name": "let",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
        ],
        "type": "SequenceExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > let => a + b 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "left": {
            "name": "a",
            "type": "Identifier",
          },
          "operator": "+",
          "right": {
            "name": "b",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "let",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > let x = ({y=z}=e) => d 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 22,
          "id": {
            "end": 5,
            "name": "x",
            "range": [
              4,
              5,
            ],
            "start": 4,
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "end": 22,
              "name": "d",
              "range": [
                21,
                22,
              ],
              "start": 21,
              "type": "Identifier",
            },
            "end": 22,
            "expression": true,
            "generator": false,
            "params": [
              {
                "end": 16,
                "left": {
                  "end": 14,
                  "properties": [
                    {
                      "computed": false,
                      "end": 13,
                      "key": {
                        "end": 11,
                        "name": "y",
                        "range": [
                          10,
                          11,
                        ],
                        "start": 10,
                        "type": "Identifier",
                      },
                      "kind": "init",
                      "method": false,
                      "range": [
                        10,
                        13,
                      ],
                      "shorthand": true,
                      "start": 10,
                      "type": "Property",
                      "value": {
                        "end": 13,
                        "left": {
                          "end": 11,
                          "name": "y",
                          "range": [
                            10,
                            11,
                          ],
                          "start": 10,
                          "type": "Identifier",
                        },
                        "range": [
                          10,
                          13,
                        ],
                        "right": {
                          "end": 13,
                          "name": "z",
                          "range": [
                            12,
                            13,
                          ],
                          "start": 12,
                          "type": "Identifier",
                        },
                        "start": 10,
                        "type": "AssignmentPattern",
                      },
                    },
                  ],
                  "range": [
                    9,
                    14,
                  ],
                  "start": 9,
                  "type": "ObjectPattern",
                },
                "range": [
                  9,
                  16,
                ],
                "right": {
                  "end": 16,
                  "name": "e",
                  "range": [
                    15,
                    16,
                  ],
                  "start": 15,
                  "type": "Identifier",
                },
                "start": 9,
                "type": "AssignmentPattern",
              },
            ],
            "range": [
              8,
              22,
            ],
            "start": 8,
            "type": "ArrowFunctionExpression",
          },
          "range": [
            4,
            22,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 22,
      "kind": "let",
      "range": [
        0,
        22,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 22,
  "range": [
    0,
    22,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > var x = ([x = 25]) => x => x => ({x} = {}) 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "x",
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "async": false,
              "body": {
                "async": false,
                "body": {
                  "left": {
                    "properties": [
                      {
                        "computed": false,
                        "key": {
                          "name": "x",
                          "type": "Identifier",
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": true,
                        "type": "Property",
                        "value": {
                          "name": "x",
                          "type": "Identifier",
                        },
                      },
                    ],
                    "type": "ObjectPattern",
                  },
                  "operator": "=",
                  "right": {
                    "properties": [],
                    "type": "ObjectExpression",
                  },
                  "type": "AssignmentExpression",
                },
                "expression": true,
                "generator": false,
                "params": [
                  {
                    "name": "x",
                    "type": "Identifier",
                  },
                ],
                "type": "ArrowFunctionExpression",
              },
              "expression": true,
              "generator": false,
              "params": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "elements": [
                  {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "right": {
                      "type": "Literal",
                      "value": 25,
                    },
                    "type": "AssignmentPattern",
                  },
                ],
                "type": "ArrayPattern",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > var x = ({x = 30}, [y], z) => x 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "x",
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "name": "x",
              "type": "Identifier",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "properties": [
                  {
                    "computed": false,
                    "key": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": true,
                    "type": "Property",
                    "value": {
                      "left": {
                        "name": "x",
                        "type": "Identifier",
                      },
                      "right": {
                        "type": "Literal",
                        "value": 30,
                      },
                      "type": "AssignmentPattern",
                    },
                  },
                ],
                "type": "ObjectPattern",
              },
              {
                "elements": [
                  {
                    "name": "y",
                    "type": "Identifier",
                  },
                ],
                "type": "ArrayPattern",
              },
              {
                "name": "z",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > var x = foo => x => x => x => {x} 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "x",
            "type": "Identifier",
          },
          "init": {
            "async": false,
            "body": {
              "async": false,
              "body": {
                "async": false,
                "body": {
                  "async": false,
                  "body": {
                    "body": [
                      {
                        "expression": {
                          "name": "x",
                          "type": "Identifier",
                        },
                        "type": "ExpressionStatement",
                      },
                    ],
                    "type": "BlockStatement",
                  },
                  "expression": false,
                  "generator": false,
                  "params": [
                    {
                      "name": "x",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrowFunctionExpression",
                },
                "expression": true,
                "generator": false,
                "params": [
                  {
                    "name": "x",
                    "type": "Identifier",
                  },
                ],
                "type": "ArrowFunctionExpression",
              },
              "expression": true,
              "generator": false,
              "params": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
              ],
              "type": "ArrowFunctionExpression",
            },
            "expression": true,
            "generator": false,
            "params": [
              {
                "name": "foo",
                "type": "Identifier",
              },
            ],
            "type": "ArrowFunctionExpression",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > x => (y, z) => z * (x + y) 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "async": false,
          "body": {
            "left": {
              "name": "z",
              "type": "Identifier",
            },
            "operator": "*",
            "right": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "+",
              "right": {
                "name": "y",
                "type": "Identifier",
              },
              "type": "BinaryExpression",
            },
            "type": "BinaryExpression",
          },
          "expression": true,
          "generator": false,
          "params": [
            {
              "name": "y",
              "type": "Identifier",
            },
            {
              "name": "z",
              "type": "Identifier",
            },
          ],
          "type": "ArrowFunctionExpression",
        },
        "expression": true,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Expressions - Arrow > Expressions - Arrow (pass) > x => { function x() {} } 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "async": false,
              "body": {
                "body": [],
                "type": "BlockStatement",
              },
              "generator": false,
              "id": {
                "name": "x",
                "type": "Identifier",
              },
              "params": [],
              "type": "FunctionDeclaration",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "x",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
