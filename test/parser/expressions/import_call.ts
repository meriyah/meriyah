import * as t from 'node:assert/strict';
import { describe, it } from 'vitest';
import { parseSource } from '../../../src/parser';
import { fail, pass } from '../../test-utils';

describe('ImportCall', () => {
  fail('Import call (fail)', [
    'function failsParse() { return import.then(); }',
    'import.then(doLoad);',
    'import(',
    'import)',
    'import()',
    'import("x',
    'import("x"]',
    'import["x")',
    'import = x',
    'import[',
    'import[]',
    'import]',
    'import[x]',
    'import{',
    { code: 'import[]', options: { sourceType: 'module' } },
    { code: 'import]', options: { sourceType: 'module' } },
    { code: 'import[x]', options: { sourceType: 'module' } },
    { code: 'import{', options: { sourceType: 'module' } },
    { code: 'import{x', options: { sourceType: 'module' } },
    'import{x}',
    'import(...y)',
    'import(,)',
    'import(,y)',
    'import(;)',
    '[import]',
    '{import}',
    'import+',
    'import = 1',
    'import.wat',
    'new import(x)',
    'let f = () => { import(); };',
    'let f = () => { import(...[""]); }; new import(x)',
    'import("")++',
    'import("") -= 1;',
    '(async () => await import())',
    'async function f() { import(...[""]); }',
    '(async () => await import())',
    'async function * f() { await new import("") }',
    'label: { import(); };',
    { code: 'do { import(...[""]); } while (false);', options: { sourceType: 'module' } },
    'function fn() { new import(""); }',
    'if (true) { import(...[""]); }',
    '(async () => await import())',
    'with (import(...[""])) {}',
    'import();',
    '[import(1)] = [1];',
    '[import(x).then()] = [1];',
    '(a, import(foo)) => {}',
    '(1, import(1)) => {}',
    '({import(y=x)} = {"a": 1});',
    '({import(foo)} = {"a": 1});',
    '({import(1)} = {"a": 1});',
    '(import(foo)) => {}',
    '(import(1)) => {}',
    '(import(y=x)) => {}',
    '(a, import(x).then()) => {}',
    '(1, import(foo)) => {}',
    'function failsParse() { return import.then(); }',
    'var dynImport = import; dynImport("http");',
    'import()',
    'import(...[a])',
    'new import(source)',
    'new import(source)',
    '(import(foo)) => {}',
    '(import(y=x)) => {}',
    '(import(import(x))) => {}',
    '(1, import(x).then()) => {}',
    '[import(y=x)] = [1];',
    '[import(x).then()] = [1];',
    '[import(import(x))] = [1];',
    'import("") ++',
    'import("") += 5',
    'import("") -= 5',
    'import("") --',
    'import("") = 2',
    'import("") <<= 2',
    'import("") >>= 2',
    'import("") >>>= 2',
    'import("") **= 2',
    'new import(x);',
  ]);

  for (const arg of [
    'let f = () => { import("foo"); };',
    'f(...[import(y=x)])',
    'x = {[import(y=x)]: 1}',
    'var {[import(y=x)]: x} = {}',
    '({[import(y=x)]: x} = {})',
    'async () => { await import(x) }',
    'const importResult = import("test.js");',
    'let Layout = () => import("../foo/bar/zoo.js")',
    '"use strict"; import("test.js");',
    'function loadImport(file) { return import(`test/${file}.js`); }',
    'function loadImport(file) { return import(file).then(() => {}), console.log("Done."); }',
    'function loadImport(file) { import(file).then(() => {}), console.log("Done."); }',
    '() => { import(x) }',
    '(import(y=x))',
    '{import(y=x)}',
    'import(delete obj.prop);',
    'import(void 0);',
    'import(typeof {});',
    'import(a + b);',
    'import(+void 0);',
    'import(-void 0);',
    'import(!void 0);',
    'import(~void 0);',
    'import(delete void typeof +-~! 0);',
    'let f = () => import("");',
    '(async () => await import(import(import("foo"))));',
    'async function * f() { await import(import(import("foo"))) }',
    'async function * f() { await import("foo") }',
    'if (false) { } else { import(import(import("foo"))); }',
    'if (true) import("foo");',
    'function fn() { return import("foo"); }',
    'let x = 0; while (!x) { x++;  import(import(import("foo"))); };',
    'import("foo");',
    "import('./module.js')",
    'import(import(x))',
    'x = import(x)',
    'foo(import("foo").den());',
    'import(/foo/)',
    'var x = import(x)',
    'let x = import(x)',
    'new (import(x));',
    'new (import(x));',
    'foo(import("foo").den());',
    'for(x of import(x)) {}',
    'import(x).then()',
    'import(x, y).then(z);',
    'import(x, y)',
    'import(x,)',
    'let f = () => import("", "");',
    '(async () => { await import("", "") });',
    'import("", "");',
    'import("", "");',
    'import("",);',
    'import(a, b)',
    'import(source,)',
    'let f = () => import("",);',
    'let f = () => import("", "");',
    'if (false) {} else import("", "");',
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { sourceType: 'module' });
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`);
      });
    });
  }

  pass('ImportCall (pass)', [
    { code: 'import("lib.js").then(doThis);', options: { sourceType: 'module', ranges: true } },
    { code: 'async function bar(){ await import("./nchanged") }', options: { next: true } },
    'function loadImport(file) { import(file).then(() => {}), console.log("Done."); }',
  ]);
});
