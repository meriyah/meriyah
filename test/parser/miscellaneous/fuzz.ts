import * as t from 'node:assert/strict';
import { outdent } from 'outdent';
import { describe, it } from 'vitest';
import { parseSource } from '../../../src/parser';

// Various tests generated by a JS fuzzer

describe('Miscellaneous - Fuzz', () => {
  for (const arg of [
    outdent`
      try {
        function nygvdtrorn({PÀ: j, "": w, [((2e308))]: t = (true)} = (((true).eval = (class {}))), ysrnpjb = (function yg(l = (new.target), u = (new.target), {}, [], {}, ...t) {
          debugger;
        }), reqivfsweq = (this), ...{}) {
          for (otou of ([((null)[(263.491)] ^= (((null)))), , , , , ])) throw (((function* d(h, x) {
            "use strict";
            "use strict";
            "use strict";
            "use strict"
          })));
          for (const k of (((({})) ? (('zoo')) : (2e308)))) try {} catch (s) {}
          function* nkblpidxyeyxdnk(ckmebkmngwka, s = (new (null)), [] = (((/[^[-\\x74*-\\x75\\x6B2-\\xfB]/gmu).public)), [] = ((/(?=(?!))/u))) {
            switch (((class {}))) {
              case ((/\\b\\b\\b\\B\\xFf/g)):
              case (true):
              case (this):
              case (/6\\b$/guy):
              case (2e308):
              default:
              case (this):
              case ("«!"):
              case (1775.47):
            }
            while (((((j)) ? ((null)) : (j)))) if ((6.250803124328415e23)) ;
            x: for (;;) return;
            (null)
            ;
          }
          ((i |= (new.target)));
        }
      } catch (le) {
        {
          throw ("t");
          ;
          d: ;
          try {} catch (q) {}
        }
        if (((((null) && (0))))) throw (({})); else ;
      } finally {}
    `,
    outdent`
      try {
        class gswsthnadhexi {
          set [((("")))] (psarupq) {
            "use strict";
            do debugger; while (((true)));
            if (((true))) debugger;
            class l {}
          }
          static get [((((true)) == (("É¦Ü"))))]() {
            "use strict";
            throw ((("[8")));
            for (;;) return;
            debugger;
          }
          static set [/\\0?/giy] ([[], q, ...[]]) {
            return;
            eval: for (;;) return;
            {}
            try {} finally {}
          }
          static set [(-eval)] ([] = []) {
            "string";
            debugger;
            while ((((0)))) continue;
            w: ;
          }
          static *">U9"() {}
        }
        ((this));
        switch ((class extends (([(class {}), ...(7245.62), (({})), ...((this))])) {
          static get [true]() {}
          set [("")] (c) {
            "use strict";
            '"f7­';
            "use strict";
          }
          static [(this)]() {}
          static get [(/[-)-\\q+-\\W-]?/iy)]() {
            "use strict";
          }
        })) {
          case (null):
            while ((/^$/gim)) for (;;) break;
            pwogx: ;
            switch (("aøßY")) {
              case (/(?!(?!)?)/gy):
              default:
              case (2e308):
            }
            switch ((2e308)) {
              case (null):
            }
          case ((((((--h)))))):
        }
        do switch (((arguments) ? (((++u))) : ((++x)))) {
          case this:
            (((eval)));
            (((0)));
            try {} finally {}
          default:
            switch ("string") {
              default:
            }
            switch (((589794971639690))) {}
            while ((/(?!\\xDE*?)/imu)) debugger;
            continue;
          case ((((eval)[(false)]))):
            while (((this))) break;
            throw (null);
            y: for (;;) debugger;
            throw (this)
          case (() => {
            "use strict";
          }):
          case (((null) ? (null) : null)):
            while (true) debugger;
            while ((false)) ;
          case ((--q)):
            try {} catch (d) {}
            switch (("string")) {}
          case (((((/\\x6d\\b\\u49Ff/)).with))):
            do debugger; while ((/[)-8\\x84-\\xCd-]/muy));
            while (("")) continue;
            while ((r)) debugger;
            break
        } while ((([...(f), (((("")))[(null)] %= "x·"), ...(this), ...null, , ]) ? (typeof ((5765 <= ((/((?:))*/gimy))))) : ((2e308).break)));
        class eurvuuuq {
          static *[(this)]() {
            "";
          }
          set [(((919582721026900) >>> false))] ({[((true))]: n = (("ù"))}) {
            return;
            debugger;
            while ((this)) return;
          }
          set [(2e308)] ([] = ((this)())) {
            switch (new.target) {}
            throw ((5.836270662185278e130));
          }
        }
      } finally {}
      try {} catch (pxyyqdebctfmujsc) {
        do try {} catch (q) {} while ((e = 8.635821098822318e246, (class {})));
        throw (f ++);
        try {
          for (;;) continue;
        } finally {
          try {} catch (k) {}
          for (;;) break;
          var m = false;
        }
      };
    `,
    outdent`
      do switch ((mkssentgaoioo = function* (d, p, q = (6055.45), [], ...u) {
        ;
        {}
        if ((yield)) ;
        for (;;) ;
        try {} catch (n) {}
      }, qlaeiqk) => (("&"))) {
        default:
          2e308
          try {
            while (this) ;
            switch (("^")) {
              default:
            }
            class c {}
            for (;;) break;
            for (n in (this)) break
          } catch (x) {} finally {
            ;
            const j = (this)
            for (;;) debugger
            function* a(k, g, h, d) {
              "use strict"
              "use strict"
            }
          }
          arguments: switch ((((8.109626746903049e291[null] /= (null))))) {
            case 2e308:
            case /(?=(?=[]))/gmu:
            case (true):
            case ((true)):
            case (((this))):
          }
          class atyrhoqwrjmlyd extends (((2e308))) {
            static set [("7tË×E")] (b) {
              "use strict";
              "";
              "use strict";
              "use strict";
            }
            static set [((null))] (h = ((this))) {
            }
            constructor() {
              "use strict"
            }
            static get [((2926))]() {
              ""
              "use strict"
            }
            static set [null] (b = ((eval))) {}
          }
          do ; while (({v, arguments, arguments}));
        case ((class extends ((((0x9B4851D271024)).k)(true, () => arguments)) {
          static get [(true)]() {
          }
          "a7JQ×"() {}
          static *"Ïït\u00A0-"() {}
          static '"Ï'() {
            "use strict";
          }
        })):
      } while (null);
    `,
    outdent`
      if ("string") do try {
        for (o in []) eval: for (;;) debugger;
        {}
      } catch ({}) {
        for (u in (/[h-]/imy)) continue
      } finally {
        continue;
        ("x");
        try {} finally {}
        eval: for (var n of ((this))) debugger
        try {} catch (s) {}
      } while ([, ...((null)), (null), , , ][{arguments}] >>= "!]·"); else ;
      function* rceuxhnojqtemyc(cswkdjkfeekubh = (([, ...((class extends (([])) {
        get [((this))]() {
          "use strict"
        }
      })), , ...q <<= (function (o) {
        "use strict"
      }), ...(new true(t **= (0)))]))) {
        for (; new (eval[(/\\xF1\\b\\b\\B\\x22/gmuy.instanceof /= (() => ((('kendon')))))]);) do arguments: for (var k = (this); (/[^ -]/gy); (class {})) while ((this)) ; while ((/[-*-\\x85?-{-]/imu))
        {
          for (((2e308)); (0x1E898CAFF70604);) try {} catch (t) {}
        }
      }
    `,
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
    'a',
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { webcompat: true });
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { webcompat: true, lexical: true });
      });
    });
  }
});
