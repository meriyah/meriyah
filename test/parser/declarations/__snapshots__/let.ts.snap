// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; const [let] = []; 1`] = `
"SyntaxError [1:24-1:25]: The identifier 'let' must not be in expression position in strict mode
> 1 | "use strict"; const [let] = [];
    |                         ^ The identifier 'let' must not be in expression position in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; const { let } = {}; 1`] = `
"SyntaxError [1:26-1:27]: Unexpected strict mode reserved word
> 1 | "use strict"; const { let } = {};
    |                           ^ Unexpected strict mode reserved word"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; const let = 1; 1`] = `
"SyntaxError [1:20-1:23]: Unexpected strict mode reserved word
> 1 | "use strict"; const let = 1;
    |                     ^^^ Unexpected strict mode reserved word"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; let [let] = []; 1`] = `
"SyntaxError [1:22-1:23]: The identifier 'let' must not be in expression position in strict mode
> 1 | "use strict"; let [let] = [];
    |                       ^ The identifier 'let' must not be in expression position in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; let { let } = {}; 1`] = `
"SyntaxError [1:24-1:25]: Unexpected strict mode reserved word
> 1 | "use strict"; let { let } = {};
    |                         ^ Unexpected strict mode reserved word"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; let(100) 1`] = `
"SyntaxError [1:17-1:18]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | "use strict"; let(100)
    |                  ^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; let, let, let, let 1`] = `
"SyntaxError [1:17-1:18]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | "use strict"; let, let, let, let
    |                  ^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > "use strict"; let: 34 1`] = `
"SyntaxError [1:17-1:18]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | "use strict"; let: 34
    |                  ^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > ([(x().foo)]) => x 1`] = `
"SyntaxError [1:14-1:16]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([(x().foo)]) => x
    |               ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > ([(x)]) => x 1`] = `
"SyntaxError [1:8-1:10]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([(x)]) => x
    |         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > ([x().foo]) => x 1`] = `
"SyntaxError [1:12-1:14]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([x().foo]) => x
    |             ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > ([x()]) => x 1`] = `
"SyntaxError [1:8-1:10]: The left-hand side of the arrow can only be destructed through assignment
> 1 | ([x()]) => x
    |         ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > (let {"a": a = 1} of []) 1`] = `
"SyntaxError [1:5-1:6]: Expected ')'
> 1 | (let {"a": a = 1} of [])
    |      ^ Expected ')'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > (o.f=1)=>0 1`] = `
"SyntaxError [1:7-1:9]: The left-hand side of the arrow can only be destructed through assignment
> 1 | (o.f=1)=>0
    |        ^^ The left-hand side of the arrow can only be destructed through assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > [x()] = x 1`] = `
"SyntaxError [1:8-1:9]: Invalid left-hand side in assignment
> 1 | [x()] = x
    |         ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > const [a, let, b] = [1, 2, 3]; 1`] = `
"SyntaxError [1:13-1:14]: 'A lexical declaration can't define a 'let' binding
> 1 | const [a, let, b] = [1, 2, 3];
    |              ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > const [let] = []; 1`] = `
"SyntaxError [1:10-1:11]: 'A lexical declaration can't define a 'let' binding
> 1 | const [let] = [];
    |           ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > const { let } = {}; 1`] = `
"SyntaxError [1:12-1:13]: 'A lexical declaration can't define a 'let' binding
> 1 | const { let } = {};
    |             ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > const let = 1, test = 2; 1`] = `
"SyntaxError [1:6-1:9]: 'A lexical declaration can't define a 'let' binding
> 1 | const let = 1, test = 2;
    |       ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > const let 1`] = `
"SyntaxError [1:6-1:9]: 'A lexical declaration can't define a 'let' binding
> 1 | const let
    |       ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > do let
[x] = 0
while (false); 1`] = `
"SyntaxError [2:0-2:1]: \`let 
 [\` is a restricted production at the start of a statement
  1 | do let
> 2 | [x] = 0
    | ^ \`let 
 [\` is a restricted production at the start of a statement
  3 | while (false);"
`;

exports[`Declarations - Let > Declarations - Let (fail) > do let [] while (a); 1`] = `
"SyntaxError [1:7-1:8]: \`let 
 [\` is a restricted production at the start of a statement
> 1 | do let [] while (a);
    |        ^ \`let 
 [\` is a restricted production at the start of a statement"
`;

exports[`Declarations - Let > Declarations - Let (fail) > do let [x] = 0; while (false); 1`] = `
"SyntaxError [1:7-1:8]: \`let 
 [\` is a restricted production at the start of a statement
> 1 | do let [x] = 0; while (false);
    |        ^ \`let 
 [\` is a restricted production at the start of a statement"
`;

exports[`Declarations - Let > Declarations - Let (fail) > do let x = 1; while (false) 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: 'identifier'
> 1 | do let x = 1; while (false)
    |        ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > do let x; while (false) 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: 'identifier'
> 1 | do let x; while (false)
    |        ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > do let x; while (false) 2`] = `
"SyntaxError [1:7-1:8]: Unexpected token: 'identifier'
> 1 | do let x; while (false)
    |        ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (;false;) let x = 1; 1`] = `
"SyntaxError [1:18-1:19]: Unexpected token: 'identifier'
> 1 | for (;false;) let x = 1;
    |                   ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let
foo() in x); 1`] = `
"SyntaxError [2:3-2:4]: Expected ';'
  1 | for (let
> 2 | foo() in x);
    |    ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let
foo()); 1`] = `
"SyntaxError [2:3-2:4]: Expected ';'
  1 | for (let
> 2 | foo());
    |    ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let
foo();;); 1`] = `
"SyntaxError [2:3-2:4]: Expected ';'
  1 | for (let
> 2 | foo();;);
    |    ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let
foo); 1`] = `
"SyntaxError [2:3-2:4]: Expected ';'
  1 | for (let
> 2 | foo);
    |    ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [...,] = obj); 1`] = `
"SyntaxError [1:13-1:14]: Unexpected token: ','
> 1 | for (let [...,] = obj);
    |              ^ Unexpected token: ','"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [...foo,,] = obj;;); 1`] = `
"SyntaxError [1:20-1:21]: The binding declaration is not destructible
> 1 | for (let [...foo,,] = obj;;);
    |                     ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [] = x); 1`] = `
"SyntaxError [1:15-1:16]: Expected ';'
> 1 | for (let [] = x);
    |                ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [foo = x];;); 1`] = `
"SyntaxError [1:18-1:19]: Missing initializer in destructuring declaration
> 1 | for (let [foo = x];;);
    |                   ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [foo,,bar] = arr); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (let [foo,,bar] = arr);
    |                          ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [foo], bar); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | for (let [foo], bar);
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [foo], bar;;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | for (let [foo], bar;;);
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [foo];;); 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | for (let [foo];;);
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let [let];;;) {} 1`] = `
"SyntaxError [1:13-1:14]: 'A lexical declaration can't define a 'let' binding
> 1 | for (let [let];;;) {}
    |              ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {,x} = obj;;); 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: ','
> 1 | for (let {,x} = obj;;);
    |           ^ Unexpected token: ','"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {[x]} = z;;); 1`] = `
"SyntaxError [1:13-1:14]: A computed property name must be followed by a colon or paren
> 1 | for (let {[x]} = z;;);
    |              ^ A computed property name must be followed by a colon or paren"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {[x]};;); 1`] = `
"SyntaxError [1:13-1:14]: A computed property name must be followed by a colon or paren
> 1 | for (let {[x]};;);
    |              ^ A computed property name must be followed by a colon or paren"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x : y, z} = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (let {x : y, z} = obj);
    |                          ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x : y} = obj); 1`] = `
"SyntaxError [1:22-1:23]: Expected ';'
> 1 | for (let {x : y} = obj);
    |                       ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x = y, z = a} = obj); 1`] = `
"SyntaxError [1:29-1:30]: Expected ';'
> 1 | for (let {x = y, z = a} = obj);
    |                              ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x, y : z} = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (let {x, y : z} = obj);
    |                          ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x,,} = obj;;); 1`] = `
"SyntaxError [1:12-1:13]: Unexpected token: ','
> 1 | for (let {x,,} = obj;;);
    |             ^ Unexpected token: ','"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x} = a, {y} = obj); 1`] = `
"SyntaxError [1:27-1:28]: Expected ';'
> 1 | for (let {x} = a, {y} = obj);
    |                            ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x} = a, y = obj); 1`] = `
"SyntaxError [1:25-1:26]: Expected ';'
> 1 | for (let {x} = a, y = obj);
    |                          ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x}, {y} in z); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | for (let {x}, {y} in z);
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x}, y); 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | for (let {x}, y);
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let {x}, y); 2`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | for (let {x}, y);
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo = bar in x); 1`] = `
"SyntaxError [1:9-1:21]: 'for-in' loop head declarations can not have an initializer
> 1 | for (let foo = bar in x);
    |          ^^^^^^^^^^^^ 'for-in' loop head declarations can not have an initializer"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo = bar); 1`] = `
"SyntaxError [1:18-1:19]: Expected ';'
> 1 | for (let foo = bar);
    |                   ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo = bar, zoo = boo in x); 1`] = `
"SyntaxError [1:20-1:32]: 'for-in' loop head declarations can not have an initializer
> 1 | for (let foo = bar, zoo = boo in x);
    |                     ^^^^^^^^^^^^ 'for-in' loop head declarations can not have an initializer"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo = bar, zoo = boo of x); 1`] = `
"SyntaxError [1:20-1:32]: 'for-of' loop head declarations can not have an initializer
> 1 | for (let foo = bar, zoo = boo of x);
    |                     ^^^^^^^^^^^^ 'for-of' loop head declarations can not have an initializer"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo = bar, zoo = boo); 1`] = `
"SyntaxError [1:29-1:30]: Expected ';'
> 1 | for (let foo = bar, zoo = boo);
    |                              ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo); 1`] = `
"SyntaxError [1:12-1:13]: Expected ';'
> 1 | for (let foo);
    |             ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo, bar in x); 1`] = `
"SyntaxError [1:18-1:20]: Invalid left-hand side in for-in loop: Must have a single binding
> 1 | for (let foo, bar in x);
    |                   ^^ Invalid left-hand side in for-in loop: Must have a single binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let foo, bar); 1`] = `
"SyntaxError [1:17-1:18]: Expected ';'
> 1 | for (let foo, bar);
    |                  ^ Expected ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for (let x, y, z, let = 1;;;) {} 1`] = `
"SyntaxError [1:18-1:21]: 'A lexical declaration can't define a 'let' binding
> 1 | for (let x, y, z, let = 1;;;) {}
    |                   ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > for(let let in { }) { }; 1`] = `
"SyntaxError [1:8-1:11]: 'A lexical declaration can't define a 'let' binding
> 1 | for(let let in { }) { };
    |         ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > function foo() { return {}; }; [foo()] = []; 1`] = `
"SyntaxError [1:41-1:42]: Invalid left-hand side in assignment
> 1 | function foo() { return {}; }; [foo()] = [];
    |                                          ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > function foo() { return {}; }; let [foo().x] = []; 1`] = `
"SyntaxError [1:45-1:46]: The binding declaration is not destructible
> 1 | function foo() { return {}; }; let [foo().x] = [];
    |                                              ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (1) let x = 10; 1`] = `
"SyntaxError [1:11-1:12]: Unexpected token: 'identifier'
> 1 | if (1) let x = 10;
    |            ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (true) {} else let x = 1; 1`] = `
"SyntaxError [1:22-1:23]: Unexpected token: 'identifier'
> 1 | if (true) {} else let x = 1;
    |                       ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (true) {} else let x; 1`] = `
"SyntaxError [1:22-1:23]: Unexpected token: 'identifier'
> 1 | if (true) {} else let x;
    |                       ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (true) {} else let x; 2`] = `
"SyntaxError [1:22-1:23]: Unexpected token: 'identifier'
> 1 | if (true) {} else let x;
    |                       ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (true) let x = 1; 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: 'identifier'
> 1 | if (true) let x = 1;
    |               ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (true) let x = 1; 2`] = `
"SyntaxError [1:14-1:15]: Unexpected token: 'identifier'
> 1 | if (true) let x = 1;
    |               ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (true) let x; 1`] = `
"SyntaxError [1:14-1:15]: Unexpected token: 'identifier'
> 1 | if (true) let x;
    |               ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (x) let [x] = y; else x; 1`] = `
"SyntaxError [1:11-1:12]: \`let 
 [\` is a restricted production at the start of a statement
> 1 | if (x) let [x] = y; else x;
    |            ^ \`let 
 [\` is a restricted production at the start of a statement"
`;

exports[`Declarations - Let > Declarations - Let (fail) > if (x) let: y; 1`] = `
"SyntaxError [1:10-1:11]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | if (x) let: y;
    |           ^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > label: let x; 1`] = `
"SyntaxError [1:11-1:12]: Unexpected token: 'identifier'
> 1 | label: let x;
    |            ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > label: let x; 2`] = `
"SyntaxError [1:11-1:12]: Unexpected token: 'identifier'
> 1 | label: let x;
    |            ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let
[let; 1`] = `
"SyntaxError [2:4-2:5]: 'A lexical declaration can't define a 'let' binding
  1 | let
> 2 | [let;
    |     ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let
eval(foo) 1`] = `
"SyntaxError [2:4-2:5]: Unexpected token: '('
  1 | let
> 2 | eval(foo)
    |     ^ Unexpected token: '('"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let
let 1`] = `
"SyntaxError [2:0-2:3]: 'A lexical declaration can't define a 'let' binding
  1 | let
> 2 | let
    | ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let
yield 0 1`] = `
"SyntaxError [2:6-2:7]: Unexpected token: 'number'
  1 | let
> 2 | yield 0
    |       ^ Unexpected token: 'number'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let  // start of a LexicalDeclaration, *not* an ASI opportunity
[let = "irrelevant initializer"; 1`] = `
"SyntaxError [2:5-2:6]: 'A lexical declaration can't define a 'let' binding
  1 | let  // start of a LexicalDeclaration, *not* an ASI opportunity
> 2 | [let = "irrelevant initializer";
    |      ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [((((a)))), b] = []; 1`] = `
"SyntaxError [1:19-1:20]: The binding declaration is not destructible
> 1 | let [((((a)))), b] = [];
    |                    ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [((a)] = []; 1`] = `
"SyntaxError [1:9-1:10]: Expected ')'
> 1 | let [((a)] = [];
    |          ^ Expected ')'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [((a)] = []; 2`] = `
"SyntaxError [1:9-1:10]: Expected ')'
> 1 | let [((a)] = [];
    |          ^ Expected ')'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [({x: 1}) = y] = []; 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | let [({x: 1}) = y] = [];
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [({x: 1})] = []; 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let [({x: 1})] = [];
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [(x().foo)] = x 1`] = `
"SyntaxError [1:16-1:17]: The binding declaration is not destructible
> 1 | let [(x().foo)] = x
    |                 ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [(x) = y] = []; 1`] = `
"SyntaxError [1:14-1:15]: The binding declaration is not destructible
> 1 | let [(x) = y] = [];
    |               ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [(x)] = []; 1`] = `
"SyntaxError [1:10-1:11]: The binding declaration is not destructible
> 1 | let [(x)] = [];
    |           ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [(x)] = x 1`] = `
"SyntaxError [1:10-1:11]: The binding declaration is not destructible
> 1 | let [(x)] = x
    |           ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [++a] = []; 1`] = `
"SyntaxError [1:10-1:11]: The binding declaration is not destructible
> 1 | let [++a] = [];
    |           ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...[ x ] = []] = []; 1`] = `
"SyntaxError [1:20-1:21]: The binding declaration is not destructible
> 1 | let [...[ x ] = []] = [];
    |                     ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...[ x ] = []] = []; 2`] = `
"SyntaxError [1:20-1:21]: The binding declaration is not destructible
> 1 | let [...[ x ] = []] = [];
    |                     ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...{ x } = []] = []; 1`] = `
"SyntaxError [1:20-1:21]: The binding declaration is not destructible
> 1 | let [...{ x } = []] = [];
    |                     ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...{ x }, y] = [1, 2, 3]; 1`] = `
"SyntaxError [1:18-1:19]: The binding declaration is not destructible
> 1 | let [...{ x }, y] = [1, 2, 3];
    |                   ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...a = 1] = []; 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let [...a = 1] = [];
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...a, ...b] = []; 1`] = `
"SyntaxError [1:17-1:18]: The binding declaration is not destructible
> 1 | let [...a, ...b] = [];
    |                  ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...a, b] = []; 1`] = `
"SyntaxError [1:14-1:15]: The binding declaration is not destructible
> 1 | let [...a, b] = [];
    |               ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...a,] = 0 1`] = `
"SyntaxError [1:12-1:13]: The binding declaration is not destructible
> 1 | let [...a,] = 0
    |             ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...x = []] = []; 1`] = `
"SyntaxError [1:16-1:17]: The binding declaration is not destructible
> 1 | let [...x = []] = [];
    |                 ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...x = []] = []; 2`] = `
"SyntaxError [1:16-1:17]: The binding declaration is not destructible
> 1 | let [...x = []] = [];
    |                 ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [...x, y] = [1, 2, 3]; 1`] = `
"SyntaxError [1:14-1:15]: The binding declaration is not destructible
> 1 | let [...x, y] = [1, 2, 3];
    |               ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [[(a)], ((((((([b])))))))] = [[],[]]; 1`] = `
"SyntaxError [1:31-1:32]: The binding declaration is not destructible
> 1 | let [[(a)], ((((((([b])))))))] = [[],[]];
    |                                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [1, a] = []; 1`] = `
"SyntaxError [1:11-1:12]: The binding declaration is not destructible
> 1 | let [1, a] = [];
    |            ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [1] = []; 1`] = `
"SyntaxError [1:8-1:9]: The binding declaration is not destructible
> 1 | let [1] = [];
    |         ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a + 1] = []; 1`] = `
"SyntaxError [1:12-1:13]: The binding declaration is not destructible
> 1 | let [a + 1] = [];
    |             ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a + 1] = []; 2`] = `
"SyntaxError [1:12-1:13]: The binding declaration is not destructible
> 1 | let [a + 1] = [];
    |             ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a)] = []; 1`] = `
"SyntaxError [1:6-1:7]: Expected ']'
> 1 | let [a)] = [];
    |       ^ Expected ']'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a, let, b] = [1, 2, 3]; 1`] = `
"SyntaxError [1:11-1:12]: 'A lexical declaration can't define a 'let' binding
> 1 | let [a, let, b] = [1, 2, 3];
    |            ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a, let, b] = [1, 2, 3]; 2`] = `
"SyntaxError [1:11-1:12]: 'A lexical declaration can't define a 'let' binding
> 1 | let [a, let, b] = [1, 2, 3];
    |            ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a]; 1`] = `
"SyntaxError [1:7-1:8]: Missing initializer in destructuring declaration
> 1 | let [a];
    |        ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [a--] = []; 1`] = `
"SyntaxError [1:10-1:11]: The binding declaration is not destructible
> 1 | let [a--] = [];
    |           ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [let] = []; 1`] = `
"SyntaxError [1:8-1:9]: 'A lexical declaration can't define a 'let' binding
> 1 | let [let] = [];
    |         ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [o.x=1]=[] 1`] = `
"SyntaxError [1:11-1:12]: The binding declaration is not destructible
> 1 | let [o.x=1]=[]
    |            ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [x().foo] = x 1`] = `
"SyntaxError [1:14-1:15]: The binding declaration is not destructible
> 1 | let [x().foo] = x
    |               ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let [x()] = x 1`] = `
"SyntaxError [1:10-1:11]: The binding declaration is not destructible
> 1 | let [x()] = x
    |           ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let { ...x, y, z } = obj; 1`] = `
"SyntaxError [1:19-1:20]: The binding declaration is not destructible
> 1 | let { ...x, y, z } = obj;
    |                    ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let { let } = {}; 1`] = `
"SyntaxError [1:10-1:11]: 'A lexical declaration can't define a 'let' binding
> 1 | let { let } = {};
    |           ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let { x, ...y, ...z } = obj; 1`] = `
"SyntaxError [1:22-1:23]: The binding declaration is not destructible
> 1 | let { x, ...y, ...z } = obj;
    |                       ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...(a,b)} = foo 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...(a,b)} = foo
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...(obj)} = foo 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...(obj)} = foo
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...[a,b]} = foo 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...[a,b]} = foo
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...{}} = {}; 1`] = `
"SyntaxError [1:12-1:13]: The binding declaration is not destructible
> 1 | let {...{}} = {};
    |             ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...{a,b}} = foo 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...{a,b}} = foo
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...{a,b}} = foo 2`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...{a,b}} = foo
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...let} = {a: 1, b: 2}; 1`] = `
"SyntaxError [1:11-1:12]: 'A lexical declaration can't define a 'let' binding
> 1 | let {...let} = {a: 1, b: 2};
    |            ^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...let} = {a: 1, b: 2}; 2`] = `
"SyntaxError [1:11-1:12]: The identifier 'let' must not be in expression position in strict mode
> 1 | let {...let} = {a: 1, b: 2};
    |            ^ The identifier 'let' must not be in expression position in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...obj1,...obj2} = foo 1`] = `
"SyntaxError [1:22-1:23]: The binding declaration is not destructible
> 1 | let {...obj1,...obj2} = foo
    |                       ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...obj1,} = foo 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | let {...obj1,} = foo
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {...obj1,a} = foo 1`] = `
"SyntaxError [1:16-1:17]: The binding declaration is not destructible
> 1 | let {...obj1,a} = foo
    |                 ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {[Symbol.iterator]: a} of [] 1`] = `
"SyntaxError [1:27-1:29]: Unexpected token: 'of'
> 1 | let {[Symbol.iterator]: a} of []
    |                            ^^ Unexpected token: 'of'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {[x]: y = z}; 1`] = `
"SyntaxError [1:16-1:17]: Missing initializer in destructuring declaration
> 1 | let {[x]: y = z};
    |                 ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {[x]: y}; 1`] = `
"SyntaxError [1:12-1:13]: Missing initializer in destructuring declaration
> 1 | let {[x]: y};
    |             ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {[x]} = z; 1`] = `
"SyntaxError [1:8-1:9]: A computed property name must be followed by a colon or paren
> 1 | let {[x]} = z;
    |         ^ A computed property name must be followed by a colon or paren"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {[x]}; 1`] = `
"SyntaxError [1:8-1:9]: A computed property name must be followed by a colon or paren
> 1 | let {[x]};
    |         ^ A computed property name must be followed by a colon or paren"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {0: a = 1} of [] 1`] = `
"SyntaxError [1:15-1:17]: Unexpected token: 'of'
> 1 | let {0: a = 1} of []
    |                ^^ Unexpected token: 'of'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {0: a} of [] 1`] = `
"SyntaxError [1:11-1:13]: Unexpected token: 'of'
> 1 | let {0: a} of []
    |            ^^ Unexpected token: 'of'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {a: o.a} = obj; 1`] = `
"SyntaxError [1:13-1:14]: The binding declaration is not destructible
> 1 | let {a: o.a} = obj;
    |              ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {a:=c} = z; 1`] = `
"SyntaxError [1:7-1:8]: Unexpected token: '='
> 1 | let {a:=c} = z;
    |        ^ Unexpected token: '='"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {x:o.f=1}={x:1} 1`] = `
"SyntaxError [1:13-1:14]: The binding declaration is not destructible
> 1 | let {x:o.f=1}={x:1}
    |              ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {x:y=z}, {a:b=c} = obj; 1`] = `
"SyntaxError [1:11-1:12]: Missing initializer in destructuring declaration
> 1 | let {x:y=z}, {a:b=c} = obj;
    |            ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {x:y=z}; 1`] = `
"SyntaxError [1:11-1:12]: Missing initializer in destructuring declaration
> 1 | let {x:y=z};
    |            ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let {x}; 1`] = `
"SyntaxError [1:7-1:8]: Missing initializer in destructuring declaration
> 1 | let {x};
    |        ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a, b; [...a, b] = []; 1`] = `
"SyntaxError [1:22-1:23]: Invalid left-hand side in assignment
> 1 | let a, b; [...a, b] = [];
    |                       ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [((a)] = []; 1`] = `
"SyntaxError [1:12-1:13]: Expected ')'
> 1 | let a; [((a)] = [];
    |             ^ Expected ')'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [((a)] = []; 2`] = `
"SyntaxError [1:12-1:13]: Expected ')'
> 1 | let a; [((a)] = [];
    |             ^ Expected ')'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [++a] = []; 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in assignment
> 1 | let a; [++a] = [];
    |                ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [...a = 1] = []; 1`] = `
"SyntaxError [1:20-1:21]: Invalid left-hand side in assignment
> 1 | let a; [...a = 1] = [];
    |                     ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [...a = 1] = []; 2`] = `
"SyntaxError [1:20-1:21]: Invalid left-hand side in assignment
> 1 | let a; [...a = 1] = [];
    |                     ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [...a,] = []; 1`] = `
"SyntaxError [1:17-1:18]: Invalid left-hand side in assignment
> 1 | let a; [...a,] = [];
    |                  ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [1, a] = []; 1`] = `
"SyntaxError [1:16-1:17]: Invalid left-hand side in assignment
> 1 | let a; [1, a] = [];
    |                 ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [a)] = []; 1`] = `
"SyntaxError [1:9-1:10]: Expected ']'
> 1 | let a; [a)] = [];
    |          ^ Expected ']'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let a; [a--] = []; 1`] = `
"SyntaxError [1:15-1:16]: Invalid left-hand side in assignment
> 1 | let a; [a--] = [];
    |                ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let arguments.length 1`] = `
"SyntaxError [1:13-1:14]: Unexpected token: '.'
> 1 | let arguments.length
    |              ^ Unexpected token: '.'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let await 0 1`] = `
"SyntaxError [1:10-1:11]: Unexpected token: 'number'
> 1 | let await 0
    |           ^ Unexpected token: 'number'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let b = async () => []; for (a in await b()); 1`] = `
"SyntaxError [1:40-1:41]: Expected ')'
> 1 | let b = async () => []; for (a in await b());
    |                                         ^ Expected ')'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let const 1`] = `
"SyntaxError [1:4-1:9]: Invalid keyword
> 1 | let const
    |     ^^^^^ Invalid keyword"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let default 1`] = `
"SyntaxError [1:4-1:11]: Invalid keyword
> 1 | let default
    |     ^^^^^^^ Invalid keyword"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let eval(foo) 1`] = `
"SyntaxError [1:8-1:9]: Unexpected token: '('
> 1 | let eval(foo)
    |         ^ Unexpected token: '('"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let let 1`] = `
"SyntaxError [1:4-1:7]: 'A lexical declaration can't define a 'let' binding
> 1 | let let
    |     ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let let 2`] = `
"SyntaxError [1:4-1:7]: 'A lexical declaration can't define a 'let' binding
> 1 | let let
    |     ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let let x; 1`] = `
"SyntaxError [1:4-1:7]: 'A lexical declaration can't define a 'let' binding
> 1 | let let x;
    |     ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let let; 1`] = `
"SyntaxError [1:4-1:7]: 'A lexical declaration can't define a 'let' binding
> 1 | let let;
    |     ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let test = 2, let = 1; 1`] = `
"SyntaxError [1:14-1:17]: 'A lexical declaration can't define a 'let' binding
> 1 | let test = 2, let = 1;
    |               ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let test = 2, let = 1; 2`] = `
"SyntaxError [1:14-1:17]: 'A lexical declaration can't define a 'let' binding
> 1 | let test = 2, let = 1;
    |               ^^^ 'A lexical declaration can't define a 'let' binding"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let x = ...y; 1`] = `
"SyntaxError [1:8-1:11]: Unexpected token: '...'
> 1 | let x = ...y;
    |         ^^^ Unexpected token: '...'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let x = {y=z} => d 1`] = `
"SyntaxError [1:14-1:16]: Invalid shorthand property initializer
> 1 | let x = {y=z} => d
    |               ^^ Invalid shorthand property initializer"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let x = {y=z} 1`] = `
"SyntaxError [1:12-1:13]: Invalid shorthand property initializer
> 1 | let x = {y=z}
    |             ^ Invalid shorthand property initializer"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let x = y, {z}; 1`] = `
"SyntaxError [1:14-1:15]: Missing initializer in destructuring declaration
> 1 | let x = y, {z};
    |               ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let x, {y}; 1`] = `
"SyntaxError [1:10-1:11]: Missing initializer in destructuring declaration
> 1 | let x, {y};
    |           ^ Missing initializer in destructuring declaration"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let x,; 1`] = `
"SyntaxError [1:6-1:7]: Unexpected token: ';'
> 1 | let x,;
    |       ^ Unexpected token: ';'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > let: foo 1`] = `
"SyntaxError [1:3-1:4]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | let: foo
    |    ^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (fail) > var [({x: 1}) = y] = []; 1`] = `
"SyntaxError [1:14-1:15]: Invalid left-hand side in assignment
> 1 | var [({x: 1}) = y] = [];
    |               ^ Invalid left-hand side in assignment"
`;

exports[`Declarations - Let > Declarations - Let (fail) > var [({x: 1})] = []; 1`] = `
"SyntaxError [1:15-1:16]: The binding declaration is not destructible
> 1 | var [({x: 1})] = [];
    |                ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > var [(x)] = []; 1`] = `
"SyntaxError [1:10-1:11]: The binding declaration is not destructible
> 1 | var [(x)] = [];
    |           ^ The binding declaration is not destructible"
`;

exports[`Declarations - Let > Declarations - Let (fail) > while (false) let
[a] 1`] = `
"SyntaxError [2:0-2:1]: \`let 
 [\` is a restricted production at the start of a statement
  1 | while (false) let
> 2 | [a]
    | ^ \`let 
 [\` is a restricted production at the start of a statement"
`;

exports[`Declarations - Let > Declarations - Let (fail) > while (false) let x; 1`] = `
"SyntaxError [1:18-1:19]: Unexpected token: 'identifier'
> 1 | while (false) let x;
    |                   ^ Unexpected token: 'identifier'"
`;

exports[`Declarations - Let > Declarations - Let (fail) > while (true) let: continue let; 1`] = `
"SyntaxError [1:16-1:17]: \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode
> 1 | while (true) let: continue let;
    |                 ^ \`let\` declaration not allowed here and \`let\` cannot be a regular var name in strict mode"
`;

exports[`Declarations - Let > Declarations - Let (pass) > [x = true] = y 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "elements": [
            {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "right": {
                "type": "Literal",
                "value": true,
              },
              "type": "AssignmentPattern",
            },
          ],
          "type": "ArrayPattern",
        },
        "operator": "=",
        "right": {
          "name": "y",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > _ => { let: foo; } 1`] = `
{
  "body": [
    {
      "expression": {
        "async": false,
        "body": {
          "body": [
            {
              "body": {
                "expression": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "type": "ExpressionStatement",
              },
              "label": {
                "name": "let",
                "type": "Identifier",
              },
              "type": "LabeledStatement",
            },
          ],
          "type": "BlockStatement",
        },
        "expression": false,
        "generator": false,
        "params": [
          {
            "name": "_",
            "type": "Identifier",
          },
        ],
        "type": "ArrowFunctionExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > a = let;
[] 1`] = `
{
  "body": [
    {
      "expression": {
        "left": {
          "name": "a",
          "type": "Identifier",
        },
        "operator": "=",
        "right": {
          "name": "let",
          "type": "Identifier",
        },
        "type": "AssignmentExpression",
      },
      "type": "ExpressionStatement",
    },
    {
      "expression": {
        "elements": [],
        "type": "ArrayExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (;let;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": null,
      "test": {
        "name": "let",
        "type": "Identifier",
      },
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [,] of x); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                null,
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [...[foo, bar]] in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "argument": {
                    "elements": [
                      {
                        "name": "foo",
                        "type": "Identifier",
                      },
                      {
                        "name": "bar",
                        "type": "Identifier",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [...[foo, bar]] of obj); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "argument": {
                    "elements": [
                      {
                        "name": "foo",
                        "type": "Identifier",
                      },
                      {
                        "name": "bar",
                        "type": "Identifier",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [] of x); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [a=[...b], ...c] in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "right": {
                    "elements": [
                      {
                        "argument": {
                          "name": "b",
                          "type": "Identifier",
                        },
                        "type": "SpreadElement",
                      },
                    ],
                    "type": "ArrayExpression",
                  },
                  "type": "AssignmentPattern",
                },
                {
                  "argument": {
                    "name": "c",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [a=[...b], ...c] of obj); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "right": {
                    "elements": [
                      {
                        "argument": {
                          "name": "b",
                          "type": "Identifier",
                        },
                        "type": "SpreadElement",
                      },
                    ],
                    "type": "ArrayExpression",
                  },
                  "type": "AssignmentPattern",
                },
                {
                  "argument": {
                    "name": "c",
                    "type": "Identifier",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [foo, bar=b] of arr); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
                {
                  "left": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [foo,,] of arr); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
                null,
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [foo,,bar] of arr); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
                null,
                {
                  "name": "bar",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [foo,] of arr); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "foo",
                  "type": "Identifier",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [foo=a, bar=b] of arr); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
                {
                  "left": {
                    "name": "bar",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "b",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [foo=a] of arr); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "left": {
                    "name": "foo",
                    "type": "Identifier",
                  },
                  "right": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "type": "AssignmentPattern",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "arr",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let [x, ...[foo, bar]] in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "elements": [
                {
                  "name": "x",
                  "type": "Identifier",
                },
                {
                  "argument": {
                    "elements": [
                      {
                        "name": "foo",
                        "type": "Identifier",
                      },
                      {
                        "name": "bar",
                        "type": "Identifier",
                      },
                    ],
                    "type": "ArrayPattern",
                  },
                  "type": "RestElement",
                },
              ],
              "type": "ArrayPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {[x]: y = z} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "end": 30,
        "range": [
          29,
          30,
        ],
        "start": 29,
        "type": "EmptyStatement",
      },
      "end": 30,
      "left": {
        "declarations": [
          {
            "end": 21,
            "id": {
              "end": 21,
              "properties": [
                {
                  "computed": true,
                  "end": 20,
                  "key": {
                    "end": 12,
                    "name": "x",
                    "range": [
                      11,
                      12,
                    ],
                    "start": 11,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    10,
                    20,
                  ],
                  "shorthand": false,
                  "start": 10,
                  "type": "Property",
                  "value": {
                    "end": 20,
                    "left": {
                      "end": 16,
                      "name": "y",
                      "range": [
                        15,
                        16,
                      ],
                      "start": 15,
                      "type": "Identifier",
                    },
                    "range": [
                      15,
                      20,
                    ],
                    "right": {
                      "end": 20,
                      "name": "z",
                      "range": [
                        19,
                        20,
                      ],
                      "start": 19,
                      "type": "Identifier",
                    },
                    "start": 15,
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "range": [
                9,
                21,
              ],
              "start": 9,
              "type": "ObjectPattern",
            },
            "init": null,
            "range": [
              9,
              21,
            ],
            "start": 9,
            "type": "VariableDeclarator",
          },
        ],
        "end": 21,
        "kind": "let",
        "range": [
          5,
          21,
        ],
        "start": 5,
        "type": "VariableDeclaration",
      },
      "range": [
        0,
        30,
      ],
      "right": {
        "end": 28,
        "name": "obj",
        "range": [
          25,
          28,
        ],
        "start": 25,
        "type": "Identifier",
      },
      "start": 0,
      "type": "ForInStatement",
    },
  ],
  "end": 30,
  "range": [
    0,
    30,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {[x]: y = z} of obj); 1`] = `
{
  "body": [
    {
      "await": false,
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": true,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "z",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForOfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {[x]: y} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "end": 26,
        "range": [
          25,
          26,
        ],
        "start": 25,
        "type": "EmptyStatement",
      },
      "end": 26,
      "left": {
        "declarations": [
          {
            "end": 17,
            "id": {
              "end": 17,
              "properties": [
                {
                  "computed": true,
                  "end": 16,
                  "key": {
                    "end": 12,
                    "name": "x",
                    "range": [
                      11,
                      12,
                    ],
                    "start": 11,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    10,
                    16,
                  ],
                  "shorthand": false,
                  "start": 10,
                  "type": "Property",
                  "value": {
                    "end": 16,
                    "name": "y",
                    "range": [
                      15,
                      16,
                    ],
                    "start": 15,
                    "type": "Identifier",
                  },
                },
              ],
              "range": [
                9,
                17,
              ],
              "start": 9,
              "type": "ObjectPattern",
            },
            "init": null,
            "range": [
              9,
              17,
            ],
            "start": 9,
            "type": "VariableDeclarator",
          },
        ],
        "end": 17,
        "kind": "let",
        "range": [
          5,
          17,
        ],
        "start": 5,
        "type": "VariableDeclaration",
      },
      "range": [
        0,
        26,
      ],
      "right": {
        "end": 24,
        "name": "obj",
        "range": [
          21,
          24,
        ],
        "start": 21,
        "type": "Identifier",
      },
      "start": 0,
      "type": "ForInStatement",
    },
  ],
  "end": 26,
  "range": [
    0,
    26,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {a, [x]: y} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "a",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "a",
                    "type": "Identifier",
                  },
                },
                {
                  "computed": true,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "name": "y",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x : y = z} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "z",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x : y, z, a : b = c} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "end": 39,
        "range": [
          38,
          39,
        ],
        "start": 38,
        "type": "EmptyStatement",
      },
      "end": 39,
      "left": {
        "declarations": [
          {
            "end": 30,
            "id": {
              "end": 30,
              "properties": [
                {
                  "computed": false,
                  "end": 15,
                  "key": {
                    "end": 11,
                    "name": "x",
                    "range": [
                      10,
                      11,
                    ],
                    "start": 10,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    10,
                    15,
                  ],
                  "shorthand": false,
                  "start": 10,
                  "type": "Property",
                  "value": {
                    "end": 15,
                    "name": "y",
                    "range": [
                      14,
                      15,
                    ],
                    "start": 14,
                    "type": "Identifier",
                  },
                },
                {
                  "computed": false,
                  "end": 18,
                  "key": {
                    "end": 18,
                    "name": "z",
                    "range": [
                      17,
                      18,
                    ],
                    "start": 17,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    17,
                    18,
                  ],
                  "shorthand": true,
                  "start": 17,
                  "type": "Property",
                  "value": {
                    "end": 18,
                    "name": "z",
                    "range": [
                      17,
                      18,
                    ],
                    "start": 17,
                    "type": "Identifier",
                  },
                },
                {
                  "computed": false,
                  "end": 29,
                  "key": {
                    "end": 21,
                    "name": "a",
                    "range": [
                      20,
                      21,
                    ],
                    "start": 20,
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "range": [
                    20,
                    29,
                  ],
                  "shorthand": false,
                  "start": 20,
                  "type": "Property",
                  "value": {
                    "end": 29,
                    "left": {
                      "end": 25,
                      "name": "b",
                      "range": [
                        24,
                        25,
                      ],
                      "start": 24,
                      "type": "Identifier",
                    },
                    "range": [
                      24,
                      29,
                    ],
                    "right": {
                      "end": 29,
                      "name": "c",
                      "range": [
                        28,
                        29,
                      ],
                      "start": 28,
                      "type": "Identifier",
                    },
                    "start": 24,
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "range": [
                9,
                30,
              ],
              "start": 9,
              "type": "ObjectPattern",
            },
            "init": null,
            "range": [
              9,
              30,
            ],
            "start": 9,
            "type": "VariableDeclarator",
          },
        ],
        "end": 30,
        "kind": "let",
        "range": [
          5,
          30,
        ],
        "start": 5,
        "type": "VariableDeclaration",
      },
      "range": [
        0,
        39,
      ],
      "right": {
        "end": 37,
        "name": "obj",
        "range": [
          34,
          37,
        ],
        "start": 34,
        "type": "Identifier",
      },
      "start": 0,
      "type": "ForInStatement",
    },
  ],
  "end": 39,
  "range": [
    0,
    39,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x : y} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "name": "y",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x = y, z = a} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                },
                {
                  "computed": false,
                  "key": {
                    "name": "z",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "z",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "a",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x = y} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "x",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x, y : z} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "x",
                    "type": "Identifier",
                  },
                },
                {
                  "computed": false,
                  "key": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false,
                  "type": "Property",
                  "value": {
                    "name": "z",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x, y = z} in obj); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "x",
                    "type": "Identifier",
                  },
                },
                {
                  "computed": false,
                  "key": {
                    "name": "y",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "left": {
                      "name": "y",
                      "type": "Identifier",
                    },
                    "right": {
                      "name": "z",
                      "type": "Identifier",
                    },
                    "type": "AssignmentPattern",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let {x,} in obj);   1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "left": {
        "declarations": [
          {
            "id": {
              "properties": [
                {
                  "computed": false,
                  "key": {
                    "name": "x",
                    "type": "Identifier",
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true,
                  "type": "Property",
                  "value": {
                    "name": "x",
                    "type": "Identifier",
                  },
                },
              ],
              "type": "ObjectPattern",
            },
            "init": null,
            "type": "VariableDeclarator",
          },
        ],
        "kind": "let",
        "type": "VariableDeclaration",
      },
      "right": {
        "name": "obj",
        "type": "Identifier",
      },
      "type": "ForInStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let();;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "arguments": [],
        "callee": {
          "name": "let",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > for (let;;); 1`] = `
{
  "body": [
    {
      "body": {
        "type": "EmptyStatement",
      },
      "init": {
        "name": "let",
        "type": "Identifier",
      },
      "test": null,
      "type": "ForStatement",
      "update": null,
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > if (false) {
    L: let // ASI
    x = 1;
} 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "body": {
              "expression": {
                "name": "let",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
            "label": {
              "name": "L",
              "type": "Identifier",
            },
            "type": "LabeledStatement",
          },
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 1,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "type": "Literal",
        "value": false,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > if (false) {
    L: let // ASI
    x = 1;
} 2`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "body": {
              "expression": {
                "name": "let",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
            "label": {
              "name": "L",
              "type": "Identifier",
            },
            "type": "LabeledStatement",
          },
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 1,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "type": "Literal",
        "value": false,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > if (false) {
    L: let // ASI
    x = 1;
} 3`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "body": [
          {
            "body": {
              "expression": {
                "name": "let",
                "type": "Identifier",
              },
              "type": "ExpressionStatement",
            },
            "label": {
              "name": "L",
              "type": "Identifier",
            },
            "type": "LabeledStatement",
          },
          {
            "expression": {
              "left": {
                "name": "x",
                "type": "Identifier",
              },
              "operator": "=",
              "right": {
                "type": "Literal",
                "value": 1,
              },
              "type": "AssignmentExpression",
            },
            "type": "ExpressionStatement",
          },
        ],
        "type": "BlockStatement",
      },
      "test": {
        "type": "Literal",
        "value": false,
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > if (x) let; 1`] = `
{
  "body": [
    {
      "alternate": null,
      "consequent": {
        "expression": {
          "name": "let",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "test": {
        "name": "x",
        "type": "Identifier",
      },
      "type": "IfStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let [,] = x; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              null,
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let [...foo] = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              {
                "argument": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let [foo, ...bar] = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              {
                "name": "foo",
                "type": "Identifier",
              },
              {
                "argument": {
                  "name": "bar",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let [foo=a, bar] = arr; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              {
                "left": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "right": {
                  "name": "a",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
              {
                "name": "bar",
                "type": "Identifier",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "arr",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let [foo=a] = arr; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              {
                "left": {
                  "name": "foo",
                  "type": "Identifier",
                },
                "right": {
                  "name": "a",
                  "type": "Identifier",
                },
                "type": "AssignmentPattern",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "arr",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let [x, ...[foo, bar]] = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              {
                "name": "x",
                "type": "Identifier",
              },
              {
                "argument": {
                  "elements": [
                    {
                      "name": "foo",
                      "type": "Identifier",
                    },
                    {
                      "name": "bar",
                      "type": "Identifier",
                    },
                  ],
                  "type": "ArrayPattern",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {...x} = y 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {...x} = y 2`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {} = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {a, let: foo} = x; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "a",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "a",
                  "type": "Identifier",
                },
              },
              {
                "computed": false,
                "key": {
                  "name": "let",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "foo",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {let: foo} = x; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "let",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": false,
                "type": "Property",
                "value": {
                  "name": "foo",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {x, y} = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 16,
          "id": {
            "end": 10,
            "properties": [
              {
                "computed": false,
                "end": 6,
                "key": {
                  "end": 6,
                  "name": "x",
                  "range": [
                    5,
                    6,
                  ],
                  "start": 5,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  5,
                  6,
                ],
                "shorthand": true,
                "start": 5,
                "type": "Property",
                "value": {
                  "end": 6,
                  "name": "x",
                  "range": [
                    5,
                    6,
                  ],
                  "start": 5,
                  "type": "Identifier",
                },
              },
              {
                "computed": false,
                "end": 9,
                "key": {
                  "end": 9,
                  "name": "y",
                  "range": [
                    8,
                    9,
                  ],
                  "start": 8,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  8,
                  9,
                ],
                "shorthand": true,
                "start": 8,
                "type": "Property",
                "value": {
                  "end": 9,
                  "name": "y",
                  "range": [
                    8,
                    9,
                  ],
                  "start": 8,
                  "type": "Identifier",
                },
              },
            ],
            "range": [
              4,
              10,
            ],
            "start": 4,
            "type": "ObjectPattern",
          },
          "init": {
            "end": 16,
            "name": "obj",
            "range": [
              13,
              16,
            ],
            "start": 13,
            "type": "Identifier",
          },
          "range": [
            4,
            16,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 17,
      "kind": "let",
      "range": [
        0,
        17,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 17,
  "range": [
    0,
    17,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {x,} = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "x",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {x} = a, {y} = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "end": 11,
          "id": {
            "end": 7,
            "properties": [
              {
                "computed": false,
                "end": 6,
                "key": {
                  "end": 6,
                  "name": "x",
                  "range": [
                    5,
                    6,
                  ],
                  "start": 5,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  5,
                  6,
                ],
                "shorthand": true,
                "start": 5,
                "type": "Property",
                "value": {
                  "end": 6,
                  "name": "x",
                  "range": [
                    5,
                    6,
                  ],
                  "start": 5,
                  "type": "Identifier",
                },
              },
            ],
            "range": [
              4,
              7,
            ],
            "start": 4,
            "type": "ObjectPattern",
          },
          "init": {
            "end": 11,
            "name": "a",
            "range": [
              10,
              11,
            ],
            "start": 10,
            "type": "Identifier",
          },
          "range": [
            4,
            11,
          ],
          "start": 4,
          "type": "VariableDeclarator",
        },
        {
          "end": 22,
          "id": {
            "end": 16,
            "properties": [
              {
                "computed": false,
                "end": 15,
                "key": {
                  "end": 15,
                  "name": "y",
                  "range": [
                    14,
                    15,
                  ],
                  "start": 14,
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "range": [
                  14,
                  15,
                ],
                "shorthand": true,
                "start": 14,
                "type": "Property",
                "value": {
                  "end": 15,
                  "name": "y",
                  "range": [
                    14,
                    15,
                  ],
                  "start": 14,
                  "type": "Identifier",
                },
              },
            ],
            "range": [
              13,
              16,
            ],
            "start": 13,
            "type": "ObjectPattern",
          },
          "init": {
            "end": 22,
            "name": "obj",
            "range": [
              19,
              22,
            ],
            "start": 19,
            "type": "Identifier",
          },
          "range": [
            13,
            22,
          ],
          "start": 13,
          "type": "VariableDeclarator",
        },
      ],
      "end": 23,
      "kind": "let",
      "range": [
        0,
        23,
      ],
      "start": 0,
      "type": "VariableDeclaration",
    },
  ],
  "end": 23,
  "range": [
    0,
    23,
  ],
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {x} = a, y = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "x",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "a",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
        {
          "id": {
            "name": "y",
            "type": "Identifier",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let {x} = obj; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "x",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "x",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "obj",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let a, [...x] = y 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "a",
            "type": "Identifier",
          },
          "init": null,
          "type": "VariableDeclarator",
        },
        {
          "id": {
            "elements": [
              {
                "argument": {
                  "name": "x",
                  "type": "Identifier",
                },
                "type": "RestElement",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "y",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let foo = bar; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "foo",
            "type": "Identifier",
          },
          "init": {
            "name": "bar",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let foo; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "foo",
            "type": "Identifier",
          },
          "init": null,
          "type": "VariableDeclarator",
        },
      ],
      "kind": "let",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let(); 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [],
        "callee": {
          "name": "let",
          "type": "Identifier",
        },
        "optional": false,
        "type": "CallExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let.foo; 1`] = `
{
  "body": [
    {
      "expression": {
        "computed": false,
        "object": {
          "name": "let",
          "type": "Identifier",
        },
        "optional": false,
        "property": {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "ExpressionStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > let: let; 1`] = `
{
  "body": [
    {
      "body": {
        "expression": {
          "name": "let",
          "type": "Identifier",
        },
        "type": "ExpressionStatement",
      },
      "label": {
        "name": "let",
        "type": "Identifier",
      },
      "type": "LabeledStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > var [let] = x; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "elements": [
              {
                "name": "let",
                "type": "Identifier",
              },
            ],
            "type": "ArrayPattern",
          },
          "init": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > var {let} = x; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "properties": [
              {
                "computed": false,
                "key": {
                  "name": "let",
                  "type": "Identifier",
                },
                "kind": "init",
                "method": false,
                "shorthand": true,
                "type": "Property",
                "value": {
                  "name": "let",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectPattern",
          },
          "init": {
            "name": "x",
            "type": "Identifier",
          },
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`Declarations - Let > Declarations - Let (pass) > var let; 1`] = `
{
  "body": [
    {
      "declarations": [
        {
          "id": {
            "name": "let",
            "type": "Identifier",
          },
          "init": null,
          "type": "VariableDeclarator",
        },
      ],
      "kind": "var",
      "type": "VariableDeclaration",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;
