import * as t from 'node:assert/strict';
import { outdent } from 'outdent';
import { describe, it } from 'vitest';
import { parseSource } from '../../../src/parser';
import { fail, pass } from '../../test-utils';

describe('Module - Import', () => {
  for (const arg of [
    'import',
    'import;',
    'import;',
    'import {}',
    'import {};',
    'import {} from;',
    "import {,} from 'a';",
    "import {b,,} from 'a';",
    'import from;',
    "import {b as,} from 'a';",
    "import {function} from 'a';",
    "import {a as function} from 'a';",
    "import {b,,c} from 'a';",
    "import {b,c,,} from 'a';",
    "import * As a from 'a'",
    "import / as a from 'a'",
    "import * as b, a from 'a'",
    "import a as b from 'a'",
    "import a, b from 'a'",
    'import {};',
    'import {} from;',
    "import {,} from 'a';",
    'import from;',
    "import { foo as !d } from 'foo';",
    "import { foo as 123 } from 'foo';",
    "import { foo as [123] } from 'foo';",
    "import { foo as {a: b = 2} } from 'foo';",
    "import { eval } from 'foo';",
    "import { for } from 'foo';",
    "import { y as yield } from 'foo'",
    "import { s as static } from 'foo'",
    "import { l as let } from 'foo'",
    "import { arguments } from 'foo';",
    "import { x }, def from 'foo';",
    "import def, def2 from 'foo';",
    "import * as x, def from 'foo';",
    "import * as x, * as y from 'foo';",
    "import {x}, {y} from 'foo';",
    "import * as x, {y} from 'foo';",
    'import { enum } from "foo"',
    'import { foo, bar }',
    'import foo from bar',
    'import * 12',
    "import a, 12 from 'foo'",
    'import {a as 12} from "foo"',
    'import * as a from 12',
    'import {a as b, e as l 12',
    'import icefapper from ;',
    'import icefapper from {}',
    'import icefapper from 12',
    'import icefapper from /',
    'import icefapper from []',
    'function foo() { import foo from "icefapper.js"; }',
    'import foo, bar from "foo.js";',
    'import { foo }, * as ns1 from "foo.js";',
    'import { foo }',
    'import [ foo ] from "foo.js";',
    '{ import in_block from ""; }',
    'import {',
    'import { foo',
    'import { foo as ',
    'import { foo as bar ',
    'import { foo as bar, ',
    'import { foo as switch } from "module";',
    'import { foo, , } from "module";',
    outdent`
      for (const y in [])
      import v from './foo
    `,
    "import { a as await } from 'foo';",
    "import { a as enum } from 'foo';",
    "import { a as arguments } from 'foo';",
    "import {function} from 'a';",
    "import {a as function} from 'a';",
    "import {b,,c} from 'a';",
    "import {b,c,,} from 'a';",
    "import * As a from 'a'",
    "import / as a from 'a'",
    "import * as b, a from 'a'",
    "import a as b from 'a'",
    "import a, b from 'a'",
    "import 'a',",
    'import { };',
    'import {;',
    'import };',
    'import { , };',
    "import { , } from 'foo';",
    'import { null } from "null',
    'import foo, from "bar";',
    'import {bar}, {foo} from "foo";',
    'import {bar}, foo from "foo"',
    "import { [123] } from 'foo';",
    "import { foo as {a: b = 2} } from 'foo';",
    "import { foo as !d } from 'foo';",
    "import { foo as [123] } from 'foo';",
    "import { foo as {a: b = 2} } from 'foo';",
    "import * as x, * as y from 'foo';",
    "import {x}, {y} from 'foo';",
    "import * as x, {y} from 'foo';",
    'import { };',
    'import {;',
    'import };',
    'import { , };',
    "import { , } from 'm.js';",
    'import { a } from;',
    "import { x }, def from 'm.js';",
    "import def, def2 from 'm.js';",
    "import * as x, def from 'm.js';",
    "import * as x, * as y from 'm.js';",
    "import { y as yield } from 'm.js'",
    "import { s as static } from 'm.js'",
    "import { l as let } from 'm.js'",
    "import { a as await } from 'm.js';",
    "import { y as yield } from 'foo'",
    "import { {} } from 'foo';",
    "import { !d } from 'foo';",
    "import { 123 } from 'foo';",
    'import { foo',
    'import { foo as ',
    'import { foo as bar ',
    'import { foo as bar, ',
    'import { foo as switch } from "module";',
    'import { foo, , } from "module";',
    "import def, def2 from 'm.js';",
    "import * as x, def from 'm.js';",
    "import * as x, * as y from 'm.js';",
    "import {x}, {y} from 'm.js';",
    "import * as x, {y} from 'm.js';",
    outdent`
      for (const y in [])
      import v from './foo
    `,
    'import from;',
    "import { y as yield } from 'm.js'",
    "import { s as static } from 'm.js'",
    "import { l as let } from 'm.js'",
    'import { };',
    'import {;',
    'import };',
    'import { , };',
    "import { , } from 'm.js';",
    "import , from 'm.js';",
    "import a , from 'm.js';",
    'import { a } from;',
    outdent`
      for (let x = 0; false;)
        import v from './decl-pos-import-for-let.js';
    `,
    "import a , from 'foo';",
    "import a { b, c } from 'foo';",
    'import * as import from "./"',
    'function foo() { import foo from "icefapper.js"; }',
    'import * as function',
    'import * as let',
    'import * as var',
    'import * as static',
    'import * as await',
    'import * as async',
    'import * as class',
    'import * as class',
    'import * as new',
    'function foo() { import foo from "foo.js"; }',
    'import foo, bar from "foo.js";',
    'import { foo }, bar from "foo.js";',
    'import { foo }, from "foo.js";',
    'import { foo }, bar from "foo.js";',
    'import { foo }, * as ns1 from "foo.js";',
    'import { foo }',
    'import [ foo ] from "foo.js";',
    'import * foo from "foo.js";',
    'import * as from "foo";',
    'import * as "foo" from "foo.js";',
    'import { , foo } from "foo.js";',
    '() => { import arrow from ""; }',
    'try { import _try from ""; } catch(e) { }',
    'import { foo as bar ',
    'import { foo as bar, ',
    'import { switch } from "module";',
    'import { foo bar } from "module";',
    'import { foo as switch } from "module";',
    'import { foo, , } from "module";',
    'if (false) import { default } from "module";',
    'for(var i=0; i<1; i++) import { default } from "module";',
    'while(false) import { default } from "module";',
    outdent`
      do import { default } from "module"
      while (false);
    `,
    'function () { import { default } from "module"; }',
    'import { "foo"',
    'import { "foo" }',
    'import { "foo" } from',
    'import { "foo", } from "./foo";',
    'import { "foo" as "f" } from "./foo";',
    'import { foo as "f" } from "./foo";',
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseSource(`${arg}`, { sourceType: 'module' });
      });
    });
  }

  for (const arg of [
    'import from "foo";',
    'import a "foo";',
    'import * as a "foo";',
    'import { a } "foo";',
    'import b, { a } "foo";',
    'import { default as a, b } "foo";',
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseSource(`${arg}`, { sourceType: 'module' });
      }, /Expected 'from'$/);
    });
  }

  fail('Module - Import (fail)', [
    '{import {x} from "y";}',
    { code: '{import {x} from "y";}', options: { sourceType: 'module' } },
    'function f(){import {x} from "y";}',
    { code: 'function f(){import {x} from "y";}', options: { sourceType: 'module' } },
    'let x = () => {import {x} from "y";}',
    'let x = () => import {x} from "y"',
    'if (x) import {x} from "y";',
    { code: 'if (x); else import {x} from "y";', options: { sourceType: 'module' } },
    'do import {x} from "y"; while (x);',
    'for (;;) import {x} from "y";',
    'switch (x) { import {x} from "y"; }',
    { code: 'switch (x) { case x: import {x} from "y"; }', options: { sourceType: 'module' } },
    'switch (x) { default: import {x} from "y"; }',
    'with (x) import {x} from "y";',
    { code: 'try { } finally { import {x} from "y"; }', options: { sourceType: 'module' } },
    'x = { foo(){ import {x} from "y"; }}',
    { code: 'do import {x} from "y"; while (x);', options: { sourceType: 'module' } },
    'import foo from "bar"',
    "import await from 'foo'",
    { code: 'import foo', options: { sourceType: 'module' } },
    { code: 'import', options: { sourceType: 'module' } },
    { code: 'import {await} from "foo";', options: { sourceType: 'module' } },
    { code: 'import {foo as await} from "foo";', options: { sourceType: 'module' } },
    { code: 'import await, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import eval, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import enum, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import arguments, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import package, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import protected, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import implements, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import await, {x, y, z} from "foo";', options: { sourceType: 'module' } },
    { code: 'import await, * as foo from "foo";', options: { sourceType: 'module' } },
    { code: 'import eval, * as foo from "foo";', options: { sourceType: 'module' } },
    { code: 'import enum, * as foo from "foo";', options: { sourceType: 'module' } },
    { code: 'import package, * as foo from "foo";', options: { sourceType: 'module' } },
    { code: 'import protected, * as foo from "foo";', options: { sourceType: 'module' } },
    { code: 'import implements, * as foo from "foo";', options: { sourceType: 'module' } },
    { code: '{ import in_block from ""; }', options: { sourceType: 'module', lexical: true } },
    { code: 'import {', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo as ', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo as bar ', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo as bar, ', options: { sourceType: 'module', lexical: true } },
    { code: 'import { switch } from "module";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo bar } from "module";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo as switch } from "module";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo, , } from "module";', options: { sourceType: 'module', lexical: true } },
    { code: 'if (false) import { default } from "module";', options: { sourceType: 'module', lexical: true } },
    {
      code: 'for(var i=0; i<1; i++) import { default } from "module";',
      options: { sourceType: 'module', lexical: true },
    },
    { code: '{ export default null; }', options: { sourceType: 'module', lexical: true } },
    { code: '{ export default null; }', options: { sourceType: 'module', lexical: true } },
    { code: '{ export default null; }', options: { sourceType: 'module', lexical: true } },
    { code: 'import;', options: { sourceType: 'module' } },
    { code: 'import {}', options: { sourceType: 'module' } },
    { code: 'import {} from;', options: { sourceType: 'module' } },
    { code: "import {,} from 'a';", options: { sourceType: 'module' } },
    { code: 'import foo, from "bar";', options: { sourceType: 'module' } },
    { code: 'import * from "foo"', options: { sourceType: 'module' } },
    { code: 'import * as from', options: { sourceType: 'module' } },
    { code: 'import * as x', options: { sourceType: 'module' } },
    { code: 'import { null } from "null"', options: { sourceType: 'module' } },
    { code: 'import { implements } from "null"', options: { sourceType: 'module' } },
    { code: 'import foo, from "bar";', options: { sourceType: 'module' } },
    { code: 'import cherow from ;', options: { sourceType: 'module' } },
    { code: 'import cherow from 12', options: { sourceType: 'module' } },
    { code: 'import cherow from []', options: { sourceType: 'module' } },
    { code: 'import foo, bar from "foo.js";', options: { sourceType: 'module' } },
    { code: 'import { foo }, * as ns1 from "foo.js";', options: { sourceType: 'module' } },
    { code: 'import [ foo ] from "foo.js";', options: { sourceType: 'module' } },
    { code: 'import { foo as ', options: { sourceType: 'module' } },
    { code: 'import { foo as switch } from "module";', options: { sourceType: 'module' } },
    { code: 'import { foo, , } from "module";', options: { sourceType: 'module' } },
    { code: 'import * as a in b from "foo";', options: { sourceType: 'module' } },
    { code: "import { {} } from 'foo';", options: { sourceType: 'module' } },
    { code: "import { !d } from 'foo';", options: { sourceType: 'module' } },
    { code: "import { 123 } from 'foo';", options: { sourceType: 'module' } },
    { code: "import a, *= from 'foo';", options: { sourceType: 'module' } },
    { code: "import a, ** from 'foo';", options: { sourceType: 'module' } },
    { code: "import a, **= from 'foo';", options: { sourceType: 'module' } },
    { code: "import *= from 'foo';", options: { sourceType: 'module' } },
    { code: "import { [123] } from 'foo';", options: { sourceType: 'module' } },
    { code: 'import { a } from;', options: { sourceType: 'module' } },
    { code: "import / as a from 'a'", options: { sourceType: 'module' } },
    { code: "import * as b, a from 'a'", options: { sourceType: 'module' } },
    { code: "import {,} from 'a';", options: { sourceType: 'module' } },
    { code: "import {b,,} from 'a';", options: { sourceType: 'module' } },
    { code: "import * As a from 'a'", options: { sourceType: 'module' } },
    { code: "import {eval} from 'x'", options: { sourceType: 'module' } },
    { code: 'import {a b} from "foo";', options: { sourceType: 'module' } },
    { code: 'import a, * as a from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import a, {a} from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import a, {b as a} from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, b as a} from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, a} from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import {b as a, c as a} from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { x, y, x } from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, b, a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {b, a, a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, a, b} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, b as a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import a, {a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import a, {b as a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a, a as a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import a, * as a from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a} from "foo"; import {a} from "foo";', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a} from "foo"; import {b, a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a} from "foo"; import {b as a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a} from "foo"; import a from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a} from "foo"; import {b as a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import {a} from "foo"; import {a as a} from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import a from "foo"; import * as a from "foo"', options: { sourceType: 'module', lexical: true } },
    { code: 'import foo, bar from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo, foo } from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo, bar as foo } from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'const foo = 12; import { foo } from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'function foo() { }; import { foo } from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo }, from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'mport { foo }, bar from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo }, * as ns1 from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import [ foo ] from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { , foo } from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import foo from "string"; import foo from "string";', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo } from "string', options: { sourceType: 'module', lexical: true } },
    { code: 'import { foo as bar, bar } from "string";', options: { sourceType: 'module', lexical: true } },
    { code: '() => { import arrow from ""; }', options: { sourceType: 'module', lexical: true } },
    {
      code: 'import * as "foo" from "./f"; import { foo } from "./m";',
      options: { sourceType: 'module', lexical: true },
    },
    {
      code: 'import * as foo from "./f"; import { foo } from "./m";',
      options: { sourceType: 'module', lexical: true },
    },
    { code: 'import { foo } from "./f"; import { foo } from "./m";', options: { sourceType: 'module', lexical: true } },
    {
      code: 'import { b as foo } from "./f"; import { "a" as foo } from "./m";',
      options: { sourceType: 'module', lexical: true },
    },
  ]);

  for (const arg of [
    "import 'foo';",
    "import { a } from 'foo';",
    'import  * as set from "a"',
    "import { a, b as d, c, } from 'baz';",
    "import * as thing from 'baz';",
    "import thing from 'foo';",
    "import thing, * as rest from 'foo';",
    "import thing, { a, b, c } from 'foo';",
    "import { arguments as a } from 'baz';",
    "import { for as f } from 'foo';",
    "import { yield as y } from 'foo';",
    "import { static as s } from 'foo';",
    "import { let as l } from 'foo';",
    "import { q as z } from 'foo';",
    'import { null as nil } from "bar"',
    'import {bar, baz} from "foo";',
    'import {bar as baz, xyz} from "foo";',
    'import foo, {bar} from "foo";',
    'import C from "foo";',
    'import a, { b, c as d } from "foo"',
    'import * as async from "async";',
    "import foo, * as bar from 'baz';",
    'import $ from "foo"',
    'import {} from "foo";',
    "import n from 'n.js';",
    'import a from "module";',
    'import b, * as c from "module";',
    'import * as d from "module";',
    'import e, {f as g, h as i, j} from "module";',
    'import {k as l, m} from "module";',
    'import {n, o as p} from "module";',
    "import 'q.js';",
    "import a, {b,c,} from 'd'",
    "import a, {b,} from 'foo'",
    "import {as as as} from 'as'",
    "import a, {as} from 'foo'",
    "import a, {function as c} from 'baz'",
    "import a, {b as c} from 'foo'",
    "import a, * as b from 'a'",
    "import a, {} from 'foo'",
    "import a from 'foo'",
    "import * as a from 'a'",
    "import {m as mm} from 'foo';",
    "import {aa} from 'foo';",
    'import { as, get, set, from } from "baz"',
    'import icefapper from "await"',
    "import 'foo';",
    "import get from './get.js';",
    "import { a } from 'foo';",
    "import { a, b as d, c, } from 'baz';",
    "import * as foob from 'bar.js';",
    'import { as, get, set, from } from "baz"',
    "import {} from 'x'",
    "import {a} from 'x'",
    "import {a as b} from 'x'",
    "import {a,b,} from 'x'",
    "import foo, * as bar from 'baz';",
    'import $ from "foo"',
    'import {} from "foo";',
    "import n from 'n.js';",
    'import a from "module";',
    'import b, * as c from "module";',
    "import { yield as y } from 'm.js';",
    "import { static as s } from 'm.js';",
    "import { yield as y } from 'foo';",
    'import async from "foo";',
    'import defexp, {x,} from "foo";',
    'import { Cocoa as async } from "foo"',
    "import 'somemodule.js';",
    "import { } from 'm.js';",
    "import { a } from 'm.js';",
    "import 'foo';",
    "import from from 'foo';",
    "import * as from from 'foo';",
    "import { a } from 'foo';",
    'import { a as of } from "k";',
    // Runtime errors
    'import foo from "foo.js"; try { (() => { foo = 12; })() } catch(e) {}',
    'import { foo } from "foo.js"; try { (() => { foo = 12; })() } catch(e) { assert.areEqual("Assignment to const", e.message); }',
    'import * as foo from "foo.js"; try { (() => { foo = 12; })() } catch(e) { assert.areEqual("Assignment to const", e.message); }',
    'import { foo as foo22 } from "foo.js"; try { (() => { foo22 = 12; })() } catch(e) { assert.areEqual("Assignment to const", e.message); }',
    'import { "foo" as foo } from "./foo";',
    'import { "foo" as foo, } from "./foo";',
    'import { a, "foo" as foo, } from "./foo";',
    'import { "foo" as foo, a } from "./foo";',
    'import { "foo" as foo, a, } from "./foo";',
    'import { "foo" as foo, "a" as a, default as b } from "./foo";',
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseSource(`${arg}`, { sourceType: 'module' });
      });

      t.doesNotThrow(() => {
        parseSource(`${arg}`, { sourceType: 'module', lexical: true });
      });
    });
  }

  // valid tests
  pass('Module - Export', [
    { code: 'import {} from "y"', options: { sourceType: 'module', ranges: true } },
    { code: 'import e, {f as g, h as i, j} from "module";', options: { sourceType: 'module', ranges: true } },
    { code: 'import {n, o as p} from "module";', options: { sourceType: 'module', ranges: true } },
    { code: 'import { as, get, set, from } from "baz"', options: { sourceType: 'module', ranges: true } },
    { code: 'import x, * as ns from "foo"', options: { sourceType: 'module', ranges: true } },
    { code: 'import $ from "foo"', options: { sourceType: 'module' } },
    { code: 'import from from "foo"', options: { sourceType: 'module' } },
    { code: 'import * as d from "module";', options: { sourceType: 'module', ranges: true } },
    { code: 'import {n, o as p} from "module";', options: { sourceType: 'module' } },
    { code: 'import icefapper from "await"', options: { sourceType: 'module' } },
    { code: 'import x from "y"', options: { sourceType: 'module' } },
    { code: 'import {a, b} from "c"', options: { sourceType: 'module', ranges: true } },
    { code: 'import * as a from "y"', options: { sourceType: 'module' } },
    { code: 'import x, * as a from "y"', options: { sourceType: 'module', ranges: true } },
    { code: 'import {} from "y"', options: { sourceType: 'module' } },
    { code: 'import "y"', options: { sourceType: 'module', ranges: true } },
    { code: 'import {x} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x,} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x as z} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x as z,} from "y"', options: { sourceType: 'module', ranges: true } },
    { code: 'import {x, z} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x, z,} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x as a, z} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x, z as b} from "y"', options: { sourceType: 'module' } },
    { code: 'import {x as a, z as b} from "y"', options: { sourceType: 'module', ranges: true } },
    { code: 'import {x as a, z as b,} from "y"', options: { sourceType: 'module' } },
    { code: 'import { default as f2, "foo" as foo } from "./foo";', options: { sourceType: 'module' } },
  ]);
});
